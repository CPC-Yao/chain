// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chain.proto

package protos_chain

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublicEthereumAPIReply struct {
	GasPrice             []byte              `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Version              uint32              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	IsOk                 *wrappers.BoolValue `protobuf:"bytes,3,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	SyncInfo             *any.Any            `protobuf:"bytes,4,opt,name=sync_info,json=syncInfo,proto3" json:"sync_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicEthereumAPIReply) Reset()         { *m = PublicEthereumAPIReply{} }
func (m *PublicEthereumAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicEthereumAPIReply) ProtoMessage()    {}
func (*PublicEthereumAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{0}
}

func (m *PublicEthereumAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicEthereumAPIReply.Unmarshal(m, b)
}
func (m *PublicEthereumAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicEthereumAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicEthereumAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicEthereumAPIReply.Merge(m, src)
}
func (m *PublicEthereumAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicEthereumAPIReply.Size(m)
}
func (m *PublicEthereumAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicEthereumAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicEthereumAPIReply proto.InternalMessageInfo

func (m *PublicEthereumAPIReply) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicEthereumAPIReply) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PublicEthereumAPIReply) GetIsOk() *wrappers.BoolValue {
	if m != nil {
		return m.IsOk
	}
	return nil
}

func (m *PublicEthereumAPIReply) GetSyncInfo() *any.Any {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

type RPCTransaction struct {
	BlockHash            []byte   `protobuf:"bytes,1,opt,name=blockHash,proto3" json:"blockHash,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From                 []byte   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas                  uint64   `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Hash                 []byte   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input                []byte   `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce                uint64   `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To                   []byte   `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	TrasactionIndex      uint32   `protobuf:"varint,10,opt,name=trasaction_index,json=trasactionIndex,proto3" json:"trasaction_index,omitempty"`
	Value                []byte   `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	V                    []byte   `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte   `protobuf:"bytes,13,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,14,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCTransaction) Reset()         { *m = RPCTransaction{} }
func (m *RPCTransaction) String() string { return proto.CompactTextString(m) }
func (*RPCTransaction) ProtoMessage()    {}
func (*RPCTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{1}
}

func (m *RPCTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCTransaction.Unmarshal(m, b)
}
func (m *RPCTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCTransaction.Marshal(b, m, deterministic)
}
func (m *RPCTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCTransaction.Merge(m, src)
}
func (m *RPCTransaction) XXX_Size() int {
	return xxx_messageInfo_RPCTransaction.Size(m)
}
func (m *RPCTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RPCTransaction proto.InternalMessageInfo

func (m *RPCTransaction) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *RPCTransaction) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *RPCTransaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RPCTransaction) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *RPCTransaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *RPCTransaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RPCTransaction) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RPCTransaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RPCTransaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RPCTransaction) GetTrasactionIndex() uint32 {
	if m != nil {
		return m.TrasactionIndex
	}
	return 0
}

func (m *RPCTransaction) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *RPCTransaction) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *RPCTransaction) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RPCTransaction) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PublicTxPoolAPIReply struct {
	Status               map[string]uint64 `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Content              *any.Any          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Inspect              *any.Any          `protobuf:"bytes,3,opt,name=inspect,proto3" json:"inspect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublicTxPoolAPIReply) Reset()         { *m = PublicTxPoolAPIReply{} }
func (m *PublicTxPoolAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicTxPoolAPIReply) ProtoMessage()    {}
func (*PublicTxPoolAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{2}
}

func (m *PublicTxPoolAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTxPoolAPIReply.Unmarshal(m, b)
}
func (m *PublicTxPoolAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTxPoolAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicTxPoolAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTxPoolAPIReply.Merge(m, src)
}
func (m *PublicTxPoolAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicTxPoolAPIReply.Size(m)
}
func (m *PublicTxPoolAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTxPoolAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTxPoolAPIReply proto.InternalMessageInfo

func (m *PublicTxPoolAPIReply) GetStatus() map[string]uint64 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PublicTxPoolAPIReply) GetContent() *any.Any {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PublicTxPoolAPIReply) GetInspect() *any.Any {
	if m != nil {
		return m.Inspect
	}
	return nil
}

type PublicAccountAPIReply struct {
	Accounts             *any.Any `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicAccountAPIReply) Reset()         { *m = PublicAccountAPIReply{} }
func (m *PublicAccountAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicAccountAPIReply) ProtoMessage()    {}
func (*PublicAccountAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{3}
}

func (m *PublicAccountAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicAccountAPIReply.Unmarshal(m, b)
}
func (m *PublicAccountAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicAccountAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicAccountAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicAccountAPIReply.Merge(m, src)
}
func (m *PublicAccountAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicAccountAPIReply.Size(m)
}
func (m *PublicAccountAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicAccountAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicAccountAPIReply proto.InternalMessageInfo

func (m *PublicAccountAPIReply) GetAccounts() *any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type PrivateAccountAPIRequest struct {
	Url                  *wrappers.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Pin                  *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"`
	Data                 []byte                `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Sig                  []byte                `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	PrivKey              *wrappers.StringValue `protobuf:"bytes,6,opt,name=priv_key,json=privKey,proto3" json:"priv_key,omitempty"`
	Password             *wrappers.StringValue `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Addr                 []byte                `protobuf:"bytes,8,opt,name=addr,proto3" json:"addr,omitempty"`
	Duration             *wrappers.UInt64Value `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	SendTxArgs           *any.Any              `protobuf:"bytes,10,opt,name=send_tx_args,json=sendTxArgs,proto3" json:"send_tx_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrivateAccountAPIRequest) Reset()         { *m = PrivateAccountAPIRequest{} }
func (m *PrivateAccountAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateAccountAPIRequest) ProtoMessage()    {}
func (*PrivateAccountAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{4}
}

func (m *PrivateAccountAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAccountAPIRequest.Unmarshal(m, b)
}
func (m *PrivateAccountAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAccountAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateAccountAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAccountAPIRequest.Merge(m, src)
}
func (m *PrivateAccountAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateAccountAPIRequest.Size(m)
}
func (m *PrivateAccountAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAccountAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAccountAPIRequest proto.InternalMessageInfo

func (m *PrivateAccountAPIRequest) GetUrl() *wrappers.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPath() *wrappers.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPin() *wrappers.BoolValue {
	if m != nil {
		return m.Pin
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPrivKey() *wrappers.StringValue {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPassword() *wrappers.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetDuration() *wrappers.UInt64Value {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetSendTxArgs() *any.Any {
	if m != nil {
		return m.SendTxArgs
	}
	return nil
}

type PrivateAccountAPIReply struct {
	Account              *any.Any `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	AccountAddresses     *any.Any `protobuf:"bytes,2,opt,name=account_addresses,json=accountAddresses,proto3" json:"account_addresses,omitempty"`
	RawWallets           *any.Any `protobuf:"bytes,3,opt,name=raw_wallets,json=rawWallets,proto3" json:"raw_wallets,omitempty"`
	IsOk                 bool     `protobuf:"varint,4,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	TxHash               []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	SignTxResult         *any.Any `protobuf:"bytes,6,opt,name=sign_tx_result,json=signTxResult,proto3" json:"sign_tx_result,omitempty"`
	Signature            []byte   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	Address              []byte   `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateAccountAPIReply) Reset()         { *m = PrivateAccountAPIReply{} }
func (m *PrivateAccountAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateAccountAPIReply) ProtoMessage()    {}
func (*PrivateAccountAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{5}
}

func (m *PrivateAccountAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAccountAPIReply.Unmarshal(m, b)
}
func (m *PrivateAccountAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAccountAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateAccountAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAccountAPIReply.Merge(m, src)
}
func (m *PrivateAccountAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateAccountAPIReply.Size(m)
}
func (m *PrivateAccountAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAccountAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAccountAPIReply proto.InternalMessageInfo

func (m *PrivateAccountAPIReply) GetAccount() *any.Any {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetAccountAddresses() *any.Any {
	if m != nil {
		return m.AccountAddresses
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetRawWallets() *any.Any {
	if m != nil {
		return m.RawWallets
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *PrivateAccountAPIReply) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetSignTxResult() *any.Any {
	if m != nil {
		return m.SignTxResult
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

// rawWallet is a JSON representation of an accounts.Wallet interface, with its
// data contents extracted into plain fields.
type RawWallet struct {
	Url                  string     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Status               string     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Failure              string     `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
	Accounts             []*any.Any `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RawWallet) Reset()         { *m = RawWallet{} }
func (m *RawWallet) String() string { return proto.CompactTextString(m) }
func (*RawWallet) ProtoMessage()    {}
func (*RawWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{6}
}

func (m *RawWallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawWallet.Unmarshal(m, b)
}
func (m *RawWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawWallet.Marshal(b, m, deterministic)
}
func (m *RawWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawWallet.Merge(m, src)
}
func (m *RawWallet) XXX_Size() int {
	return xxx_messageInfo_RawWallet.Size(m)
}
func (m *RawWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_RawWallet.DiscardUnknown(m)
}

var xxx_messageInfo_RawWallet proto.InternalMessageInfo

func (m *RawWallet) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RawWallet) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RawWallet) GetFailure() string {
	if m != nil {
		return m.Failure
	}
	return ""
}

func (m *RawWallet) GetAccounts() []*any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type PublicBlockChainAPIRequest struct {
	// CallArgs args = 1;
	Args                 *any.Any `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address              []byte   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	FullTx               bool     `protobuf:"varint,4,opt,name=full_tx,json=fullTx,proto3" json:"full_tx,omitempty"`
	Key                  string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Index                uint64   `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIRequest) Reset()         { *m = PublicBlockChainAPIRequest{} }
func (m *PublicBlockChainAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIRequest) ProtoMessage()    {}
func (*PublicBlockChainAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{7}
}

func (m *PublicBlockChainAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIRequest.Merge(m, src)
}
func (m *PublicBlockChainAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Size(m)
}
func (m *PublicBlockChainAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIRequest proto.InternalMessageInfo

func (m *PublicBlockChainAPIRequest) GetArgs() *any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicBlockChainAPIRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetFullTx() bool {
	if m != nil {
		return m.FullTx
	}
	return false
}

func (m *PublicBlockChainAPIRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PublicBlockChainAPIRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type PublicBlockChainAPIRequest_CallArgs struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   []byte   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Gas                  uint64   `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	IsPrivate            bool     `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIRequest_CallArgs) Reset()         { *m = PublicBlockChainAPIRequest_CallArgs{} }
func (m *PublicBlockChainAPIRequest_CallArgs) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIRequest_CallArgs) ProtoMessage()    {}
func (*PublicBlockChainAPIRequest_CallArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{7, 0}
}

func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Merge(m, src)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Size(m)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs proto.InternalMessageInfo

func (m *PublicBlockChainAPIRequest_CallArgs) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

type PublicBlockChainAPIReply struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	EstimateGas          uint64   `protobuf:"varint,3,opt,name=estimate_gas,json=estimateGas,proto3" json:"estimate_gas,omitempty"`
	Balance              []byte   `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	BlockInfo            *any.Any `protobuf:"bytes,5,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Code                 []byte   `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Storage              []byte   `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	UncleCount           uint64   `protobuf:"varint,8,opt,name=uncle_count,json=uncleCount,proto3" json:"uncle_count,omitempty"`
	Result               []byte   `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIReply) Reset()         { *m = PublicBlockChainAPIReply{} }
func (m *PublicBlockChainAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIReply) ProtoMessage()    {}
func (*PublicBlockChainAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{8}
}

func (m *PublicBlockChainAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIReply.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIReply.Merge(m, src)
}
func (m *PublicBlockChainAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIReply.Size(m)
}
func (m *PublicBlockChainAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIReply proto.InternalMessageInfo

func (m *PublicBlockChainAPIReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetEstimateGas() uint64 {
	if m != nil {
		return m.EstimateGas
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetBlockInfo() *any.Any {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetStorage() []byte {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetUncleCount() uint64 {
	if m != nil {
		return m.UncleCount
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

// ###################################################
type PublicTransactionPoolAPIRequest struct {
	BlockHash            []byte                `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber          uint64                `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Index                uint64                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	TxHash               []byte                `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Address              []byte                `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	SendTxArgs           *any.Any              `protobuf:"bytes,6,opt,name=send_tx_args,json=sendTxArgs,proto3" json:"send_tx_args,omitempty"`
	GasPrice             []byte                `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit             *wrappers.UInt64Value `protobuf:"bytes,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Payload              []byte                `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	EncodedTx            []byte                `protobuf:"bytes,10,opt,name=encoded_tx,json=encodedTx,proto3" json:"encoded_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PublicTransactionPoolAPIRequest) Reset()         { *m = PublicTransactionPoolAPIRequest{} }
func (m *PublicTransactionPoolAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicTransactionPoolAPIRequest) ProtoMessage()    {}
func (*PublicTransactionPoolAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{9}
}

func (m *PublicTransactionPoolAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Unmarshal(m, b)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTransactionPoolAPIRequest.Merge(m, src)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Size(m)
}
func (m *PublicTransactionPoolAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTransactionPoolAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTransactionPoolAPIRequest proto.InternalMessageInfo

func (m *PublicTransactionPoolAPIRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicTransactionPoolAPIRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PublicTransactionPoolAPIRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetSendTxArgs() *any.Any {
	if m != nil {
		return m.SendTxArgs
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetGasLimit() *wrappers.UInt64Value {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetEncodedTx() []byte {
	if m != nil {
		return m.EncodedTx
	}
	return nil
}

type PublicTransactionPoolAPIReply struct {
	Count          uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Payload        []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	RpcTransaction *any.Any `protobuf:"bytes,3,opt,name=rpc_transaction,json=rpcTransaction,proto3" json:"rpc_transaction,omitempty"`
	// RPCTransaction rpc_transaction = 3;
	TxReceipt    []byte   `protobuf:"bytes,4,opt,name=tx_receipt,json=txReceipt,proto3" json:"tx_receipt,omitempty"`
	TxHash       []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	SignTxResult *any.Any `protobuf:"bytes,6,opt,name=sign_tx_result,json=signTxResult,proto3" json:"sign_tx_result,omitempty"`
	TxBytes      []byte   `protobuf:"bytes,7,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Fields       *any.Any `protobuf:"bytes,8,opt,name=fields,proto3" json:"fields,omitempty"`
	Signature    []byte   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	// repeated RPCTransaction pending_txs = 10;
	PendingTxs           *any.Any `protobuf:"bytes,10,opt,name=pending_txs,json=pendingTxs,proto3" json:"pending_txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicTransactionPoolAPIReply) Reset()         { *m = PublicTransactionPoolAPIReply{} }
func (m *PublicTransactionPoolAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicTransactionPoolAPIReply) ProtoMessage()    {}
func (*PublicTransactionPoolAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{10}
}

func (m *PublicTransactionPoolAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Unmarshal(m, b)
}
func (m *PublicTransactionPoolAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicTransactionPoolAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTransactionPoolAPIReply.Merge(m, src)
}
func (m *PublicTransactionPoolAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Size(m)
}
func (m *PublicTransactionPoolAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTransactionPoolAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTransactionPoolAPIReply proto.InternalMessageInfo

func (m *PublicTransactionPoolAPIReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PublicTransactionPoolAPIReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetRpcTransaction() *any.Any {
	if m != nil {
		return m.RpcTransaction
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxReceipt() []byte {
	if m != nil {
		return m.TxReceipt
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetSignTxResult() *any.Any {
	if m != nil {
		return m.SignTxResult
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetFields() *any.Any {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetPendingTxs() *any.Any {
	if m != nil {
		return m.PendingTxs
	}
	return nil
}

type SignTransactionResult struct {
	Raw                  []byte   `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Tx                   *any.Any `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionResult) Reset()         { *m = SignTransactionResult{} }
func (m *SignTransactionResult) String() string { return proto.CompactTextString(m) }
func (*SignTransactionResult) ProtoMessage()    {}
func (*SignTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{11}
}

func (m *SignTransactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionResult.Unmarshal(m, b)
}
func (m *SignTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionResult.Marshal(b, m, deterministic)
}
func (m *SignTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionResult.Merge(m, src)
}
func (m *SignTransactionResult) XXX_Size() int {
	return xxx_messageInfo_SignTransactionResult.Size(m)
}
func (m *SignTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionResult proto.InternalMessageInfo

func (m *SignTransactionResult) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *SignTransactionResult) GetTx() *any.Any {
	if m != nil {
		return m.Tx
	}
	return nil
}

// ###################################################
type PublicDebugAPIRequest struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicDebugAPIRequest) Reset()         { *m = PublicDebugAPIRequest{} }
func (m *PublicDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicDebugAPIRequest) ProtoMessage()    {}
func (*PublicDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{12}
}

func (m *PublicDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicDebugAPIRequest.Unmarshal(m, b)
}
func (m *PublicDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicDebugAPIRequest.Merge(m, src)
}
func (m *PublicDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicDebugAPIRequest.Size(m)
}
func (m *PublicDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicDebugAPIRequest proto.InternalMessageInfo

func (m *PublicDebugAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PublicDebugAPIReply struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Rlp                  string   `protobuf:"bytes,2,opt,name=rlp,proto3" json:"rlp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicDebugAPIReply) Reset()         { *m = PublicDebugAPIReply{} }
func (m *PublicDebugAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicDebugAPIReply) ProtoMessage()    {}
func (*PublicDebugAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{13}
}

func (m *PublicDebugAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicDebugAPIReply.Unmarshal(m, b)
}
func (m *PublicDebugAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicDebugAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicDebugAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicDebugAPIReply.Merge(m, src)
}
func (m *PublicDebugAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicDebugAPIReply.Size(m)
}
func (m *PublicDebugAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicDebugAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicDebugAPIReply proto.InternalMessageInfo

func (m *PublicDebugAPIReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *PublicDebugAPIReply) GetRlp() string {
	if m != nil {
		return m.Rlp
	}
	return ""
}

type PrivateDebugAPIRequest struct {
	Property             string   `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateDebugAPIRequest) Reset()         { *m = PrivateDebugAPIRequest{} }
func (m *PrivateDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateDebugAPIRequest) ProtoMessage()    {}
func (*PrivateDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{14}
}

func (m *PrivateDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateDebugAPIRequest.Unmarshal(m, b)
}
func (m *PrivateDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDebugAPIRequest.Merge(m, src)
}
func (m *PrivateDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateDebugAPIRequest.Size(m)
}
func (m *PrivateDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDebugAPIRequest proto.InternalMessageInfo

func (m *PrivateDebugAPIRequest) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *PrivateDebugAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PrivateDebugAPIReply struct {
	Property             string   `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateDebugAPIReply) Reset()         { *m = PrivateDebugAPIReply{} }
func (m *PrivateDebugAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateDebugAPIReply) ProtoMessage()    {}
func (*PrivateDebugAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{15}
}

func (m *PrivateDebugAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateDebugAPIReply.Unmarshal(m, b)
}
func (m *PrivateDebugAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateDebugAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateDebugAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDebugAPIReply.Merge(m, src)
}
func (m *PrivateDebugAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateDebugAPIReply.Size(m)
}
func (m *PrivateDebugAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDebugAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDebugAPIReply proto.InternalMessageInfo

func (m *PrivateDebugAPIReply) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *PrivateDebugAPIReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PublicNetAPIReply struct {
	IsListening          bool     `protobuf:"varint,1,opt,name=is_listening,json=isListening,proto3" json:"is_listening,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	PeerCount            uint32   `protobuf:"varint,3,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicNetAPIReply) Reset()         { *m = PublicNetAPIReply{} }
func (m *PublicNetAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicNetAPIReply) ProtoMessage()    {}
func (*PublicNetAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d91b2d037e7a44, []int{16}
}

func (m *PublicNetAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicNetAPIReply.Unmarshal(m, b)
}
func (m *PublicNetAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicNetAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicNetAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicNetAPIReply.Merge(m, src)
}
func (m *PublicNetAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicNetAPIReply.Size(m)
}
func (m *PublicNetAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicNetAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicNetAPIReply proto.InternalMessageInfo

func (m *PublicNetAPIReply) GetIsListening() bool {
	if m != nil {
		return m.IsListening
	}
	return false
}

func (m *PublicNetAPIReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PublicNetAPIReply) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func init() {
	proto.RegisterType((*PublicEthereumAPIReply)(nil), "protos_chain.PublicEthereumAPIReply")
	proto.RegisterType((*RPCTransaction)(nil), "protos_chain.RPCTransaction")
	proto.RegisterType((*PublicTxPoolAPIReply)(nil), "protos_chain.PublicTxPoolAPIReply")
	proto.RegisterMapType((map[string]uint64)(nil), "protos_chain.PublicTxPoolAPIReply.StatusEntry")
	proto.RegisterType((*PublicAccountAPIReply)(nil), "protos_chain.PublicAccountAPIReply")
	proto.RegisterType((*PrivateAccountAPIRequest)(nil), "protos_chain.PrivateAccountAPIRequest")
	proto.RegisterType((*PrivateAccountAPIReply)(nil), "protos_chain.PrivateAccountAPIReply")
	proto.RegisterType((*RawWallet)(nil), "protos_chain.RawWallet")
	proto.RegisterType((*PublicBlockChainAPIRequest)(nil), "protos_chain.PublicBlockChainAPIRequest")
	proto.RegisterType((*PublicBlockChainAPIRequest_CallArgs)(nil), "protos_chain.PublicBlockChainAPIRequest.CallArgs")
	proto.RegisterType((*PublicBlockChainAPIReply)(nil), "protos_chain.PublicBlockChainAPIReply")
	proto.RegisterType((*PublicTransactionPoolAPIRequest)(nil), "protos_chain.PublicTransactionPoolAPIRequest")
	proto.RegisterType((*PublicTransactionPoolAPIReply)(nil), "protos_chain.PublicTransactionPoolAPIReply")
	proto.RegisterType((*SignTransactionResult)(nil), "protos_chain.SignTransactionResult")
	proto.RegisterType((*PublicDebugAPIRequest)(nil), "protos_chain.PublicDebugAPIRequest")
	proto.RegisterType((*PublicDebugAPIReply)(nil), "protos_chain.PublicDebugAPIReply")
	proto.RegisterType((*PrivateDebugAPIRequest)(nil), "protos_chain.PrivateDebugAPIRequest")
	proto.RegisterType((*PrivateDebugAPIReply)(nil), "protos_chain.PrivateDebugAPIReply")
	proto.RegisterType((*PublicNetAPIReply)(nil), "protos_chain.PublicNetAPIReply")
}

func init() { proto.RegisterFile("chain.proto", fileDescriptor_d4d91b2d037e7a44) }

var fileDescriptor_d4d91b2d037e7a44 = []byte{
	// 2800 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x5a, 0x4f, 0x6f, 0x1b, 0xc7,
	0x15, 0xc7, 0x92, 0x94, 0x48, 0x3e, 0xd2, 0x92, 0xbd, 0x96, 0x15, 0x9a, 0xb6, 0x6c, 0x79, 0xac,
	0x38, 0x8a, 0x63, 0x53, 0x8e, 0x5c, 0xbb, 0x8e, 0xd3, 0x16, 0x90, 0x14, 0x57, 0x11, 0x1a, 0x24,
	0xc2, 0x4a, 0x4e, 0x80, 0x5e, 0x88, 0xd5, 0x72, 0x44, 0x6d, 0xbc, 0xda, 0xdd, 0xee, 0x0e, 0x25,
	0xaa, 0x48, 0x8b, 0x34, 0x28, 0xda, 0x22, 0x2d, 0x7a, 0x29, 0xd0, 0x53, 0x11, 0x04, 0x41, 0x11,
	0xf4, 0x18, 0xa0, 0x3d, 0x14, 0x3d, 0x14, 0x3d, 0xf4, 0xd2, 0x1e, 0xda, 0x02, 0xfd, 0x08, 0xcd,
	0x57, 0xe8, 0xa1, 0xb7, 0xe2, 0xcd, 0x1f, 0x72, 0xff, 0x91, 0x54, 0x2b, 0x32, 0x39, 0x69, 0x67,
	0xf8, 0x66, 0x7e, 0xbf, 0x79, 0xef, 0xcd, 0x7b, 0xf3, 0x66, 0x04, 0x15, 0xeb, 0xc0, 0xb4, 0xdd,
	0x86, 0x1f, 0x78, 0xcc, 0xd3, 0xab, 0xfc, 0x4f, 0xd8, 0xe4, 0x7d, 0xf5, 0x2b, 0x6d, 0xcf, 0x6b,
	0x3b, 0x74, 0x85, 0x77, 0xee, 0x75, 0xf6, 0x57, 0xe8, 0xa1, 0xcf, 0x4e, 0x84, 0x68, 0xfd, 0xaa,
	0xfc, 0xd1, 0xf4, 0xed, 0x15, 0xd3, 0x75, 0x3d, 0x66, 0x32, 0xdb, 0x73, 0x43, 0xf9, 0xeb, 0xe5,
	0xe4, 0x50, 0xd3, 0x55, 0x03, 0xaf, 0x25, 0x7f, 0x3a, 0x0e, 0x4c, 0xdf, 0xa7, 0x81, 0x1c, 0x4a,
	0x7e, 0xab, 0xc1, 0xfc, 0x76, 0x67, 0xcf, 0xb1, 0xad, 0x27, 0xec, 0x80, 0x06, 0xb4, 0x73, 0xb8,
	0xb6, 0xbd, 0x65, 0x50, 0xdf, 0x39, 0xd1, 0xaf, 0x40, 0xb9, 0x6d, 0x86, 0x4d, 0x3f, 0xb0, 0x2d,
	0x5a, 0xd3, 0x16, 0xb5, 0xe5, 0xaa, 0x51, 0x6a, 0x9b, 0xe1, 0x36, 0xb6, 0xf5, 0x1a, 0x14, 0x8f,
	0x68, 0x10, 0xda, 0x9e, 0x5b, 0xcb, 0x2d, 0x6a, 0xcb, 0xe7, 0x0c, 0xd5, 0xd4, 0x57, 0x60, 0xca,
	0x0e, 0x9b, 0xde, 0xb3, 0x5a, 0x7e, 0x51, 0x5b, 0xae, 0xac, 0xd6, 0x1b, 0x82, 0x41, 0x43, 0x31,
	0x68, 0xac, 0x7b, 0x9e, 0xf3, 0xb6, 0xe9, 0x74, 0xa8, 0x51, 0xb0, 0xc3, 0xb7, 0x9e, 0xe9, 0x2f,
	0x43, 0x39, 0x3c, 0x71, 0xad, 0xa6, 0xed, 0xee, 0x7b, 0xb5, 0x02, 0x1f, 0x34, 0x97, 0x1a, 0xb4,
	0xe6, 0x9e, 0x18, 0x25, 0x14, 0xdb, 0x72, 0xf7, 0x3d, 0xf2, 0xf7, 0x1c, 0xcc, 0x18, 0xdb, 0x1b,
	0xbb, 0x81, 0xe9, 0x86, 0xa6, 0x85, 0xaa, 0xd0, 0xaf, 0x42, 0x79, 0xcf, 0xf1, 0xac, 0x67, 0xaf,
	0x9b, 0xe1, 0x81, 0x64, 0xdb, 0xef, 0xd0, 0x6f, 0x40, 0x95, 0x37, 0x9a, 0x6e, 0xe7, 0x70, 0x8f,
	0x06, 0x9c, 0x73, 0xc1, 0xa8, 0xf0, 0xbe, 0x37, 0x79, 0x97, 0xae, 0x43, 0x61, 0x3f, 0xf0, 0x0e,
	0x39, 0xed, 0xaa, 0xc1, 0xbf, 0xf5, 0xf3, 0x90, 0x6f, 0x9b, 0x21, 0x27, 0x55, 0x30, 0xf0, 0x33,
	0xae, 0x94, 0xa9, 0x84, 0x52, 0x74, 0x28, 0x1c, 0x20, 0xfc, 0xb4, 0x98, 0x02, 0xbf, 0xf5, 0x39,
	0x98, 0xb2, 0x5d, 0xbf, 0xc3, 0x6a, 0x45, 0xde, 0x29, 0x1a, 0xd8, 0xeb, 0x7a, 0xae, 0x45, 0x6b,
	0x25, 0x3e, 0xb5, 0x68, 0xe8, 0x33, 0x90, 0x63, 0x5e, 0xad, 0xcc, 0x05, 0x73, 0xcc, 0xd3, 0x5f,
	0x84, 0xf3, 0x2c, 0x30, 0xe5, 0x0a, 0x9b, 0xb6, 0xdb, 0xa2, 0xdd, 0x1a, 0x70, 0x6d, 0xcf, 0xf6,
	0xfb, 0xb7, 0xb0, 0x1b, 0x27, 0x3c, 0x42, 0x9d, 0xd6, 0x2a, 0x02, 0x86, 0x37, 0xf4, 0x2a, 0x68,
	0x47, 0xb5, 0x2a, 0xef, 0xd1, 0x8e, 0xb0, 0x15, 0xd4, 0xce, 0x89, 0x56, 0x80, 0xad, 0xb0, 0x36,
	0x23, 0x5a, 0x21, 0xf9, 0x8f, 0x06, 0x73, 0xc2, 0x0f, 0x76, 0xbb, 0xdb, 0x9e, 0xe7, 0xf4, 0xbc,
	0xe0, 0x9b, 0x30, 0x1d, 0x32, 0x93, 0x75, 0xc2, 0x9a, 0xb6, 0x98, 0x5f, 0xae, 0xac, 0x36, 0x1a,
	0x51, 0xaf, 0x6d, 0x64, 0x8d, 0x69, 0xec, 0xf0, 0x01, 0x4f, 0x5c, 0x16, 0x9c, 0x18, 0x72, 0xb4,
	0xde, 0x80, 0xa2, 0xe5, 0xb9, 0x8c, 0xba, 0x8c, 0x2b, 0x7f, 0x90, 0x8d, 0x95, 0x10, 0xca, 0xdb,
	0x6e, 0xe8, 0x53, 0x8b, 0x49, 0x47, 0x1a, 0x20, 0x2f, 0x85, 0xea, 0xaf, 0x40, 0x25, 0x02, 0x8b,
	0x96, 0x7b, 0x46, 0x4f, 0xb8, 0x23, 0x94, 0x0d, 0xfc, 0xec, 0x6b, 0x48, 0xd8, 0x5e, 0x34, 0x1e,
	0xe7, 0x1e, 0x69, 0x64, 0x0b, 0x2e, 0x89, 0x65, 0xac, 0x59, 0x96, 0xd7, 0x71, 0x59, 0x6f, 0xed,
	0xf7, 0xa0, 0x64, 0x8a, 0xae, 0x90, 0xcf, 0x34, 0xd0, 0x31, 0x95, 0x14, 0xf9, 0x4b, 0x1e, 0x6a,
	0xdb, 0x81, 0x7d, 0x64, 0x32, 0x1a, 0x9d, 0xec, 0x3b, 0x1d, 0x1a, 0xe2, 0x92, 0xf2, 0x9d, 0xc0,
	0x91, 0x33, 0x5d, 0x4d, 0xcd, 0xb4, 0xc3, 0x02, 0xdb, 0x6d, 0x8b, 0x9d, 0x81, 0x82, 0xfa, 0x3d,
	0x28, 0xf8, 0x26, 0x3b, 0x90, 0xfa, 0x1a, 0x3e, 0x80, 0x4b, 0xea, 0x77, 0x20, 0xef, 0xdb, 0xee,
	0x29, 0x76, 0x1e, 0x8a, 0xa1, 0xbb, 0xb6, 0x4c, 0x66, 0x72, 0xf7, 0xae, 0x1a, 0xfc, 0x1b, 0xf5,
	0x16, 0xda, 0x6d, 0xe9, 0xd9, 0xf8, 0xa9, 0x7f, 0x15, 0x4a, 0x7e, 0x60, 0x1f, 0x35, 0x51, 0x9d,
	0xd3, 0xa7, 0x60, 0x52, 0x44, 0xe9, 0x6f, 0xd1, 0x13, 0xfd, 0x11, 0x94, 0x7c, 0x33, 0x0c, 0x8f,
	0xbd, 0xa0, 0xc5, 0x9d, 0x7f, 0xd4, 0xc0, 0x9e, 0x34, 0x12, 0x33, 0x5b, 0xad, 0x80, 0x6f, 0x8e,
	0xaa, 0xc1, 0xbf, 0x71, 0xb6, 0x56, 0x27, 0xe0, 0x61, 0x8f, 0xef, 0x90, 0xac, 0xd9, 0x9e, 0x6e,
	0xb9, 0xec, 0xe1, 0x57, 0xe4, 0x6c, 0x4a, 0x5a, 0x7f, 0x08, 0xd5, 0x90, 0xba, 0xad, 0x26, 0xeb,
	0x36, 0xcd, 0xa0, 0x1d, 0xf2, 0x1d, 0x34, 0xc8, 0x92, 0x80, 0x92, 0xbb, 0xdd, 0xb5, 0xa0, 0x1d,
	0x92, 0xcf, 0x73, 0x30, 0x9f, 0x61, 0x4b, 0x74, 0x8c, 0x06, 0x14, 0xa5, 0xc9, 0x87, 0xfa, 0x85,
	0x12, 0xd2, 0xd7, 0xe0, 0x82, 0xfc, 0x6c, 0xe2, 0x62, 0x68, 0x18, 0xd2, 0x70, 0xe8, 0x36, 0x38,
	0x2f, 0xc5, 0xd7, 0x94, 0xb4, 0xfe, 0x00, 0x2a, 0x81, 0x79, 0xdc, 0x3c, 0x36, 0x1d, 0x87, 0xb2,
	0x70, 0xe8, 0x9e, 0x80, 0xc0, 0x3c, 0x7e, 0x47, 0xc8, 0xe9, 0x17, 0x55, 0x34, 0x46, 0x23, 0x97,
	0x64, 0xc4, 0x7d, 0x0e, 0x8a, 0xac, 0xdb, 0xe4, 0xa1, 0x4a, 0x18, 0x7a, 0x9a, 0x75, 0x79, 0x98,
	0x7c, 0x0c, 0x33, 0xa1, 0xdd, 0x76, 0x51, 0x55, 0x01, 0x0d, 0x3b, 0x0e, 0x93, 0x16, 0xcf, 0xc6,
	0xa9, 0xa2, 0xec, 0x6e, 0xd7, 0xe0, 0x92, 0x18, 0x80, 0xb1, 0x6d, 0xb2, 0x4e, 0x40, 0x65, 0xb0,
	0xeb, 0x77, 0x60, 0xbe, 0x90, 0x2b, 0x97, 0x56, 0x55, 0x4d, 0xf2, 0x03, 0x0d, 0xca, 0x86, 0x22,
	0x8c, 0xfe, 0xa7, 0xf6, 0x48, 0x59, 0xec, 0x82, 0xf9, 0x5e, 0x00, 0xca, 0xf1, 0x4e, 0x15, 0x50,
	0x6a, 0x50, 0xdc, 0x37, 0x6d, 0x07, 0xd1, 0xf2, 0xfc, 0x07, 0xd5, 0x8c, 0x6d, 0xdb, 0x02, 0x0f,
	0x5a, 0xa3, 0xb6, 0xed, 0xcf, 0xf2, 0x50, 0x17, 0x21, 0x60, 0x1d, 0x33, 0xc2, 0x06, 0x86, 0xb6,
	0xc8, 0xc6, 0x5d, 0x86, 0x02, 0xf7, 0x9c, 0x61, 0xb6, 0xe6, 0x12, 0xa7, 0xc9, 0x33, 0x11, 0x4d,
	0xe4, 0x63, 0x9a, 0x40, 0xb3, 0xec, 0x77, 0x1c, 0xa7, 0xc9, 0xba, 0xd2, 0x5a, 0xd3, 0xd8, 0xdc,
	0xed, 0xaa, 0x60, 0x36, 0xd5, 0x0f, 0x66, 0x0b, 0x00, 0x02, 0x27, 0x92, 0x6f, 0x22, 0xe9, 0x8e,
	0x27, 0x1d, 0xcc, 0x16, 0x45, 0x11, 0xeb, 0x78, 0xa3, 0xfe, 0xa9, 0x06, 0xa5, 0x0d, 0xd3, 0x71,
	0xd0, 0xbb, 0x7b, 0xe9, 0x4e, 0x8b, 0xa4, 0x3b, 0x91, 0x7f, 0x72, 0xbd, 0xfc, 0x23, 0xd3, 0x5f,
	0x7e, 0x40, 0xfa, 0x2b, 0x24, 0xd2, 0x5f, 0x2f, 0xc2, 0x4e, 0x45, 0x73, 0x90, 0x8a, 0x32, 0xd3,
	0x91, 0x28, 0xb3, 0x00, 0x60, 0xf3, 0x59, 0x70, 0x73, 0x71, 0x92, 0x25, 0xa3, 0x6c, 0x87, 0x72,
	0xb7, 0x91, 0xcf, 0x72, 0x50, 0xcb, 0x34, 0x07, 0xee, 0xbd, 0xa4, 0x8a, 0xb5, 0x4c, 0x15, 0xfb,
	0xe6, 0x89, 0xe3, 0x99, 0x2d, 0xb9, 0x18, 0xd5, 0xc4, 0xc1, 0x34, 0x64, 0xf6, 0xa1, 0xc9, 0x68,
	0xb3, 0xbf, 0xb4, 0x8a, 0xea, 0xdb, 0x34, 0xb9, 0x5f, 0xed, 0x99, 0x8e, 0xe9, 0xf6, 0x16, 0xa8,
	0x9a, 0xfa, 0x7d, 0xa5, 0x74, 0x7e, 0x52, 0x99, 0x1a, 0xe2, 0x0c, 0xc2, 0x14, 0x78, 0x54, 0xc1,
	0xe5, 0x5b, 0x5e, 0x8b, 0xaa, 0xe5, 0xe3, 0x37, 0x42, 0x84, 0xcc, 0x0b, 0xcc, 0xb6, 0xda, 0x28,
	0xaa, 0xa9, 0x5f, 0x87, 0x4a, 0xc7, 0xb5, 0x1c, 0xda, 0x14, 0xc1, 0x45, 0x9c, 0x0e, 0x80, 0x77,
	0x6d, 0xf0, 0x48, 0x32, 0x0f, 0xd3, 0x72, 0x67, 0x8a, 0x63, 0x82, 0x6c, 0x91, 0x7f, 0xe7, 0xe0,
	0xba, 0xcc, 0xc5, 0xfd, 0x43, 0x51, 0x2f, 0x29, 0x0b, 0x37, 0x8e, 0x3b, 0xcd, 0xff, 0x73, 0x46,
	0xea, 0xf9, 0x55, 0x3e, 0xe2, 0x57, 0xd1, 0x70, 0x52, 0x88, 0x85, 0x93, 0x88, 0xab, 0x4f, 0xc5,
	0x5d, 0x3d, 0x19, 0x93, 0xa7, 0x4f, 0x17, 0x93, 0xe3, 0xfe, 0x57, 0x4c, 0xf8, 0xdf, 0x2b, 0xe2,
	0x47, 0xc7, 0x3e, 0xb4, 0x85, 0xea, 0x46, 0xe6, 0x88, 0xb6, 0x19, 0xbe, 0x81, 0xd2, 0x51, 0x8f,
	0x29, 0xc7, 0x3d, 0x66, 0x01, 0x80, 0xba, 0x68, 0x35, 0x24, 0xcb, 0x73, 0x47, 0xd5, 0x28, 0xcb,
	0x9e, 0xdd, 0x2e, 0xf9, 0x38, 0x0f, 0x0b, 0x83, 0xf5, 0x8e, 0xfe, 0x3a, 0x07, 0x53, 0xfd, 0x4c,
	0x51, 0x30, 0x44, 0x63, 0x88, 0x8b, 0x7e, 0x1d, 0x66, 0x03, 0xdf, 0x6a, 0xb2, 0xfe, 0x74, 0x43,
	0x83, 0xfd, 0x4c, 0xe0, 0x47, 0xa1, 0x91, 0x2f, 0x8f, 0xde, 0x16, 0xb5, 0x7d, 0x26, 0xed, 0x51,
	0x66, 0x5d, 0x43, 0x74, 0x4c, 0x26, 0xf4, 0x5f, 0x86, 0x12, 0xeb, 0x36, 0xf7, 0x4e, 0x18, 0x0d,
	0x95, 0x43, 0xb3, 0xee, 0x3a, 0x36, 0xf5, 0x3b, 0x30, 0xbd, 0x6f, 0x53, 0xa7, 0x15, 0x4a, 0x83,
	0x64, 0x4f, 0x27, 0x65, 0xe2, 0x39, 0xa4, 0x9c, 0xcc, 0x21, 0x0f, 0xa0, 0xe2, 0x53, 0xb7, 0x65,
	0xbb, 0xed, 0x26, 0xeb, 0x8e, 0xc8, 0xe3, 0x52, 0x70, 0xb7, 0x1b, 0x92, 0xb7, 0xe0, 0xd2, 0x0e,
	0xb2, 0xed, 0x2b, 0x49, 0xd2, 0x3e, 0x0f, 0xf9, 0xc0, 0x3c, 0x96, 0x1b, 0x01, 0x3f, 0xf5, 0x25,
	0xc8, 0xb1, 0xee, 0xd0, 0xc4, 0x9c, 0x63, 0x5d, 0xf2, 0x58, 0x9d, 0x17, 0x5f, 0xa3, 0x7b, 0x9d,
	0x76, 0x64, 0x83, 0x8d, 0x0e, 0x4d, 0xe4, 0x55, 0xb8, 0x98, 0x1c, 0x8b, 0x4e, 0xa2, 0x43, 0x81,
	0x07, 0x15, 0x91, 0xf7, 0xf8, 0x37, 0xa7, 0xe7, 0xf8, 0x32, 0xeb, 0xe1, 0x27, 0x79, 0xa7, 0x77,
	0x20, 0x49, 0x22, 0xd7, 0xf1, 0x90, 0xe6, 0xf9, 0x34, 0x60, 0xea, 0xcc, 0xdb, 0x6b, 0x9f, 0x62,
	0x5f, 0x93, 0xa7, 0x30, 0x97, 0x9a, 0x18, 0x69, 0x9d, 0x71, 0x5a, 0x0f, 0x2e, 0x88, 0xc5, 0xbe,
	0x49, 0x59, 0x34, 0x7e, 0xdb, 0xb8, 0x49, 0x43, 0x46, 0x5d, 0xdb, 0x6d, 0xf3, 0x79, 0x4b, 0x46,
	0xc5, 0x0e, 0xdf, 0x50, 0x5d, 0xc9, 0xe2, 0xb2, 0xdc, 0x2f, 0x2e, 0x17, 0x00, 0x7c, 0x4a, 0x03,
	0x19, 0x1e, 0xf3, 0xbc, 0x16, 0x2a, 0x63, 0x0f, 0x8f, 0x8e, 0xab, 0xff, 0xca, 0x29, 0xc4, 0x48,
	0x35, 0xab, 0xbf, 0x0b, 0xa5, 0x4d, 0x15, 0x23, 0xe6, 0x53, 0x56, 0x7d, 0x82, 0x65, 0x76, 0x7d,
	0x29, 0xab, 0xac, 0x49, 0x96, 0xc4, 0x64, 0xf1, 0x83, 0x7f, 0x7e, 0xfe, 0x8b, 0x5c, 0x9d, 0x5c,
	0xc2, 0x42, 0x3c, 0x5c, 0x39, 0x7a, 0x79, 0x85, 0xb2, 0x83, 0x15, 0x15, 0x80, 0x1e, 0x6b, 0xb7,
	0xf5, 0x2e, 0xcc, 0x6e, 0xe3, 0x44, 0x96, 0xe7, 0xbc, 0x2d, 0x39, 0x9f, 0x0d, 0xf2, 0x05, 0x0e,
	0x79, 0x83, 0x5c, 0x8d, 0x41, 0xfa, 0x71, 0x0c, 0x44, 0x3e, 0x80, 0xe2, 0xce, 0x89, 0x6b, 0xa1,
	0xfe, 0xce, 0x86, 0x78, 0x9d, 0x23, 0x5e, 0x26, 0x73, 0x31, 0xc4, 0x50, 0xcc, 0xfd, 0x58, 0xbb,
	0xbd, 0xfa, 0x8f, 0x1c, 0xcc, 0x26, 0xea, 0x3e, 0xdd, 0x86, 0xe2, 0x86, 0xac, 0xdc, 0x06, 0xa1,
	0x93, 0xd1, 0x95, 0x23, 0x21, 0x1c, 0xfb, 0x2a, 0x79, 0xae, 0x87, 0xcd, 0xba, 0xbe, 0xe7, 0x39,
	0x2b, 0xb2, 0x2c, 0xc4, 0x85, 0xda, 0x50, 0xdc, 0x12, 0x45, 0xdf, 0x64, 0xa0, 0x64, 0x45, 0x89,
	0x50, 0x6d, 0x98, 0x16, 0x45, 0xe5, 0x99, 0x90, 0x6e, 0x70, 0xa4, 0x2b, 0x64, 0x3e, 0x89, 0x24,
	0x4e, 0xb2, 0xa8, 0xd2, 0xef, 0xc1, 0xf9, 0x64, 0x09, 0xaa, 0xdb, 0x50, 0x92, 0xad, 0xc1, 0xf0,
	0x37, 0xb3, 0xe0, 0x13, 0xd5, 0xca, 0x00, 0xaf, 0x55, 0x87, 0x5f, 0x84, 0xff, 0xec, 0x1c, 0x5c,
	0x48, 0x95, 0x3a, 0xfa, 0x0f, 0x35, 0x38, 0xf7, 0x1a, 0x0d, 0xec, 0x23, 0xd5, 0xa9, 0xdf, 0x4a,
	0xc0, 0x0d, 0xa8, 0x74, 0x53, 0x8e, 0x96, 0x59, 0x45, 0x91, 0xe7, 0x39, 0xaf, 0xeb, 0xa4, 0x1e,
	0xe3, 0xd5, 0x8a, 0x22, 0xa2, 0x11, 0xde, 0x83, 0xf2, 0x13, 0xcb, 0xa0, 0x96, 0x77, 0x44, 0x83,
	0x31, 0x33, 0x48, 0x5b, 0x06, 0x19, 0x50, 0x85, 0x86, 0xe8, 0x1f, 0x68, 0x50, 0xdd, 0x3a, 0xf4,
	0xbd, 0x80, 0x19, 0xe6, 0x31, 0x96, 0xb5, 0xe3, 0x65, 0xb0, 0xc4, 0x19, 0x5c, 0x23, 0x97, 0x63,
	0x0c, 0xec, 0x08, 0x20, 0x92, 0x08, 0xa0, 0x8a, 0xd1, 0x71, 0xa4, 0x3b, 0x9c, 0x05, 0xd3, 0x89,
	0x00, 0x20, 0xa6, 0x0f, 0x15, 0xc4, 0x54, 0x85, 0xe4, 0xd9, 0x20, 0x6f, 0x72, 0xc8, 0x05, 0x52,
	0x4b, 0x41, 0xca, 0xf9, 0x11, 0xf1, 0x7d, 0x0d, 0x2a, 0x6f, 0x78, 0xd6, 0xb3, 0xc9, 0x78, 0xdb,
	0x00, 0x0a, 0x7d, 0x3c, 0xa4, 0xf0, 0x7d, 0x80, 0x37, 0xe9, 0xf1, 0x64, 0x08, 0xa4, 0x03, 0x0e,
	0x12, 0x70, 0x7b, 0x70, 0x12, 0xff, 0x2d, 0x9f, 0xba, 0xb2, 0x18, 0xfe, 0x22, 0xf0, 0xbd, 0x1e,
	0x1c, 0xe2, 0xff, 0x44, 0x83, 0xd9, 0x1d, 0x3c, 0x6e, 0x47, 0x4e, 0x94, 0xe3, 0x65, 0x91, 0x9d,
	0xcf, 0xc2, 0x38, 0xa6, 0xf0, 0xf9, 0x02, 0x1e, 0xdb, 0xc6, 0x0c, 0x7f, 0x95, 0xc3, 0xcf, 0x93,
	0x0b, 0x71, 0x78, 0xbb, 0xcd, 0x31, 0x7f, 0xa9, 0xc1, 0x3c, 0x82, 0xae, 0xb9, 0xad, 0xc9, 0x6a,
	0xa1, 0xc1, 0x69, 0x2c, 0x93, 0x9b, 0x29, 0x1a, 0x69, 0xe8, 0x9e, 0x5d, 0xe2, 0x87, 0xd8, 0x2f,
	0xc6, 0x2e, 0x71, 0x4c, 0xa4, 0x82, 0x59, 0xe1, 0xa9, 0xeb, 0x4c, 0x6c, 0x9f, 0x66, 0x67, 0x85,
	0x8e, 0x1b, 0xdf, 0xa9, 0xab, 0x7f, 0x3d, 0xa7, 0x4e, 0xd2, 0xb1, 0x3b, 0x02, 0x3d, 0x80, 0xca,
	0x7a, 0xa4, 0x62, 0x1d, 0x14, 0xb6, 0x6e, 0x65, 0x25, 0xce, 0xf4, 0x6d, 0xc3, 0x80, 0xa8, 0x11,
	0x39, 0xe4, 0xa2, 0x4a, 0x8e, 0xa0, 0xb0, 0x61, 0x3a, 0x8e, 0xbe, 0x7c, 0x8a, 0x49, 0x85, 0x2a,
	0x4e, 0x0b, 0x9f, 0xed, 0xae, 0x96, 0xe9, 0x38, 0xd2, 0x14, 0x95, 0x27, 0x91, 0xab, 0x8b, 0xf1,
	0xe3, 0x67, 0x2f, 0x3f, 0x72, 0x5d, 0x22, 0x53, 0x24, 0x6c, 0x52, 0xb6, 0x2e, 0xaf, 0x49, 0xc6,
	0xcf, 0x22, 0x3b, 0x72, 0xb5, 0x7b, 0x90, 0x48, 0xe2, 0x43, 0x0d, 0x66, 0x90, 0x04, 0x8e, 0x5e,
	0x3f, 0xe1, 0x25, 0xed, 0xf8, 0x89, 0xdc, 0xe2, 0x44, 0x16, 0xc9, 0x95, 0x14, 0x91, 0x3e, 0x2c,
	0x92, 0xf9, 0xb9, 0x06, 0xe7, 0xfb, 0x64, 0xa4, 0x2b, 0x8e, 0x9f, 0xce, 0x32, 0xa7, 0x43, 0xc8,
	0xc2, 0x00, 0x3a, 0x7d, 0x0f, 0x7d, 0x0f, 0x8a, 0x9b, 0x94, 0x6d, 0x78, 0xad, 0x49, 0x98, 0x27,
	0xbb, 0x60, 0x68, 0x0b, 0x3c, 0x44, 0xff, 0x91, 0x06, 0xd5, 0x4d, 0xca, 0x76, 0xc4, 0x25, 0xd7,
	0x1a, 0x9b, 0x00, 0x87, 0xec, 0x33, 0x4d, 0x3b, 0x02, 0x8a, 0x44, 0x7e, 0xad, 0xc1, 0x95, 0x4d,
	0xca, 0x9e, 0xba, 0x96, 0x43, 0xd7, 0x4f, 0xd6, 0xd5, 0xd5, 0xd7, 0x9a, 0xdb, 0x12, 0xaf, 0x68,
	0xe3, 0xe7, 0x75, 0x9f, 0xf3, 0xba, 0x4b, 0x96, 0x93, 0xbc, 0x06, 0x71, 0x40, 0x9a, 0xbf, 0xd1,
	0x60, 0x21, 0x41, 0x53, 0x98, 0x72, 0x82, 0x44, 0x1f, 0x70, 0xa2, 0x2b, 0xe4, 0xf6, 0x30, 0xa2,
	0x71, 0x16, 0x48, 0xf5, 0x23, 0x0d, 0x6a, 0x8a, 0x2a, 0xaf, 0xc1, 0x23, 0x4b, 0x9a, 0x00, 0xcb,
	0x7b, 0x9c, 0xe5, 0x6d, 0xf2, 0x7c, 0x26, 0xcb, 0x24, 0x01, 0x24, 0xf8, 0x89, 0x06, 0xf5, 0x2c,
	0x82, 0x13, 0xdb, 0x94, 0xab, 0x9c, 0xe2, 0x1d, 0xf2, 0xc2, 0x48, 0x8a, 0xbd, 0xed, 0xb9, 0xfa,
	0xd3, 0x4b, 0xea, 0xc2, 0x3b, 0x7d, 0x8b, 0xa8, 0xff, 0x4e, 0x83, 0x6b, 0x2a, 0x98, 0x44, 0x7e,
	0x96, 0x33, 0x71, 0x45, 0xdf, 0xcd, 0xac, 0x42, 0x07, 0x5d, 0x04, 0xd7, 0x5f, 0x3a, 0xad, 0x38,
	0xae, 0xe7, 0x21, 0x5f, 0xcf, 0x3d, 0xf2, 0x52, 0x66, 0x90, 0xc9, 0x26, 0x84, 0x8a, 0xff, 0xbd,
	0x06, 0x8b, 0x83, 0x69, 0x4b, 0xf5, 0x4f, 0x92, 0xf8, 0x23, 0x4e, 0x7c, 0x95, 0xdc, 0x3d, 0x25,
	0xf1, 0x7e, 0xb4, 0xfc, 0x93, 0x06, 0x4b, 0x9b, 0x14, 0xeb, 0xaf, 0x88, 0x54, 0x56, 0xbc, 0x98,
	0x24, 0xfd, 0xaf, 0x71, 0xfa, 0x0f, 0xc9, 0xcb, 0x49, 0xfa, 0x23, 0x69, 0xe1, 0x12, 0xfe, 0xac,
	0xc1, 0xad, 0x41, 0x4b, 0x48, 0xc4, 0x92, 0x49, 0x2e, 0xe2, 0x1b, 0x7c, 0x11, 0x8f, 0xc8, 0xfd,
	0x53, 0x2d, 0x22, 0x1d, 0x5e, 0x3e, 0xd5, 0xe0, 0xb9, 0x8c, 0x65, 0x4c, 0xdc, 0xe9, 0x57, 0x38,
	0xef, 0x17, 0xc9, 0xd2, 0x28, 0xde, 0xca, 0xdb, 0xff, 0xa0, 0xc1, 0x8d, 0x4d, 0xca, 0xbe, 0x44,
	0x7f, 0x79, 0x85, 0x53, 0xbe, 0x4f, 0x1a, 0x49, 0xca, 0xa3, 0x9d, 0xe5, 0x8f, 0x1a, 0xdc, 0xcc,
	0x24, 0xff, 0x05, 0x7a, 0xca, 0xab, 0x9c, 0xfe, 0x03, 0x72, 0x6f, 0x34, 0xfd, 0xb4, 0x9b, 0x7c,
	0xac, 0xc1, 0x5c, 0x72, 0x01, 0x13, 0xf7, 0x91, 0x3b, 0x9c, 0xf1, 0x2d, 0x72, 0x63, 0x28, 0x63,
	0xe5, 0x20, 0x1f, 0x69, 0x70, 0x31, 0x4e, 0x51, 0x3c, 0xe8, 0x4d, 0x92, 0xe1, 0x4b, 0x9c, 0xe1,
	0xf3, 0x64, 0x71, 0x08, 0xc3, 0x0d, 0x75, 0xf5, 0xf0, 0x89, 0x06, 0x97, 0xe2, 0x04, 0xd5, 0x9b,
	0xd1, 0x24, 0x29, 0xde, 0xe5, 0x14, 0x5f, 0x20, 0x64, 0x08, 0x45, 0xc9, 0x03, 0x49, 0xfe, 0x58,
	0x83, 0x8b, 0xdb, 0xf2, 0x69, 0xa7, 0x2f, 0x30, 0xf8, 0x76, 0x6a, 0x0c, 0xea, 0xf2, 0xd3, 0x70,
	0xb2, 0xf6, 0x9a, 0x36, 0x68, 0x48, 0xdd, 0xd6, 0x44, 0xf5, 0x73, 0x8d, 0x73, 0xaa, 0x91, 0x8b,
	0x31, 0x4e, 0x01, 0x07, 0x46, 0x1a, 0xbf, 0xd2, 0x40, 0xdf, 0xa1, 0x6e, 0x2b, 0x1e, 0x97, 0x26,
	0x4a, 0xe9, 0x36, 0xa7, 0xb4, 0x44, 0xae, 0xa7, 0x6e, 0x70, 0xe2, 0x24, 0xe4, 0x85, 0x4a, 0xea,
	0x3e, 0x69, 0x92, 0xdc, 0x4e, 0x7d, 0xbb, 0xf4, 0xbe, 0x26, 0xaf, 0x97, 0x26, 0xc9, 0x66, 0xe4,
	0x65, 0x53, 0xea, 0x4e, 0xe7, 0x4b, 0xd0, 0x4d, 0xea, 0x86, 0x67, 0xf5, 0x83, 0x3c, 0xcc, 0xc4,
	0x1f, 0x29, 0xf5, 0xf7, 0xa0, 0xa2, 0xce, 0x72, 0x86, 0xe3, 0xeb, 0x99, 0xcf, 0x0e, 0x89, 0x37,
	0xc9, 0xfa, 0x8d, 0xe1, 0x42, 0xd9, 0x77, 0x3d, 0x2d, 0xfc, 0xbd, 0x77, 0x48, 0x33, 0x1c, 0x1f,
	0x35, 0xf5, 0x5d, 0x80, 0xed, 0xc0, 0x76, 0x45, 0xdf, 0xd8, 0xc0, 0xd3, 0x25, 0xa3, 0x00, 0xf7,
	0x7b, 0x50, 0xe2, 0x6e, 0xa7, 0xb4, 0x43, 0x69, 0x8b, 0x67, 0x93, 0x71, 0x21, 0xa7, 0xef, 0x33,
	0x04, 0x72, 0x28, 0x81, 0xd0, 0x08, 0x1f, 0xe6, 0x61, 0x36, 0xf1, 0x26, 0xab, 0x1f, 0xc1, 0x0c,
	0xaf, 0x35, 0x5a, 0x7b, 0x1b, 0xde, 0xa1, 0x6f, 0xfe, 0x0f, 0x0f, 0x60, 0x19, 0x8f, 0xbb, 0x19,
	0xb7, 0x07, 0x82, 0x85, 0x15, 0x83, 0x90, 0xf5, 0xfb, 0xac, 0x04, 0xde, 0x56, 0xcf, 0xbf, 0x4b,
	0x23, 0x10, 0x84, 0x32, 0x4e, 0xc3, 0xe3, 0x45, 0xce, 0xe3, 0x26, 0xb9, 0x96, 0xcd, 0x43, 0x21,
	0x0a, 0x63, 0x14, 0x77, 0x28, 0x7b, 0x9d, 0x9a, 0xad, 0x31, 0xe2, 0xa7, 0x1f, 0x81, 0x94, 0x35,
	0x38, 0x12, 0x1a, 0xe3, 0x6f, 0x39, 0xa8, 0x46, 0x5f, 0xb2, 0xf5, 0x77, 0xa1, 0xdc, 0x7f, 0xae,
	0x1e, 0x64, 0x84, 0xeb, 0x59, 0x9e, 0x10, 0x79, 0x0a, 0xcf, 0xf0, 0x40, 0x9f, 0xcb, 0xac, 0xf4,
	0x5e, 0xc7, 0x71, 0xd1, 0xef, 0x42, 0x79, 0x5b, 0xbd, 0x70, 0x4f, 0x00, 0xab, 0xf7, 0x7a, 0x8e,
	0x58, 0xfb, 0x50, 0x1c, 0xf5, 0x6c, 0x3d, 0x12, 0x29, 0xed, 0xdd, 0x12, 0xe9, 0xa8, 0xf7, 0x58,
	0xbd, 0xbe, 0x0a, 0xc4, 0x0b, 0xda, 0x8d, 0x3d, 0x9b, 0xed, 0x75, 0xac, 0x67, 0x94, 0x35, 0x2c,
	0x5f, 0x4c, 0x17, 0xf9, 0xff, 0xf8, 0xf0, 0xdb, 0xf2, 0x1f, 0xe4, 0x45, 0xe7, 0xde, 0x34, 0x6f,
	0xdd, 0xff, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x74, 0x86, 0x02, 0x9d, 0x44, 0x2f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicEthereumAPIClient is the client API for PublicEthereumAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicEthereumAPIClient interface {
	GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
}

type publicEthereumAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicEthereumAPIClient(cc *grpc.ClientConn) PublicEthereumAPIClient {
	return &publicEthereumAPIClient{cc}
}

func (c *publicEthereumAPIClient) GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicEthereumAPI/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicEthereumAPI/ProtocolVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicEthereumAPI/Syncing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicEthereumAPIServer is the server API for PublicEthereumAPI service.
type PublicEthereumAPIServer interface {
	GasPrice(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	ProtocolVersion(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	Syncing(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
}

func RegisterPublicEthereumAPIServer(s *grpc.Server, srv PublicEthereumAPIServer) {
	s.RegisterService(&_PublicEthereumAPI_serviceDesc, srv)
}

func _PublicEthereumAPI_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicEthereumAPI/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).GasPrice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_ProtocolVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).ProtocolVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicEthereumAPI/ProtocolVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).ProtocolVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_Syncing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Syncing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicEthereumAPI/Syncing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Syncing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicEthereumAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicEthereumAPI",
	HandlerType: (*PublicEthereumAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GasPrice",
			Handler:    _PublicEthereumAPI_GasPrice_Handler,
		},
		{
			MethodName: "ProtocolVersion",
			Handler:    _PublicEthereumAPI_ProtocolVersion_Handler,
		},
		{
			MethodName: "Syncing",
			Handler:    _PublicEthereumAPI_Syncing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicTxPoolAPIClient is the client API for PublicTxPoolAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicTxPoolAPIClient interface {
	Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
	Inspect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
}

type publicTxPoolAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicTxPoolAPIClient(cc *grpc.ClientConn) PublicTxPoolAPIClient {
	return &publicTxPoolAPIClient{cc}
}

func (c *publicTxPoolAPIClient) Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTxPoolAPI/Content", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTxPoolAPIClient) Inspect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTxPoolAPI/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTxPoolAPIClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTxPoolAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicTxPoolAPIServer is the server API for PublicTxPoolAPI service.
type PublicTxPoolAPIServer interface {
	Content(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
	Inspect(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
	Status(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
}

func RegisterPublicTxPoolAPIServer(s *grpc.Server, srv PublicTxPoolAPIServer) {
	s.RegisterService(&_PublicTxPoolAPI_serviceDesc, srv)
}

func _PublicTxPoolAPI_Content_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Content(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTxPoolAPI/Content",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Content(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTxPoolAPI_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTxPoolAPI/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Inspect(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTxPoolAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTxPoolAPI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicTxPoolAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicTxPoolAPI",
	HandlerType: (*PublicTxPoolAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Content",
			Handler:    _PublicTxPoolAPI_Content_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _PublicTxPoolAPI_Inspect_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PublicTxPoolAPI_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicAccountAPIClient is the client API for PublicAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicAccountAPIClient interface {
	Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicAccountAPIReply, error)
}

type publicAccountAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicAccountAPIClient(cc *grpc.ClientConn) PublicAccountAPIClient {
	return &publicAccountAPIClient{cc}
}

func (c *publicAccountAPIClient) Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicAccountAPIReply, error) {
	out := new(PublicAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicAccountAPI/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAccountAPIServer is the server API for PublicAccountAPI service.
type PublicAccountAPIServer interface {
	Accounts(context.Context, *empty.Empty) (*PublicAccountAPIReply, error)
}

func RegisterPublicAccountAPIServer(s *grpc.Server, srv PublicAccountAPIServer) {
	s.RegisterService(&_PublicAccountAPI_serviceDesc, srv)
}

func _PublicAccountAPI_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAccountAPIServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicAccountAPI/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAccountAPIServer).Accounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicAccountAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicAccountAPI",
	HandlerType: (*PublicAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _PublicAccountAPI_Accounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PrivateAccountAPIClient is the client API for PrivateAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateAccountAPIClient interface {
	DeriveAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	EcRecover(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ImportRawKey(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	LockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	NewAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	OpenWallet(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	Sign(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SignAndSendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SignTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	UnlockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
}

type privateAccountAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateAccountAPIClient(cc *grpc.ClientConn) PrivateAccountAPIClient {
	return &privateAccountAPIClient{cc}
}

func (c *privateAccountAPIClient) DeriveAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/DeriveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) EcRecover(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/EcRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ImportRawKey(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/ImportRawKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) LockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) NewAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) OpenWallet(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/OpenWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) Sign(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SignAndSendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/SignAndSendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SignTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) UnlockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateAccountAPI/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateAccountAPIServer is the server API for PrivateAccountAPI service.
type PrivateAccountAPIServer interface {
	DeriveAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	EcRecover(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	ImportRawKey(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	ListAccounts(context.Context, *empty.Empty) (*PrivateAccountAPIReply, error)
	ListWallets(context.Context, *empty.Empty) (*PrivateAccountAPIReply, error)
	LockAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	NewAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	OpenWallet(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SendTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	Sign(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SignAndSendTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SignTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	UnlockAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
}

func RegisterPrivateAccountAPIServer(s *grpc.Server, srv PrivateAccountAPIServer) {
	s.RegisterService(&_PrivateAccountAPI_serviceDesc, srv)
}

func _PrivateAccountAPI_DeriveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).DeriveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/DeriveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).DeriveAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_EcRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).EcRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/EcRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).EcRecover(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ImportRawKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ImportRawKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/ImportRawKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ImportRawKey(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ListAccounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ListWallets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).LockAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).NewAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).OpenWallet(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SendTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).Sign(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SignAndSendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SignAndSendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/SignAndSendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SignAndSendTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SignTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateAccountAPI/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).UnlockAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateAccountAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PrivateAccountAPI",
	HandlerType: (*PrivateAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveAccount",
			Handler:    _PrivateAccountAPI_DeriveAccount_Handler,
		},
		{
			MethodName: "EcRecover",
			Handler:    _PrivateAccountAPI_EcRecover_Handler,
		},
		{
			MethodName: "ImportRawKey",
			Handler:    _PrivateAccountAPI_ImportRawKey_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _PrivateAccountAPI_ListAccounts_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _PrivateAccountAPI_ListWallets_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _PrivateAccountAPI_LockAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _PrivateAccountAPI_NewAccount_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _PrivateAccountAPI_OpenWallet_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _PrivateAccountAPI_SendTransaction_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _PrivateAccountAPI_Sign_Handler,
		},
		{
			MethodName: "SignAndSendTransaction",
			Handler:    _PrivateAccountAPI_SignAndSendTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _PrivateAccountAPI_SignTransaction_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _PrivateAccountAPI_UnlockAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicBlockChainAPIClient is the client API for PublicBlockChainAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicBlockChainAPIClient interface {
	BlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	Call(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	EstimateGas(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBalance(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBlockByHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBlockByNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetCode(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetStorageAt(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockHashAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockNumberAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
}

type publicBlockChainAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicBlockChainAPIClient(cc *grpc.ClientConn) PublicBlockChainAPIClient {
	return &publicBlockChainAPIClient{cc}
}

func (c *publicBlockChainAPIClient) BlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/BlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) Call(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) EstimateGas(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBalance(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBlockByHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBlockByNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetCode(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetStorageAt(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleByBlockHashAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetUncleByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleByBlockNumberAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetUncleByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleCountByBlockHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetUncleCountByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleCountByBlockNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicBlockChainAPI/GetUncleCountByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicBlockChainAPIServer is the server API for PublicBlockChainAPI service.
type PublicBlockChainAPIServer interface {
	BlockNumber(context.Context, *empty.Empty) (*PublicBlockChainAPIReply, error)
	Call(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	EstimateGas(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBalance(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBlockByHash(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBlockByNumber(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetCode(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetStorageAt(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockHashAndIndex(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockNumberAndIndex(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockHash(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockNumber(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
}

func RegisterPublicBlockChainAPIServer(s *grpc.Server, srv PublicBlockChainAPIServer) {
	s.RegisterService(&_PublicBlockChainAPI_serviceDesc, srv)
}

func _PublicBlockChainAPI_BlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).BlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/BlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).BlockNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).Call(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).EstimateGas(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBalance(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBlockByHash(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBlockByNumber(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetCode(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetStorageAt(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetUncleByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockHashAndIndex(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetUncleByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockNumberAndIndex(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleCountByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetUncleCountByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockHash(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleCountByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicBlockChainAPI/GetUncleCountByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockNumber(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicBlockChainAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicBlockChainAPI",
	HandlerType: (*PublicBlockChainAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockNumber",
			Handler:    _PublicBlockChainAPI_BlockNumber_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _PublicBlockChainAPI_Call_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _PublicBlockChainAPI_EstimateGas_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PublicBlockChainAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _PublicBlockChainAPI_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _PublicBlockChainAPI_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _PublicBlockChainAPI_GetCode_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _PublicBlockChainAPI_GetStorageAt_Handler,
		},
		{
			MethodName: "GetUncleByBlockHashAndIndex",
			Handler:    _PublicBlockChainAPI_GetUncleByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetUncleByBlockNumberAndIndex",
			Handler:    _PublicBlockChainAPI_GetUncleByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetUncleCountByBlockHash",
			Handler:    _PublicBlockChainAPI_GetUncleCountByBlockHash_Handler,
		},
		{
			MethodName: "GetUncleCountByBlockNumber",
			Handler:    _PublicBlockChainAPI_GetUncleCountByBlockNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicTransactionPoolAPIClient is the client API for PublicTransactionPoolAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicTransactionPoolAPIClient interface {
	GetBlockTransactionCountByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetBlockTransactionCountByNumber(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionCount(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionReceipt(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	PendingTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	Resend(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SendRawTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SendTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	Sign(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SignTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
}

type publicTransactionPoolAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicTransactionPoolAPIClient(cc *grpc.ClientConn) PublicTransactionPoolAPIClient {
	return &publicTransactionPoolAPIClient{cc}
}

func (c *publicTransactionPoolAPIClient) GetBlockTransactionCountByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetBlockTransactionCountByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetBlockTransactionCountByNumber(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetBlockTransactionCountByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionCount(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionReceipt(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) PendingTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/PendingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) Resend(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/Resend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SendRawTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/SendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SendTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) Sign(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SignTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicTransactionPoolAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicTransactionPoolAPIServer is the server API for PublicTransactionPoolAPI service.
type PublicTransactionPoolAPIServer interface {
	GetBlockTransactionCountByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetBlockTransactionCountByNumber(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockHashAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockNumberAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockHashAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionCount(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionReceipt(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	PendingTransactions(context.Context, *empty.Empty) (*PublicTransactionPoolAPIReply, error)
	Resend(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SendRawTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SendTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	Sign(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SignTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
}

func RegisterPublicTransactionPoolAPIServer(s *grpc.Server, srv PublicTransactionPoolAPIServer) {
	s.RegisterService(&_PublicTransactionPoolAPI_serviceDesc, srv)
}

func _PublicTransactionPoolAPI_GetBlockTransactionCountByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetBlockTransactionCountByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetBlockTransactionCountByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetBlockTransactionCountByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByNumber(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockHashAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockNumberAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetRawTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockHashAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionCount(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionReceipt(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_PendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).PendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/PendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).PendingTransactions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_Resend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).Resend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/Resend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).Resend(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SendRawTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SendTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).Sign(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicTransactionPoolAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SignTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicTransactionPoolAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicTransactionPoolAPI",
	HandlerType: (*PublicTransactionPoolAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockTransactionCountByHash",
			Handler:    _PublicTransactionPoolAPI_GetBlockTransactionCountByHash_Handler,
		},
		{
			MethodName: "GetBlockTransactionCountByNumber",
			Handler:    _PublicTransactionPoolAPI_GetBlockTransactionCountByNumber_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockHashAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockNumberAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByHash",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockNumberAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionCount",
			Handler:    _PublicTransactionPoolAPI_GetTransactionCount_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _PublicTransactionPoolAPI_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "PendingTransactions",
			Handler:    _PublicTransactionPoolAPI_PendingTransactions_Handler,
		},
		{
			MethodName: "Resend",
			Handler:    _PublicTransactionPoolAPI_Resend_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _PublicTransactionPoolAPI_SendRawTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _PublicTransactionPoolAPI_SendTransaction_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _PublicTransactionPoolAPI_Sign_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _PublicTransactionPoolAPI_SignTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicDebugAPIClient is the client API for PublicDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicDebugAPIClient interface {
	GetBlockRlp(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error)
	PrintBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error)
	SeedHash(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error)
}

type publicDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicDebugAPIClient(cc *grpc.ClientConn) PublicDebugAPIClient {
	return &publicDebugAPIClient{cc}
}

func (c *publicDebugAPIClient) GetBlockRlp(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error) {
	out := new(PublicDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicDebugAPI/GetBlockRlp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDebugAPIClient) PrintBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error) {
	out := new(PublicDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicDebugAPI/PrintBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicDebugAPIClient) SeedHash(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*PublicDebugAPIReply, error) {
	out := new(PublicDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicDebugAPI/SeedHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicDebugAPIServer is the server API for PublicDebugAPI service.
type PublicDebugAPIServer interface {
	GetBlockRlp(context.Context, *PublicDebugAPIRequest) (*PublicDebugAPIReply, error)
	PrintBlock(context.Context, *PublicDebugAPIRequest) (*PublicDebugAPIReply, error)
	SeedHash(context.Context, *PublicDebugAPIRequest) (*PublicDebugAPIReply, error)
}

func RegisterPublicDebugAPIServer(s *grpc.Server, srv PublicDebugAPIServer) {
	s.RegisterService(&_PublicDebugAPI_serviceDesc, srv)
}

func _PublicDebugAPI_GetBlockRlp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDebugAPIServer).GetBlockRlp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicDebugAPI/GetBlockRlp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDebugAPIServer).GetBlockRlp(ctx, req.(*PublicDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDebugAPI_PrintBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDebugAPIServer).PrintBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicDebugAPI/PrintBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDebugAPIServer).PrintBlock(ctx, req.(*PublicDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicDebugAPI_SeedHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDebugAPIServer).SeedHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicDebugAPI/SeedHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDebugAPIServer).SeedHash(ctx, req.(*PublicDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicDebugAPI",
	HandlerType: (*PublicDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockRlp",
			Handler:    _PublicDebugAPI_GetBlockRlp_Handler,
		},
		{
			MethodName: "PrintBlock",
			Handler:    _PublicDebugAPI_PrintBlock_Handler,
		},
		{
			MethodName: "SeedHash",
			Handler:    _PublicDebugAPI_SeedHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PrivateDebugAPIClient is the client API for PrivateDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateDebugAPIClient interface {
	ChaindbCompact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error)
	ChaindbProperty(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error)
	SetHead(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error)
}

type privateDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateDebugAPIClient(cc *grpc.ClientConn) PrivateDebugAPIClient {
	return &privateDebugAPIClient{cc}
}

func (c *privateDebugAPIClient) ChaindbCompact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error) {
	out := new(PrivateDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateDebugAPI/ChaindbCompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) ChaindbProperty(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error) {
	out := new(PrivateDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateDebugAPI/ChaindbProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) SetHead(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error) {
	out := new(PrivateDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PrivateDebugAPI/SetHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateDebugAPIServer is the server API for PrivateDebugAPI service.
type PrivateDebugAPIServer interface {
	ChaindbCompact(context.Context, *empty.Empty) (*PrivateDebugAPIReply, error)
	ChaindbProperty(context.Context, *PrivateDebugAPIRequest) (*PrivateDebugAPIReply, error)
	SetHead(context.Context, *PrivateDebugAPIRequest) (*PrivateDebugAPIReply, error)
}

func RegisterPrivateDebugAPIServer(s *grpc.Server, srv PrivateDebugAPIServer) {
	s.RegisterService(&_PrivateDebugAPI_serviceDesc, srv)
}

func _PrivateDebugAPI_ChaindbCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).ChaindbCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateDebugAPI/ChaindbCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).ChaindbCompact(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_ChaindbProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).ChaindbProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateDebugAPI/ChaindbProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).ChaindbProperty(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_SetHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).SetHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PrivateDebugAPI/SetHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).SetHead(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PrivateDebugAPI",
	HandlerType: (*PrivateDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChaindbCompact",
			Handler:    _PrivateDebugAPI_ChaindbCompact_Handler,
		},
		{
			MethodName: "ChaindbProperty",
			Handler:    _PrivateDebugAPI_ChaindbProperty_Handler,
		},
		{
			MethodName: "SetHead",
			Handler:    _PrivateDebugAPI_SetHead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}

// PublicNetAPIClient is the client API for PublicNetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicNetAPIClient interface {
	Listening(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
	PeerCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
}

type publicNetAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicNetAPIClient(cc *grpc.ClientConn) PublicNetAPIClient {
	return &publicNetAPIClient{cc}
}

func (c *publicNetAPIClient) Listening(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicNetAPI/Listening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicNetAPIClient) PeerCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicNetAPI/PeerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicNetAPIClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/protos_chain.PublicNetAPI/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicNetAPIServer is the server API for PublicNetAPI service.
type PublicNetAPIServer interface {
	Listening(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
	PeerCount(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
	Version(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
}

func RegisterPublicNetAPIServer(s *grpc.Server, srv PublicNetAPIServer) {
	s.RegisterService(&_PublicNetAPI_serviceDesc, srv)
}

func _PublicNetAPI_Listening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).Listening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicNetAPI/Listening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).Listening(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicNetAPI_PeerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).PeerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicNetAPI/PeerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).PeerCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicNetAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos_chain.PublicNetAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicNetAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos_chain.PublicNetAPI",
	HandlerType: (*PublicNetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Listening",
			Handler:    _PublicNetAPI_Listening_Handler,
		},
		{
			MethodName: "PeerCount",
			Handler:    _PublicNetAPI_PeerCount_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PublicNetAPI_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain.proto",
}
