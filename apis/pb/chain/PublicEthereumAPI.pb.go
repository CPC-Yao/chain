// Code generated by protoc-gen-go. DO NOT EDIT.
// source: PublicEthereumAPI.proto

package api_chain_pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Address struct {
	Address              []byte   `protobuf:"bytes,1,opt,name=Address,proto3" json:"Address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbab2d2a76b34c56, []int{0}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type Rate struct {
	Rate                 int64    `protobuf:"varint,1,opt,name=Rate,proto3" json:"Rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rate) Reset()         { *m = Rate{} }
func (m *Rate) String() string { return proto.CompactTextString(m) }
func (*Rate) ProtoMessage()    {}
func (*Rate) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbab2d2a76b34c56, []int{1}
}

func (m *Rate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rate.Unmarshal(m, b)
}
func (m *Rate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rate.Marshal(b, m, deterministic)
}
func (m *Rate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rate.Merge(m, src)
}
func (m *Rate) XXX_Size() int {
	return xxx_messageInfo_Rate.Size(m)
}
func (m *Rate) XXX_DiscardUnknown() {
	xxx_messageInfo_Rate.DiscardUnknown(m)
}

var xxx_messageInfo_Rate proto.InternalMessageInfo

func (m *Rate) GetRate() int64 {
	if m != nil {
		return m.Rate
	}
	return 0
}

func init() {
	proto.RegisterType((*Address)(nil), "api_chain_pb.Address")
	proto.RegisterType((*Rate)(nil), "api_chain_pb.Rate")
}

func init() { proto.RegisterFile("PublicEthereumAPI.proto", fileDescriptor_dbab2d2a76b34c56) }

var fileDescriptor_dbab2d2a76b34c56 = []byte{
	// 286 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0f, 0x28, 0x4d, 0xca,
	0xc9, 0x4c, 0x76, 0x2d, 0xc9, 0x48, 0x2d, 0x4a, 0x2d, 0xcd, 0x75, 0x0c, 0xf0, 0xd4, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x49, 0x2c, 0xc8, 0x8c, 0x4f, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x2f,
	0x48, 0x92, 0x92, 0x4e, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0xcb, 0x25, 0x95, 0xa6, 0xe9,
	0xa7, 0xe6, 0x16, 0x94, 0x54, 0x42, 0x94, 0x4a, 0xc9, 0x40, 0x25, 0x13, 0x0b, 0x32, 0xf5, 0x13,
	0xf3, 0xf2, 0xf2, 0x4b, 0x12, 0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xb2, 0x4a, 0xca, 0x5c, 0xec,
	0x8e, 0x29, 0x29, 0x45, 0xa9, 0xc5, 0xc5, 0x42, 0x12, 0x70, 0xa6, 0x04, 0xa3, 0x02, 0xa3, 0x06,
	0x4f, 0x10, 0x8c, 0xab, 0x24, 0xc5, 0xc5, 0x12, 0x94, 0x58, 0x92, 0x2a, 0x24, 0x04, 0xa1, 0xc1,
	0xd2, 0xcc, 0x41, 0x60, 0xb6, 0xd1, 0x4e, 0x26, 0x2e, 0x09, 0x0c, 0x57, 0x06, 0xa7, 0x16, 0x95,
	0x65, 0x26, 0xa7, 0x0a, 0x25, 0x70, 0x71, 0x82, 0x45, 0x93, 0x12, 0x8b, 0x53, 0x85, 0xc4, 0xf4,
	0x20, 0x2e, 0xd1, 0x83, 0x39, 0x53, 0xcf, 0x15, 0xe4, 0x4c, 0x29, 0x51, 0x3d, 0x64, 0xcf, 0xe8,
	0xc1, 0x2c, 0x55, 0x69, 0xba, 0xfc, 0x64, 0x32, 0x93, 0x9c, 0x92, 0xa4, 0x7e, 0x99, 0x21, 0xc8,
	0xf1, 0xc5, 0xfa, 0x05, 0x60, 0x6b, 0xf4, 0x53, 0x61, 0x26, 0x5a, 0x31, 0x6a, 0x09, 0xc5, 0x71,
	0x71, 0x38, 0xe7, 0x67, 0xe6, 0x91, 0x63, 0x81, 0x32, 0xd8, 0x02, 0x59, 0x25, 0x09, 0x74, 0x0b,
	0x92, 0xa1, 0x06, 0x82, 0xcc, 0x8f, 0xe6, 0xe2, 0xf0, 0x48, 0x2c, 0xce, 0x28, 0x02, 0x79, 0x1f,
	0x97, 0xf9, 0x42, 0xa8, 0xe6, 0x83, 0x82, 0x05, 0xb7, 0xe1, 0x19, 0x50, 0xd3, 0xac, 0x18, 0xb5,
	0x9c, 0xf8, 0xa2, 0x40, 0xf1, 0xa8, 0x07, 0xd6, 0xa9, 0x57, 0x90, 0x94, 0xc4, 0x06, 0x36, 0xd8,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x20, 0x20, 0x01, 0xd0, 0xf7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicEthereumAPIServiceClient is the client API for PublicEthereumAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicEthereumAPIServiceClient interface {
	Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error)
	Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Rate, error)
}

type publicEthereumAPIServiceClient struct {
	cc *grpc.ClientConn
}

func NewPublicEthereumAPIServiceClient(cc *grpc.ClientConn) PublicEthereumAPIServiceClient {
	return &publicEthereumAPIServiceClient{cc}
}

func (c *publicEthereumAPIServiceClient) Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/api_chain_pb.PublicEthereumAPIService/Etherbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIServiceClient) Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, "/api_chain_pb.PublicEthereumAPIService/Coinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIServiceClient) Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Rate, error) {
	out := new(Rate)
	err := c.cc.Invoke(ctx, "/api_chain_pb.PublicEthereumAPIService/Hashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicEthereumAPIServiceServer is the server API for PublicEthereumAPIService service.
type PublicEthereumAPIServiceServer interface {
	Etherbase(context.Context, *empty.Empty) (*Address, error)
	Coinbase(context.Context, *empty.Empty) (*Address, error)
	Hashrate(context.Context, *empty.Empty) (*Rate, error)
}

func RegisterPublicEthereumAPIServiceServer(s *grpc.Server, srv PublicEthereumAPIServiceServer) {
	s.RegisterService(&_PublicEthereumAPIService_serviceDesc, srv)
}

func _PublicEthereumAPIService_Etherbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServiceServer).Etherbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_chain_pb.PublicEthereumAPIService/Etherbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServiceServer).Etherbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPIService_Coinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServiceServer).Coinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_chain_pb.PublicEthereumAPIService/Coinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServiceServer).Coinbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPIService_Hashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServiceServer).Hashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api_chain_pb.PublicEthereumAPIService/Hashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServiceServer).Hashrate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicEthereumAPIService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api_chain_pb.PublicEthereumAPIService",
	HandlerType: (*PublicEthereumAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Etherbase",
			Handler:    _PublicEthereumAPIService_Etherbase_Handler,
		},
		{
			MethodName: "Coinbase",
			Handler:    _PublicEthereumAPIService_Coinbase_Handler,
		},
		{
			MethodName: "Hashrate",
			Handler:    _PublicEthereumAPIService_Hashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "PublicEthereumAPI.proto",
}
