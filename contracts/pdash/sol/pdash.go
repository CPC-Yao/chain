// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package pdash

import (
	"math/big"
	"strings"

	cpchain "bitbucket.org/cpchain/chain"
	"bitbucket.org/cpchain/chain/accounts/abi"
	"bitbucket.org/cpchain/chain/accounts/abi/bind"
	"bitbucket.org/cpchain/chain/types"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/event"
)

// PdashABI is the input ABI used to generate the binding from.
const PdashABI = "[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyDeposits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"trentAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"decision\",\"type\":\"bool\"}],\"name\":\"proxyProcessDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"sellerClaimTimeOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyerConfirmDeliver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"proxyWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"sellerConfirm\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyerDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"deliverHash\",\"type\":\"bytes32\"},{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proxyDelivered\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockOrders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"disputeRecords\",\"outputs\":[{\"name\":\"orderId\",\"type\":\"uint256\"},{\"name\":\"badBuyer\",\"type\":\"bool\"},{\"name\":\"badSeller\",\"type\":\"bool\"},{\"name\":\"badProxy\",\"type\":\"bool\"},{\"name\":\"buyerAgree\",\"type\":\"bool\"},{\"name\":\"sellerAgree\",\"type\":\"bool\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"disputeState\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numDisputes\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"buyerRateProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"descHash\",\"type\":\"bytes32\"},{\"name\":\"buyerRSAPubkey\",\"type\":\"bytes\"},{\"name\":\"seller\",\"type\":\"address\"},{\"name\":\"proxy\",\"type\":\"address\"},{\"name\":\"secondaryProxy\",\"type\":\"address\"},{\"name\":\"proxyFee\",\"type\":\"uint256\"},{\"name\":\"timeAllowed\",\"type\":\"uint256\"}],\"name\":\"placeOrder\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"sellerRateProxy\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyCredits\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyerWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"proxyDeposit\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"if_agree\",\"type\":\"bool\"}],\"name\":\"sellerAgreeOrNot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockOrdersLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"orderRecords\",\"outputs\":[{\"name\":\"descHash\",\"type\":\"bytes32\"},{\"name\":\"buyerRSAPubkey\",\"type\":\"bytes\"},{\"name\":\"buyerAddress\",\"type\":\"address\"},{\"name\":\"sellerAddress\",\"type\":\"address\"},{\"name\":\"proxyAddress\",\"type\":\"address\"},{\"name\":\"secondaryProxyAddress\",\"type\":\"address\"},{\"name\":\"offeredPrice\",\"type\":\"uint256\"},{\"name\":\"proxyFee\",\"type\":\"uint256\"},{\"name\":\"deliverHash\",\"type\":\"bytes32\"},{\"name\":\"endTime\",\"type\":\"uint256\"},{\"name\":\"state\",\"type\":\"uint8\"},{\"name\":\"disputeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"buyerClaimTimeOut\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"badBuyer\",\"type\":\"bool\"},{\"name\":\"badSeller\",\"type\":\"bool\"},{\"name\":\"badProxy\",\"type\":\"bool\"}],\"name\":\"trentHandleDispute\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"proxyFetched\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"},{\"name\":\"if_agree\",\"type\":\"bool\"}],\"name\":\"buyerAgreeOrNot\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderInitiated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SellerConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProxyFetched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProxyDelivered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyerConfirmed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"BuyerDisputed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"SellerClaimTimeout\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"orderId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"OrderFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ProxyWithdrawn\",\"type\":\"event\"}]"

// PdashBin is the compiled bytecode used for deploying new contracts.
const PdashBin = `0x608060405260646000556000600255600060035534801561001f57600080fd5b5060018054600160a060020a0319163317905561269b806100416000396000f3006080604052600436106101535763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166304e1b52e81146101555780630761cda01461018857806312344135146101b957806316d86082146101d6578063370f3c59146101ee57806345302c1914610206578063459934ec1461021e57806345d5378814610229578063516cb0271461023e57806361d4df36146102565780637478d485146102715780637f0ca3671461028c57806390089ba014610307578063a40479f11461031c578063a4ab7beb14610337578063a50a6908146103b0578063a8dc7e63146103cb578063b03fd85a146103ec578063b3f03d0d14610404578063d7c166411461040c578063df6c559f14610429578063e0f29cec14610441578063e27e6a7f14610546578063f3ec4e351461055e578063fc9bcb7214610585578063fed7ef341461059d575b005b34801561016157600080fd5b50610176600160a060020a03600435166105ba565b60408051918252519081900360200190f35b34801561019457600080fd5b5061019d6105cc565b60408051600160a060020a039092168252519081900360200190f35b3480156101c557600080fd5b5061015360043560243515156105db565b3480156101e257600080fd5b5061015360043561070c565b3480156101fa57600080fd5b50610153600435610937565b34801561021257600080fd5b50610153600435610b46565b610153600435610c11565b34801561023557600080fd5b50610176610d0a565b34801561024a57600080fd5b50610153600435610d10565b34801561026257600080fd5b50610153600435602435610f21565b34801561027d57600080fd5b50610176600435602435611026565b34801561029857600080fd5b506102a4600435611056565b604080518981528815156020820152871515918101919091528515156060820152841515608082015283151560a082015260c0810183905260e081018260028111156102ec57fe5b60ff1681526020019850505050505050505060405180910390f35b34801561031357600080fd5b506101766110ab565b34801561032857600080fd5b506101536004356024356110b1565b60408051602060046024803582810135601f810185900485028601850190965285855261015395833595369560449491939091019190819084018382808284375094975050600160a060020a03853581169650602086013581169560408101359091169450606081013593506080013591506112e69050565b3480156103bc57600080fd5b50610153600435602435611526565b3480156103d757600080fd5b50610176600160a060020a0360043516611733565b3480156103f857600080fd5b50610153600435611745565b61015361192d565b34801561041857600080fd5b5061015360043560243515156119b1565b34801561043557600080fd5b50610176600435611b64565b34801561044d57600080fd5b50610459600435611b76565b604080518d8152600160a060020a03808d16928201929092528a82166060820152898216608082015290881660a082015260c0810187905260e081018690526101008101859052610120810184905260208101610140820184600a8111156104bd57fe5b60ff16815260200183815260200182810382528d818151815260200191508051906020019080838360005b838110156105005781810151838201526020016104e8565b50505050905090810190601f16801561052d5780820380516001836020036101000a031916815260200191505b509d505050505050505050505050505060405180910390f35b34801561055257600080fd5b50610153600435611c74565b34801561056a57600080fd5b50610153600435602435151560443515156064351515611d89565b34801561059157600080fd5b50610153600435611e67565b3480156105a957600080fd5b506101536004356024351515611f67565b60076020526000908152604090205481565b600154600160a060020a031681565b6000828152600460208190526040822001548390600160a060020a031633148061061e5750600081815260046020526040902060050154600160a060020a031633145b151561062957600080fd5b6000848152600460209081526040808320600b01548352600590915290206002015442811161065757600080fd5b846009806000838152600460205260409020600a9081015460ff169081111561067c57fe5b1461068657600080fd5b6000878152600460209081526040808320600b01548084526005909252909120600301805460ff19166001179055945085156106df576000858152600560205260409020600101805461ffff1916610100179055610703565b60008581526005602052604090206001908101805460ff191690911761ff00191690555b50505050505050565b60008181526004602052604081206003015481908390600160a060020a0316331461073657600080fd5b836003806000838152600460205260409020600a9081015460ff169081111561075b57fe5b1461076557600080fd5b60008681526004602052604090206009015442811061078357600080fd5b6000878152600460208190526040808320600a8101805460ff1916600517905560078101549201549051919850600160a060020a0316916108fc891502918991818181858888f193505050501580156107e0573d6000803e3d6000fd5b50600087815260046020526040808220600501549051600160a060020a039091169188156108fc02918991818181858888f19350505050158015610828573d6000803e3d6000fd5b5060008781526004602052604080822060038101546006909101549151600160a060020a039091169282156108fc02929190818181858888f19350505050158015610877573d6000803e3d6000fd5b506108aa61088c87600263ffffffff6120d016565b6000898152600460205260409020600601549063ffffffff6120ff16565b600088815260046020526040808220600301549051929750600160a060020a03169187156108fc0291889190818181858888f193505050501580156108f3573d6000803e3d6000fd5b506040805188815242602082015281517f34ce961a05a1558f29e54cc2618b644ec6d298fda6c1eda6395c910d04c63f21929181900390910190a150505050505050565b60008181526004602052604081206002015481908390600160a060020a0316331461096157600080fd5b60008481526004602052604090206009015442811161097f57600080fd5b846003806000838152600460205260409020600a9081015460ff16908111156109a457fe5b146109ae57600080fd5b6000878152600460208190526040808320600a8101805460ff19168417905560078101549201549051919850600160a060020a0316916108fc891502918991818181858888f19350505050158015610a0a573d6000803e3d6000fd5b50600087815260046020526040808220600501549051600160a060020a039091169188156108fc02918991818181858888f19350505050158015610a52573d6000803e3d6000fd5b50610a96610a6787600263ffffffff6120d016565b600089815260046020526040902060060154610a8a90600263ffffffff6120d016565b9063ffffffff6120ff16565b600088815260046020526040808220600301549051929750600160a060020a03169187156108fc0291889190818181858888f19350505050158015610adf573d6000803e3d6000fd5b506000878152600460205260409020600a0180546005919060ff191660018302179055506040805188815242602082015281517fd87dd92b1de3627ad322286c5c45566583bef03d0334ca6f0c9a9db7f7c0f16b929181900390910190a150505050505050565b600081118015610b655750336000908152600760205260409020548111155b1515610b7057600080fd5b33600090815260076020526040902054610b90908263ffffffff6120ff16565b33600081815260076020526040808220939093559151909183156108fc02918491818181858888f19350505050158015610bce573d6000803e3d6000fd5b506040805133815260208101839052428183015290517fc6311a7ead0ac41d26e6a97e6c05f885c84fa52336b5fc201c83451f05b08b7d9181900360600190a150565b6000818152600460205260409020600301548190600160a060020a03163314610c3957600080fd5b600082815260046020526040902060090154428111610c5757600080fd5b826000806000838152600460205260409020600a9081015460ff1690811115610c7c57fe5b14610c8657600080fd5b6000858152600460205260409020600601543414610ca357600080fd5b6000858152600460205260409020600a0180546001919060ff19168280021790555060408051868152346020820152428183015290517f76408f7d8666ddeb495564b182efc9e10ee49e1caa750fc79568b86ae940e42b9181900360600190a15050505050565b60025481565b6000818152600460205260409020600201548190600160a060020a03163314610d3857600080fd5b600082815260046020526040902060090154428111610d5657600080fd5b826003806000838152600460205260409020600a9081015460ff1690811115610d7b57fe5b14610d8557600080fd5b6000858152600460205260409020600a01805460ff19166009179055600354610daf906001612111565b60038190556000868152600460209081526040808320600b0193909355825161010081018452888152908101829052918201819052606082018190526080820181905260a082018190525460c0820190610e1090429063ffffffff61211116565b81526000602091820181905260038054825260058352604091829020845181559284015160018085018054948701516060880151608089015160a08a015115156401000000000264ff000000001991151563010000000263ff00000019931515620100000262ff0000199515156101000261ff001999151560ff199c8d1617999099169890981794909416969096179190911691909117169290921790915560c085015160028086019190915560e08601519285018054939490931691908490811115610ed957fe5b0217905550506040805187815242602082015281517fa6c88e175a49cd3945a40a26a490ae07ede7d4eb825c4f26a7ff37a464d05d3593509081900390910190a15050505050565b600081815260046020819052604090912001548190600160a060020a0316331480610f655750600081815260046020526040902060050154600160a060020a031633145b1515610f7057600080fd5b600082815260046020526040902060090154428111610f8e57600080fd5b826002806000838152600460205260409020600a9081015460ff1690811115610fb357fe5b14610fbd57600080fd5b600085815260046020908152604091829020600a8101805460ff191660031790556008018890558151878152429181019190915281517fee6a57b211b9b5284bd6650f9cca90a9ecbc0236e1610fe97c468faa0fc68287929181900390910190a1505050505050565b60086020528160005260406000208181548110151561104157fe5b90600052602060002001600091509150505481565b6005602052600090815260409020805460018201546002830154600390930154919260ff8083169361010084048216936201000081048316936301000000820484169364010000000090920482169290911688565b60035481565b6000828152600460205260409020600201548290600160a060020a031633146110d957600080fd5b60056000848152600460205260409020600a9081015460ff16908111156110fc57fe5b1480611128575060066000848152600460205260409020600a9081015460ff169081111561112657fe5b145b151561113357600080fd5b6000821180156111435750600a82105b151561114e57600080fd5b600083815260046020818152604080842090920154600160a060020a0316835260069052902054611185908363ffffffff61211116565b60008481526004602081815260408084209092018054600160a060020a0390811685526006909252828420949094559254909216815220546111c890600261211e565b600084815260046020818152604080842092830154600160a060020a039081168552600690925280842094909455600590910154168152205461120b9083612111565b60008481526004602090815260408083206005018054600160a060020a0390811685526006909352818420949094559254168152205461124c90600261211e565b6000848152600460208181526040808420600580820154600160a060020a0316865260068452918520959095559287905252600a91820154909160ff9091169081111561129557fe5b14156112c4576000838152600460205260409020600a0180546007919060ff19166001835b02179055506112e1565b6000838152600460205260409020600a01805460ff191660081790555b505050565b6112f782600263ffffffff6120d016565b341161130257600080fd5b60025461131690600163ffffffff61211116565b6002556040805161018081018252888152602081018890523391810191909152600160a060020a0386811660608301528581166080830152841660a08201523460c082015260e081018390526000610100820152610120810161137f428463ffffffff61211116565b81526020016000815260006020918201819052600254815260048252604090208251815582820151805191926113bd926001850192909101906125d4565b506040820151600282018054600160a060020a0392831673ffffffffffffffffffffffffffffffffffffffff19918216179091556060840151600384018054918416918316919091179055608084015160048401805491841691831691909117905560a084015160058401805491909316911617905560c0820151600682015560e0820151600782015561010082015160088201556101208201516009820155610140820151600a8083018054909160ff1990911690600190849081111561148157fe5b02179055506101609190910151600b90910155436000818152600860209081526040808320600254815460018181018455928652848620015593835260099091529020546114d49163ffffffff61211116565b506002546040805133815260208101929092523482820152426060830152517fca46e2845b8de28445b9ac838c4fe91c25ecde13a4d5661c14acf05fcc89d7d99181900360800190a150505050505050565b6000828152600460205260409020600301548290600160a060020a0316331461154e57600080fd5b60056000848152600460205260409020600a9081015460ff169081111561157157fe5b148061159d575060076000848152600460205260409020600a9081015460ff169081111561159b57fe5b145b15156115a857600080fd5b6000821180156115b85750600a82105b15156115c357600080fd5b600083815260046020818152604080842090920154600160a060020a03168352600690529020546115fa908363ffffffff61211116565b60008481526004602081815260408084209092018054600160a060020a03908116855260069092528284209490945592549092168152205461163d90600261211e565b600084815260046020818152604080842092830154600160a060020a03908116855260069092528084209490945560059091015416815220546116809083612111565b60008481526004602090815260408083206005018054600160a060020a039081168552600690935281842094909455925416815220546116c190600261211e565b6000848152600460208181526040808420600580820154600160a060020a0316865260068452918520959095559287905252600a91820154909160ff9091169081111561170a57fe5b14156112c4576000838152600460205260409020600a0180546006919060ff19166001836112ba565b60066020526000908152604090205481565b6000818152600460205260409020600201548190600160a060020a0316331461176d57600080fd5b60008281526004602052604090206009015442811161178b57600080fd5b6000838152600460205260408120600a9081015460ff16908111156117ac57fe5b141561181657600083815260046020526040808220600a808201805460ff1916909117905560028101546006909101549151600160a060020a03909116926108fc831502929190818181858888f19350505050158015611810573d6000803e3d6000fd5b506118ee565b60016000848152600460205260409020600a9081015460ff169081111561183957fe5b14156118ee57600083815260046020526040808220600a808201805460ff1916909117905560028101546006909101549151600160a060020a03909116926108fc831502929190818181858888f1935050505015801561189d573d6000803e3d6000fd5b5060008381526004602052604080822060038101546006909101549151600160a060020a039091169282156108fc02929190818181858888f193505050501580156118ec573d6000803e3d6000fd5b505b6040805184815242602082015281517f01e7164b56bfdcd76ac7df9a68a09f177aed22f0b3ef728d56f452745418ebb0929181900390910190a1505050565b6000341161193a57600080fd5b3360009081526007602052604090205461195a903463ffffffff61211116565b336000818152600760209081526040918290209390935580519182523492820192909252428183015290517fe485b77aa65aed2e79b44431303e4512f39e8d8d6bb557ba6273ff499f6c4cec9181900360600190a1565b6000828152600460205260408120600301548390600160a060020a031633146119d957600080fd5b836009806000838152600460205260409020600a9081015460ff16908111156119fe57fe5b14611a0857600080fd5b6000868152600460209081526040808320600b015483526005909152902060020154428111611a3657600080fd5b6000878152600460205260409020600b015460018060008381526005602052604090206003015460ff166002811115611a6b57fe5b14611a7557600080fd5b6000898152600460209081526040808320600b01548084526005909252909120600101805464ff0000000019166401000000008b151502179081905590975060ff6301000000909104168015611ae45750600087815260056020526040902060010154640100000000900460ff165b15611b5957600087815260056020526040902060010154611b1e908a90899060ff8082169161010081048216916201000090910416612133565b604080518a815242602082015281517f581a6384d4701bb245eaf6ebd9afd551a8c4f9d4e4ec70b1dfbab15569272bba929181900390910190a15b505050505050505050565b60096020526000908152604090205481565b6004602090815260009182526040918290208054600180830180548651600293821615610100026000190190911692909204601f810186900486028301860190965285825291949293909290830182828015611c135780601f10611be857610100808354040283529160200191611c13565b820191906000526020600020905b815481529060010190602001808311611bf657829003601f168201915b50505060028401546003850154600486015460058701546006880154600789015460088a015460098b0154600a8c0154600b909c01549a9b600160a060020a039889169b9789169a50958816985093909616959194909391929160ff16908c565b6000818152600460205260409020600201548190600160a060020a03163314611c9c57600080fd5b816000806000838152600460205260409020600a9081015460ff1690811115611cc157fe5b14611ccb57600080fd5b600084815260046020526040902060090154428110611ce957600080fd5b600085815260046020526040808220600a808201805460ff1916909117905560028101546006909101549151600160a060020a03909116926108fc831502929190818181858888f19350505050158015611d47573d6000803e3d6000fd5b506040805186815242602082015281517f01e7164b56bfdcd76ac7df9a68a09f177aed22f0b3ef728d56f452745418ebb0929181900390910190a15050505050565b6001546000908190600160a060020a03163314611da557600080fd5b856009806000838152600460205260409020600a9081015460ff1690811115611dca57fe5b14611dd457600080fd5b6000888152600460205260409020600b01548894509250600160008481526005602052604090206003015460ff166002811115611e0d57fe5b14611e1757600080fd5b6000838152600560205260409020600101805460ff19168815151761ff001916610100881515021762ff000019166201000087151502179055611e5d8484898989612133565b5050505050505050565b600081815260046020819052604090912001548190600160a060020a0316331480611eab5750600081815260046020526040902060050154600160a060020a031633145b1515611eb657600080fd5b600082815260046020526040902060090154428111611ed457600080fd5b826001806000838152600460205260409020600a9081015460ff1690811115611ef957fe5b14611f0357600080fd5b6000858152600460205260409020600a0180546002919060ff191660018302179055506040805186815242602082015281517ff432f8d0b15f3b091c000b649a96bedc45f97d6f5361ff4cfd391f16a581fe8f929181900390910190a15050505050565b6000828152600460205260408120600201548390600160a060020a03163314611f8f57600080fd5b836009806000838152600460205260409020600a9081015460ff1690811115611fb457fe5b14611fbe57600080fd5b6000868152600460209081526040808320600b015483526005909152902060020154428111611fec57600080fd5b6000878152600460205260409020600b015460018060008381526005602052604090206003015460ff16600281111561202157fe5b1461202b57600080fd5b6000898152600460209081526040808320600b01548084526005909252909120600101805463ff000000191663010000008b15158102919091179182905591985060ff919004168015611ae45750600087815260056020526040902060010154640100000000900460ff1615611b5957600087815260056020526040902060010154611b1e908a90899060ff8082169161010081048216916201000090910416612133565b60008215156120e1575060006120f9565b508181028183828115156120f157fe5b04146120f957fe5b92915050565b60008282111561210b57fe5b50900390565b818101828110156120f957fe5b6000818381151561212b57fe5b049392505050565b6000858152600460208181526040808420600a81018054600560ff1991821681179092558a8752818552928620600390810180546002951685179055958b905292849052908101549381015492810154918101546006820154600790920154600160a060020a039586169594851694938416939091169190881561237b57600160a060020a0385166108fc6121ef6121e26121d585600263ffffffff6120d016565b869063ffffffff6120ff16565b859063ffffffff61211116565b6040518115909202916000818181858888f19350505050158015612217573d6000803e3d6000fd5b50861561230757600160a060020a038416600090815260076020526040902054612247908263ffffffff6120ff16565b50600160a060020a038316600090815260076020526040902054612271908263ffffffff6120ff16565b50600160a060020a0385166108fc61229083600263ffffffff6120d016565b6040518115909202916000818181858888f193505050501580156122b8573d6000803e3d6000fd5b50600154600160a060020a03166108fc6122d983600263ffffffff6120d016565b6040518115909202916000818181858888f19350505050158015612301573d6000803e3d6000fd5b50612376565b604051600160a060020a0385169082156108fc029083906000818181858888f1935050505015801561233d573d6000803e3d6000fd5b50604051600160a060020a0384169082156108fc029083906000818181858888f19350505050158015612374573d6000803e3d6000fd5b505b61258d565b871561258d57604051600160a060020a0387169083156108fc029084906000818181858888f193505050501580156123b7573d6000803e3d6000fd5b50600160a060020a0385166108fc6123d684600263ffffffff61211e16565b6040518115909202916000818181858888f193505050501580156123fe573d6000803e3d6000fd5b5086156124c157600160a060020a03841660009081526007602052604090205461242e908263ffffffff6120ff16565b50600160a060020a038316600090815260076020526040902054612458908263ffffffff6120ff16565b50600154600160a060020a03166108fc61249961247c84600263ffffffff6120d016565b61248d86600263ffffffff61211e16565b9063ffffffff61211116565b6040518115909202916000818181858888f19350505050158015612374573d6000803e3d6000fd5b604051600160a060020a0385169082156108fc029083906000818181858888f193505050501580156124f7573d6000803e3d6000fd5b50604051600160a060020a0384169082156108fc029083906000818181858888f1935050505015801561252e573d6000803e3d6000fd5b50600154600160a060020a03166108fc61256361255284600263ffffffff6120d016565b610a8a86600263ffffffff61211e16565b6040518115909202916000818181858888f1935050505015801561258b573d6000803e3d6000fd5b505b604080518c815242602082015281517f581a6384d4701bb245eaf6ebd9afd551a8c4f9d4e4ec70b1dfbab15569272bba929181900390910190a15050505050505050505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061261557805160ff1916838001178555612642565b82800160010185558215612642579182015b82811115612642578251825591602001919060010190612627565b5061264e929150612652565b5090565b61266c91905b8082111561264e5760008155600101612658565b905600a165627a7a723058204f104edda61f2096603612ad1991f0b37861cb775bac7eeae918f1a5fb93bcf40029`

// DeployPdash deploys a new Ethereum contract, binding an instance of Pdash to it.
func DeployPdash(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Pdash, error) {
	parsed, err := abi.JSON(strings.NewReader(PdashABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(PdashBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Pdash{PdashCaller: PdashCaller{contract: contract}, PdashTransactor: PdashTransactor{contract: contract}, PdashFilterer: PdashFilterer{contract: contract}}, nil
}

// Pdash is an auto generated Go binding around an Ethereum contract.
type Pdash struct {
	PdashCaller     // Read-only binding to the contract
	PdashTransactor // Write-only binding to the contract
	PdashFilterer   // Log filterer for contract events
}

// PdashCaller is an auto generated read-only Go binding around an Ethereum contract.
type PdashCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdashTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PdashTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdashFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PdashFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PdashSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PdashSession struct {
	Contract     *Pdash            // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PdashCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PdashCallerSession struct {
	Contract *PdashCaller  // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// PdashTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PdashTransactorSession struct {
	Contract     *PdashTransactor  // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// PdashRaw is an auto generated low-level Go binding around an Ethereum contract.
type PdashRaw struct {
	Contract *Pdash // Generic contract binding to access the raw methods on
}

// PdashCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PdashCallerRaw struct {
	Contract *PdashCaller // Generic read-only contract binding to access the raw methods on
}

// PdashTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PdashTransactorRaw struct {
	Contract *PdashTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPdash creates a new instance of Pdash, bound to a specific deployed contract.
func NewPdash(address common.Address, backend bind.ContractBackend) (*Pdash, error) {
	contract, err := bindPdash(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Pdash{PdashCaller: PdashCaller{contract: contract}, PdashTransactor: PdashTransactor{contract: contract}, PdashFilterer: PdashFilterer{contract: contract}}, nil
}

// NewPdashCaller creates a new read-only instance of Pdash, bound to a specific deployed contract.
func NewPdashCaller(address common.Address, caller bind.ContractCaller) (*PdashCaller, error) {
	contract, err := bindPdash(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PdashCaller{contract: contract}, nil
}

// NewPdashTransactor creates a new write-only instance of Pdash, bound to a specific deployed contract.
func NewPdashTransactor(address common.Address, transactor bind.ContractTransactor) (*PdashTransactor, error) {
	contract, err := bindPdash(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PdashTransactor{contract: contract}, nil
}

// NewPdashFilterer creates a new log filterer instance of Pdash, bound to a specific deployed contract.
func NewPdashFilterer(address common.Address, filterer bind.ContractFilterer) (*PdashFilterer, error) {
	contract, err := bindPdash(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PdashFilterer{contract: contract}, nil
}

// bindPdash binds a generic wrapper to an already deployed contract.
func bindPdash(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(PdashABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pdash *PdashRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pdash.Contract.PdashCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pdash *PdashRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pdash.Contract.PdashTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pdash *PdashRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pdash.Contract.PdashTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Pdash *PdashCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Pdash.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Pdash *PdashTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pdash.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Pdash *PdashTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Pdash.Contract.contract.Transact(opts, method, params...)
}

// BlockOrders is a free data retrieval call binding the contract method 0x7478d485.
//
// Solidity: function blockOrders( uint256,  uint256) constant returns(uint256)
func (_Pdash *PdashCaller) BlockOrders(opts *bind.CallOpts, arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "blockOrders", arg0, arg1)
	return *ret0, err
}

// BlockOrders is a free data retrieval call binding the contract method 0x7478d485.
//
// Solidity: function blockOrders( uint256,  uint256) constant returns(uint256)
func (_Pdash *PdashSession) BlockOrders(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Pdash.Contract.BlockOrders(&_Pdash.CallOpts, arg0, arg1)
}

// BlockOrders is a free data retrieval call binding the contract method 0x7478d485.
//
// Solidity: function blockOrders( uint256,  uint256) constant returns(uint256)
func (_Pdash *PdashCallerSession) BlockOrders(arg0 *big.Int, arg1 *big.Int) (*big.Int, error) {
	return _Pdash.Contract.BlockOrders(&_Pdash.CallOpts, arg0, arg1)
}

// BlockOrdersLength is a free data retrieval call binding the contract method 0xdf6c559f.
//
// Solidity: function blockOrdersLength( uint256) constant returns(uint256)
func (_Pdash *PdashCaller) BlockOrdersLength(opts *bind.CallOpts, arg0 *big.Int) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "blockOrdersLength", arg0)
	return *ret0, err
}

// BlockOrdersLength is a free data retrieval call binding the contract method 0xdf6c559f.
//
// Solidity: function blockOrdersLength( uint256) constant returns(uint256)
func (_Pdash *PdashSession) BlockOrdersLength(arg0 *big.Int) (*big.Int, error) {
	return _Pdash.Contract.BlockOrdersLength(&_Pdash.CallOpts, arg0)
}

// BlockOrdersLength is a free data retrieval call binding the contract method 0xdf6c559f.
//
// Solidity: function blockOrdersLength( uint256) constant returns(uint256)
func (_Pdash *PdashCallerSession) BlockOrdersLength(arg0 *big.Int) (*big.Int, error) {
	return _Pdash.Contract.BlockOrdersLength(&_Pdash.CallOpts, arg0)
}

// DisputeRecords is a free data retrieval call binding the contract method 0x7f0ca367.
//
// Solidity: function disputeRecords( uint256) constant returns(orderId uint256, badBuyer bool, badSeller bool, badProxy bool, buyerAgree bool, sellerAgree bool, endTime uint256, disputeState uint8)
func (_Pdash *PdashCaller) DisputeRecords(opts *bind.CallOpts, arg0 *big.Int) (struct {
	OrderId      *big.Int
	BadBuyer     bool
	BadSeller    bool
	BadProxy     bool
	BuyerAgree   bool
	SellerAgree  bool
	EndTime      *big.Int
	DisputeState uint8
}, error) {
	ret := new(struct {
		OrderId      *big.Int
		BadBuyer     bool
		BadSeller    bool
		BadProxy     bool
		BuyerAgree   bool
		SellerAgree  bool
		EndTime      *big.Int
		DisputeState uint8
	})
	out := ret
	err := _Pdash.contract.Call(opts, out, "disputeRecords", arg0)
	return *ret, err
}

// DisputeRecords is a free data retrieval call binding the contract method 0x7f0ca367.
//
// Solidity: function disputeRecords( uint256) constant returns(orderId uint256, badBuyer bool, badSeller bool, badProxy bool, buyerAgree bool, sellerAgree bool, endTime uint256, disputeState uint8)
func (_Pdash *PdashSession) DisputeRecords(arg0 *big.Int) (struct {
	OrderId      *big.Int
	BadBuyer     bool
	BadSeller    bool
	BadProxy     bool
	BuyerAgree   bool
	SellerAgree  bool
	EndTime      *big.Int
	DisputeState uint8
}, error) {
	return _Pdash.Contract.DisputeRecords(&_Pdash.CallOpts, arg0)
}

// DisputeRecords is a free data retrieval call binding the contract method 0x7f0ca367.
//
// Solidity: function disputeRecords( uint256) constant returns(orderId uint256, badBuyer bool, badSeller bool, badProxy bool, buyerAgree bool, sellerAgree bool, endTime uint256, disputeState uint8)
func (_Pdash *PdashCallerSession) DisputeRecords(arg0 *big.Int) (struct {
	OrderId      *big.Int
	BadBuyer     bool
	BadSeller    bool
	BadProxy     bool
	BuyerAgree   bool
	SellerAgree  bool
	EndTime      *big.Int
	DisputeState uint8
}, error) {
	return _Pdash.Contract.DisputeRecords(&_Pdash.CallOpts, arg0)
}

// NumDisputes is a free data retrieval call binding the contract method 0x90089ba0.
//
// Solidity: function numDisputes() constant returns(uint256)
func (_Pdash *PdashCaller) NumDisputes(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "numDisputes")
	return *ret0, err
}

// NumDisputes is a free data retrieval call binding the contract method 0x90089ba0.
//
// Solidity: function numDisputes() constant returns(uint256)
func (_Pdash *PdashSession) NumDisputes() (*big.Int, error) {
	return _Pdash.Contract.NumDisputes(&_Pdash.CallOpts)
}

// NumDisputes is a free data retrieval call binding the contract method 0x90089ba0.
//
// Solidity: function numDisputes() constant returns(uint256)
func (_Pdash *PdashCallerSession) NumDisputes() (*big.Int, error) {
	return _Pdash.Contract.NumDisputes(&_Pdash.CallOpts)
}

// NumOrders is a free data retrieval call binding the contract method 0x45d53788.
//
// Solidity: function numOrders() constant returns(uint256)
func (_Pdash *PdashCaller) NumOrders(opts *bind.CallOpts) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "numOrders")
	return *ret0, err
}

// NumOrders is a free data retrieval call binding the contract method 0x45d53788.
//
// Solidity: function numOrders() constant returns(uint256)
func (_Pdash *PdashSession) NumOrders() (*big.Int, error) {
	return _Pdash.Contract.NumOrders(&_Pdash.CallOpts)
}

// NumOrders is a free data retrieval call binding the contract method 0x45d53788.
//
// Solidity: function numOrders() constant returns(uint256)
func (_Pdash *PdashCallerSession) NumOrders() (*big.Int, error) {
	return _Pdash.Contract.NumOrders(&_Pdash.CallOpts)
}

// OrderRecords is a free data retrieval call binding the contract method 0xe0f29cec.
//
// Solidity: function orderRecords( uint256) constant returns(descHash bytes32, buyerRSAPubkey bytes, buyerAddress address, sellerAddress address, proxyAddress address, secondaryProxyAddress address, offeredPrice uint256, proxyFee uint256, deliverHash bytes32, endTime uint256, state uint8, disputeId uint256)
func (_Pdash *PdashCaller) OrderRecords(opts *bind.CallOpts, arg0 *big.Int) (struct {
	DescHash              [32]byte
	BuyerRSAPubkey        []byte
	BuyerAddress          common.Address
	SellerAddress         common.Address
	ProxyAddress          common.Address
	SecondaryProxyAddress common.Address
	OfferedPrice          *big.Int
	ProxyFee              *big.Int
	DeliverHash           [32]byte
	EndTime               *big.Int
	State                 uint8
	DisputeId             *big.Int
}, error) {
	ret := new(struct {
		DescHash              [32]byte
		BuyerRSAPubkey        []byte
		BuyerAddress          common.Address
		SellerAddress         common.Address
		ProxyAddress          common.Address
		SecondaryProxyAddress common.Address
		OfferedPrice          *big.Int
		ProxyFee              *big.Int
		DeliverHash           [32]byte
		EndTime               *big.Int
		State                 uint8
		DisputeId             *big.Int
	})
	out := ret
	err := _Pdash.contract.Call(opts, out, "orderRecords", arg0)
	return *ret, err
}

// OrderRecords is a free data retrieval call binding the contract method 0xe0f29cec.
//
// Solidity: function orderRecords( uint256) constant returns(descHash bytes32, buyerRSAPubkey bytes, buyerAddress address, sellerAddress address, proxyAddress address, secondaryProxyAddress address, offeredPrice uint256, proxyFee uint256, deliverHash bytes32, endTime uint256, state uint8, disputeId uint256)
func (_Pdash *PdashSession) OrderRecords(arg0 *big.Int) (struct {
	DescHash              [32]byte
	BuyerRSAPubkey        []byte
	BuyerAddress          common.Address
	SellerAddress         common.Address
	ProxyAddress          common.Address
	SecondaryProxyAddress common.Address
	OfferedPrice          *big.Int
	ProxyFee              *big.Int
	DeliverHash           [32]byte
	EndTime               *big.Int
	State                 uint8
	DisputeId             *big.Int
}, error) {
	return _Pdash.Contract.OrderRecords(&_Pdash.CallOpts, arg0)
}

// OrderRecords is a free data retrieval call binding the contract method 0xe0f29cec.
//
// Solidity: function orderRecords( uint256) constant returns(descHash bytes32, buyerRSAPubkey bytes, buyerAddress address, sellerAddress address, proxyAddress address, secondaryProxyAddress address, offeredPrice uint256, proxyFee uint256, deliverHash bytes32, endTime uint256, state uint8, disputeId uint256)
func (_Pdash *PdashCallerSession) OrderRecords(arg0 *big.Int) (struct {
	DescHash              [32]byte
	BuyerRSAPubkey        []byte
	BuyerAddress          common.Address
	SellerAddress         common.Address
	ProxyAddress          common.Address
	SecondaryProxyAddress common.Address
	OfferedPrice          *big.Int
	ProxyFee              *big.Int
	DeliverHash           [32]byte
	EndTime               *big.Int
	State                 uint8
	DisputeId             *big.Int
}, error) {
	return _Pdash.Contract.OrderRecords(&_Pdash.CallOpts, arg0)
}

// ProxyCredits is a free data retrieval call binding the contract method 0xa8dc7e63.
//
// Solidity: function proxyCredits( address) constant returns(uint256)
func (_Pdash *PdashCaller) ProxyCredits(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "proxyCredits", arg0)
	return *ret0, err
}

// ProxyCredits is a free data retrieval call binding the contract method 0xa8dc7e63.
//
// Solidity: function proxyCredits( address) constant returns(uint256)
func (_Pdash *PdashSession) ProxyCredits(arg0 common.Address) (*big.Int, error) {
	return _Pdash.Contract.ProxyCredits(&_Pdash.CallOpts, arg0)
}

// ProxyCredits is a free data retrieval call binding the contract method 0xa8dc7e63.
//
// Solidity: function proxyCredits( address) constant returns(uint256)
func (_Pdash *PdashCallerSession) ProxyCredits(arg0 common.Address) (*big.Int, error) {
	return _Pdash.Contract.ProxyCredits(&_Pdash.CallOpts, arg0)
}

// ProxyDeposits is a free data retrieval call binding the contract method 0x04e1b52e.
//
// Solidity: function proxyDeposits( address) constant returns(uint256)
func (_Pdash *PdashCaller) ProxyDeposits(opts *bind.CallOpts, arg0 common.Address) (*big.Int, error) {
	var (
		ret0 = new(*big.Int)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "proxyDeposits", arg0)
	return *ret0, err
}

// ProxyDeposits is a free data retrieval call binding the contract method 0x04e1b52e.
//
// Solidity: function proxyDeposits( address) constant returns(uint256)
func (_Pdash *PdashSession) ProxyDeposits(arg0 common.Address) (*big.Int, error) {
	return _Pdash.Contract.ProxyDeposits(&_Pdash.CallOpts, arg0)
}

// ProxyDeposits is a free data retrieval call binding the contract method 0x04e1b52e.
//
// Solidity: function proxyDeposits( address) constant returns(uint256)
func (_Pdash *PdashCallerSession) ProxyDeposits(arg0 common.Address) (*big.Int, error) {
	return _Pdash.Contract.ProxyDeposits(&_Pdash.CallOpts, arg0)
}

// TrentAddress is a free data retrieval call binding the contract method 0x0761cda0.
//
// Solidity: function trentAddress() constant returns(address)
func (_Pdash *PdashCaller) TrentAddress(opts *bind.CallOpts) (common.Address, error) {
	var (
		ret0 = new(common.Address)
	)
	out := ret0
	err := _Pdash.contract.Call(opts, out, "trentAddress")
	return *ret0, err
}

// TrentAddress is a free data retrieval call binding the contract method 0x0761cda0.
//
// Solidity: function trentAddress() constant returns(address)
func (_Pdash *PdashSession) TrentAddress() (common.Address, error) {
	return _Pdash.Contract.TrentAddress(&_Pdash.CallOpts)
}

// TrentAddress is a free data retrieval call binding the contract method 0x0761cda0.
//
// Solidity: function trentAddress() constant returns(address)
func (_Pdash *PdashCallerSession) TrentAddress() (common.Address, error) {
	return _Pdash.Contract.TrentAddress(&_Pdash.CallOpts)
}

// BuyerAgreeOrNot is a paid mutator transaction binding the contract method 0xfed7ef34.
//
// Solidity: function buyerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashTransactor) BuyerAgreeOrNot(opts *bind.TransactOpts, id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerAgreeOrNot", id, if_agree)
}

// BuyerAgreeOrNot is a paid mutator transaction binding the contract method 0xfed7ef34.
//
// Solidity: function buyerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashSession) BuyerAgreeOrNot(id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerAgreeOrNot(&_Pdash.TransactOpts, id, if_agree)
}

// BuyerAgreeOrNot is a paid mutator transaction binding the contract method 0xfed7ef34.
//
// Solidity: function buyerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashTransactorSession) BuyerAgreeOrNot(id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerAgreeOrNot(&_Pdash.TransactOpts, id, if_agree)
}

// BuyerClaimTimeOut is a paid mutator transaction binding the contract method 0xe27e6a7f.
//
// Solidity: function buyerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashTransactor) BuyerClaimTimeOut(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerClaimTimeOut", id)
}

// BuyerClaimTimeOut is a paid mutator transaction binding the contract method 0xe27e6a7f.
//
// Solidity: function buyerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashSession) BuyerClaimTimeOut(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerClaimTimeOut(&_Pdash.TransactOpts, id)
}

// BuyerClaimTimeOut is a paid mutator transaction binding the contract method 0xe27e6a7f.
//
// Solidity: function buyerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashTransactorSession) BuyerClaimTimeOut(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerClaimTimeOut(&_Pdash.TransactOpts, id)
}

// BuyerConfirmDeliver is a paid mutator transaction binding the contract method 0x370f3c59.
//
// Solidity: function buyerConfirmDeliver(id uint256) returns()
func (_Pdash *PdashTransactor) BuyerConfirmDeliver(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerConfirmDeliver", id)
}

// BuyerConfirmDeliver is a paid mutator transaction binding the contract method 0x370f3c59.
//
// Solidity: function buyerConfirmDeliver(id uint256) returns()
func (_Pdash *PdashSession) BuyerConfirmDeliver(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerConfirmDeliver(&_Pdash.TransactOpts, id)
}

// BuyerConfirmDeliver is a paid mutator transaction binding the contract method 0x370f3c59.
//
// Solidity: function buyerConfirmDeliver(id uint256) returns()
func (_Pdash *PdashTransactorSession) BuyerConfirmDeliver(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerConfirmDeliver(&_Pdash.TransactOpts, id)
}

// BuyerDispute is a paid mutator transaction binding the contract method 0x516cb027.
//
// Solidity: function buyerDispute(id uint256) returns()
func (_Pdash *PdashTransactor) BuyerDispute(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerDispute", id)
}

// BuyerDispute is a paid mutator transaction binding the contract method 0x516cb027.
//
// Solidity: function buyerDispute(id uint256) returns()
func (_Pdash *PdashSession) BuyerDispute(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerDispute(&_Pdash.TransactOpts, id)
}

// BuyerDispute is a paid mutator transaction binding the contract method 0x516cb027.
//
// Solidity: function buyerDispute(id uint256) returns()
func (_Pdash *PdashTransactorSession) BuyerDispute(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerDispute(&_Pdash.TransactOpts, id)
}

// BuyerRateProxy is a paid mutator transaction binding the contract method 0xa40479f1.
//
// Solidity: function buyerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashTransactor) BuyerRateProxy(opts *bind.TransactOpts, id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerRateProxy", id, rate)
}

// BuyerRateProxy is a paid mutator transaction binding the contract method 0xa40479f1.
//
// Solidity: function buyerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashSession) BuyerRateProxy(id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerRateProxy(&_Pdash.TransactOpts, id, rate)
}

// BuyerRateProxy is a paid mutator transaction binding the contract method 0xa40479f1.
//
// Solidity: function buyerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashTransactorSession) BuyerRateProxy(id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerRateProxy(&_Pdash.TransactOpts, id, rate)
}

// BuyerWithdraw is a paid mutator transaction binding the contract method 0xb03fd85a.
//
// Solidity: function buyerWithdraw(id uint256) returns()
func (_Pdash *PdashTransactor) BuyerWithdraw(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "buyerWithdraw", id)
}

// BuyerWithdraw is a paid mutator transaction binding the contract method 0xb03fd85a.
//
// Solidity: function buyerWithdraw(id uint256) returns()
func (_Pdash *PdashSession) BuyerWithdraw(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerWithdraw(&_Pdash.TransactOpts, id)
}

// BuyerWithdraw is a paid mutator transaction binding the contract method 0xb03fd85a.
//
// Solidity: function buyerWithdraw(id uint256) returns()
func (_Pdash *PdashTransactorSession) BuyerWithdraw(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.BuyerWithdraw(&_Pdash.TransactOpts, id)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xa4ab7beb.
//
// Solidity: function placeOrder(descHash bytes32, buyerRSAPubkey bytes, seller address, proxy address, secondaryProxy address, proxyFee uint256, timeAllowed uint256) returns()
func (_Pdash *PdashTransactor) PlaceOrder(opts *bind.TransactOpts, descHash [32]byte, buyerRSAPubkey []byte, seller common.Address, proxy common.Address, secondaryProxy common.Address, proxyFee *big.Int, timeAllowed *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "placeOrder", descHash, buyerRSAPubkey, seller, proxy, secondaryProxy, proxyFee, timeAllowed)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xa4ab7beb.
//
// Solidity: function placeOrder(descHash bytes32, buyerRSAPubkey bytes, seller address, proxy address, secondaryProxy address, proxyFee uint256, timeAllowed uint256) returns()
func (_Pdash *PdashSession) PlaceOrder(descHash [32]byte, buyerRSAPubkey []byte, seller common.Address, proxy common.Address, secondaryProxy common.Address, proxyFee *big.Int, timeAllowed *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.PlaceOrder(&_Pdash.TransactOpts, descHash, buyerRSAPubkey, seller, proxy, secondaryProxy, proxyFee, timeAllowed)
}

// PlaceOrder is a paid mutator transaction binding the contract method 0xa4ab7beb.
//
// Solidity: function placeOrder(descHash bytes32, buyerRSAPubkey bytes, seller address, proxy address, secondaryProxy address, proxyFee uint256, timeAllowed uint256) returns()
func (_Pdash *PdashTransactorSession) PlaceOrder(descHash [32]byte, buyerRSAPubkey []byte, seller common.Address, proxy common.Address, secondaryProxy common.Address, proxyFee *big.Int, timeAllowed *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.PlaceOrder(&_Pdash.TransactOpts, descHash, buyerRSAPubkey, seller, proxy, secondaryProxy, proxyFee, timeAllowed)
}

// ProxyDelivered is a paid mutator transaction binding the contract method 0x61d4df36.
//
// Solidity: function proxyDelivered(deliverHash bytes32, id uint256) returns()
func (_Pdash *PdashTransactor) ProxyDelivered(opts *bind.TransactOpts, deliverHash [32]byte, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "proxyDelivered", deliverHash, id)
}

// ProxyDelivered is a paid mutator transaction binding the contract method 0x61d4df36.
//
// Solidity: function proxyDelivered(deliverHash bytes32, id uint256) returns()
func (_Pdash *PdashSession) ProxyDelivered(deliverHash [32]byte, id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyDelivered(&_Pdash.TransactOpts, deliverHash, id)
}

// ProxyDelivered is a paid mutator transaction binding the contract method 0x61d4df36.
//
// Solidity: function proxyDelivered(deliverHash bytes32, id uint256) returns()
func (_Pdash *PdashTransactorSession) ProxyDelivered(deliverHash [32]byte, id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyDelivered(&_Pdash.TransactOpts, deliverHash, id)
}

// ProxyDeposit is a paid mutator transaction binding the contract method 0xb3f03d0d.
//
// Solidity: function proxyDeposit() returns()
func (_Pdash *PdashTransactor) ProxyDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "proxyDeposit")
}

// ProxyDeposit is a paid mutator transaction binding the contract method 0xb3f03d0d.
//
// Solidity: function proxyDeposit() returns()
func (_Pdash *PdashSession) ProxyDeposit() (*types.Transaction, error) {
	return _Pdash.Contract.ProxyDeposit(&_Pdash.TransactOpts)
}

// ProxyDeposit is a paid mutator transaction binding the contract method 0xb3f03d0d.
//
// Solidity: function proxyDeposit() returns()
func (_Pdash *PdashTransactorSession) ProxyDeposit() (*types.Transaction, error) {
	return _Pdash.Contract.ProxyDeposit(&_Pdash.TransactOpts)
}

// ProxyFetched is a paid mutator transaction binding the contract method 0xfc9bcb72.
//
// Solidity: function proxyFetched(id uint256) returns()
func (_Pdash *PdashTransactor) ProxyFetched(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "proxyFetched", id)
}

// ProxyFetched is a paid mutator transaction binding the contract method 0xfc9bcb72.
//
// Solidity: function proxyFetched(id uint256) returns()
func (_Pdash *PdashSession) ProxyFetched(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyFetched(&_Pdash.TransactOpts, id)
}

// ProxyFetched is a paid mutator transaction binding the contract method 0xfc9bcb72.
//
// Solidity: function proxyFetched(id uint256) returns()
func (_Pdash *PdashTransactorSession) ProxyFetched(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyFetched(&_Pdash.TransactOpts, id)
}

// ProxyProcessDispute is a paid mutator transaction binding the contract method 0x12344135.
//
// Solidity: function proxyProcessDispute(id uint256, decision bool) returns()
func (_Pdash *PdashTransactor) ProxyProcessDispute(opts *bind.TransactOpts, id *big.Int, decision bool) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "proxyProcessDispute", id, decision)
}

// ProxyProcessDispute is a paid mutator transaction binding the contract method 0x12344135.
//
// Solidity: function proxyProcessDispute(id uint256, decision bool) returns()
func (_Pdash *PdashSession) ProxyProcessDispute(id *big.Int, decision bool) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyProcessDispute(&_Pdash.TransactOpts, id, decision)
}

// ProxyProcessDispute is a paid mutator transaction binding the contract method 0x12344135.
//
// Solidity: function proxyProcessDispute(id uint256, decision bool) returns()
func (_Pdash *PdashTransactorSession) ProxyProcessDispute(id *big.Int, decision bool) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyProcessDispute(&_Pdash.TransactOpts, id, decision)
}

// ProxyWithdraw is a paid mutator transaction binding the contract method 0x45302c19.
//
// Solidity: function proxyWithdraw(value uint256) returns()
func (_Pdash *PdashTransactor) ProxyWithdraw(opts *bind.TransactOpts, value *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "proxyWithdraw", value)
}

// ProxyWithdraw is a paid mutator transaction binding the contract method 0x45302c19.
//
// Solidity: function proxyWithdraw(value uint256) returns()
func (_Pdash *PdashSession) ProxyWithdraw(value *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyWithdraw(&_Pdash.TransactOpts, value)
}

// ProxyWithdraw is a paid mutator transaction binding the contract method 0x45302c19.
//
// Solidity: function proxyWithdraw(value uint256) returns()
func (_Pdash *PdashTransactorSession) ProxyWithdraw(value *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.ProxyWithdraw(&_Pdash.TransactOpts, value)
}

// SellerAgreeOrNot is a paid mutator transaction binding the contract method 0xd7c16641.
//
// Solidity: function sellerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashTransactor) SellerAgreeOrNot(opts *bind.TransactOpts, id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "sellerAgreeOrNot", id, if_agree)
}

// SellerAgreeOrNot is a paid mutator transaction binding the contract method 0xd7c16641.
//
// Solidity: function sellerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashSession) SellerAgreeOrNot(id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.Contract.SellerAgreeOrNot(&_Pdash.TransactOpts, id, if_agree)
}

// SellerAgreeOrNot is a paid mutator transaction binding the contract method 0xd7c16641.
//
// Solidity: function sellerAgreeOrNot(id uint256, if_agree bool) returns()
func (_Pdash *PdashTransactorSession) SellerAgreeOrNot(id *big.Int, if_agree bool) (*types.Transaction, error) {
	return _Pdash.Contract.SellerAgreeOrNot(&_Pdash.TransactOpts, id, if_agree)
}

// SellerClaimTimeOut is a paid mutator transaction binding the contract method 0x16d86082.
//
// Solidity: function sellerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashTransactor) SellerClaimTimeOut(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "sellerClaimTimeOut", id)
}

// SellerClaimTimeOut is a paid mutator transaction binding the contract method 0x16d86082.
//
// Solidity: function sellerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashSession) SellerClaimTimeOut(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerClaimTimeOut(&_Pdash.TransactOpts, id)
}

// SellerClaimTimeOut is a paid mutator transaction binding the contract method 0x16d86082.
//
// Solidity: function sellerClaimTimeOut(id uint256) returns()
func (_Pdash *PdashTransactorSession) SellerClaimTimeOut(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerClaimTimeOut(&_Pdash.TransactOpts, id)
}

// SellerConfirm is a paid mutator transaction binding the contract method 0x459934ec.
//
// Solidity: function sellerConfirm(id uint256) returns()
func (_Pdash *PdashTransactor) SellerConfirm(opts *bind.TransactOpts, id *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "sellerConfirm", id)
}

// SellerConfirm is a paid mutator transaction binding the contract method 0x459934ec.
//
// Solidity: function sellerConfirm(id uint256) returns()
func (_Pdash *PdashSession) SellerConfirm(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerConfirm(&_Pdash.TransactOpts, id)
}

// SellerConfirm is a paid mutator transaction binding the contract method 0x459934ec.
//
// Solidity: function sellerConfirm(id uint256) returns()
func (_Pdash *PdashTransactorSession) SellerConfirm(id *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerConfirm(&_Pdash.TransactOpts, id)
}

// SellerRateProxy is a paid mutator transaction binding the contract method 0xa50a6908.
//
// Solidity: function sellerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashTransactor) SellerRateProxy(opts *bind.TransactOpts, id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "sellerRateProxy", id, rate)
}

// SellerRateProxy is a paid mutator transaction binding the contract method 0xa50a6908.
//
// Solidity: function sellerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashSession) SellerRateProxy(id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerRateProxy(&_Pdash.TransactOpts, id, rate)
}

// SellerRateProxy is a paid mutator transaction binding the contract method 0xa50a6908.
//
// Solidity: function sellerRateProxy(id uint256, rate uint256) returns()
func (_Pdash *PdashTransactorSession) SellerRateProxy(id *big.Int, rate *big.Int) (*types.Transaction, error) {
	return _Pdash.Contract.SellerRateProxy(&_Pdash.TransactOpts, id, rate)
}

// TrentHandleDispute is a paid mutator transaction binding the contract method 0xf3ec4e35.
//
// Solidity: function trentHandleDispute(id uint256, badBuyer bool, badSeller bool, badProxy bool) returns()
func (_Pdash *PdashTransactor) TrentHandleDispute(opts *bind.TransactOpts, id *big.Int, badBuyer bool, badSeller bool, badProxy bool) (*types.Transaction, error) {
	return _Pdash.contract.Transact(opts, "trentHandleDispute", id, badBuyer, badSeller, badProxy)
}

// TrentHandleDispute is a paid mutator transaction binding the contract method 0xf3ec4e35.
//
// Solidity: function trentHandleDispute(id uint256, badBuyer bool, badSeller bool, badProxy bool) returns()
func (_Pdash *PdashSession) TrentHandleDispute(id *big.Int, badBuyer bool, badSeller bool, badProxy bool) (*types.Transaction, error) {
	return _Pdash.Contract.TrentHandleDispute(&_Pdash.TransactOpts, id, badBuyer, badSeller, badProxy)
}

// TrentHandleDispute is a paid mutator transaction binding the contract method 0xf3ec4e35.
//
// Solidity: function trentHandleDispute(id uint256, badBuyer bool, badSeller bool, badProxy bool) returns()
func (_Pdash *PdashTransactorSession) TrentHandleDispute(id *big.Int, badBuyer bool, badSeller bool, badProxy bool) (*types.Transaction, error) {
	return _Pdash.Contract.TrentHandleDispute(&_Pdash.TransactOpts, id, badBuyer, badSeller, badProxy)
}

// PdashBuyerConfirmedIterator is returned from FilterBuyerConfirmed and is used to iterate over the raw logs and unpacked data for BuyerConfirmed events raised by the Pdash contract.
type PdashBuyerConfirmedIterator struct {
	Event *PdashBuyerConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashBuyerConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashBuyerConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashBuyerConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashBuyerConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashBuyerConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashBuyerConfirmed represents a BuyerConfirmed event raised by the Pdash contract.
type PdashBuyerConfirmed struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBuyerConfirmed is a free log retrieval operation binding the contract event 0xd87dd92b1de3627ad322286c5c45566583bef03d0334ca6f0c9a9db7f7c0f16b.
//
// Solidity: e BuyerConfirmed(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterBuyerConfirmed(opts *bind.FilterOpts) (*PdashBuyerConfirmedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "BuyerConfirmed")
	if err != nil {
		return nil, err
	}
	return &PdashBuyerConfirmedIterator{contract: _Pdash.contract, event: "BuyerConfirmed", logs: logs, sub: sub}, nil
}

// WatchBuyerConfirmed is a free log subscription operation binding the contract event 0xd87dd92b1de3627ad322286c5c45566583bef03d0334ca6f0c9a9db7f7c0f16b.
//
// Solidity: e BuyerConfirmed(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchBuyerConfirmed(opts *bind.WatchOpts, sink chan<- *PdashBuyerConfirmed) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "BuyerConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashBuyerConfirmed)
				if err := _Pdash.contract.UnpackLog(event, "BuyerConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashBuyerDisputedIterator is returned from FilterBuyerDisputed and is used to iterate over the raw logs and unpacked data for BuyerDisputed events raised by the Pdash contract.
type PdashBuyerDisputedIterator struct {
	Event *PdashBuyerDisputed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashBuyerDisputedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashBuyerDisputed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashBuyerDisputed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashBuyerDisputedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashBuyerDisputedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashBuyerDisputed represents a BuyerDisputed event raised by the Pdash contract.
type PdashBuyerDisputed struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterBuyerDisputed is a free log retrieval operation binding the contract event 0xa6c88e175a49cd3945a40a26a490ae07ede7d4eb825c4f26a7ff37a464d05d35.
//
// Solidity: e BuyerDisputed(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterBuyerDisputed(opts *bind.FilterOpts) (*PdashBuyerDisputedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "BuyerDisputed")
	if err != nil {
		return nil, err
	}
	return &PdashBuyerDisputedIterator{contract: _Pdash.contract, event: "BuyerDisputed", logs: logs, sub: sub}, nil
}

// WatchBuyerDisputed is a free log subscription operation binding the contract event 0xa6c88e175a49cd3945a40a26a490ae07ede7d4eb825c4f26a7ff37a464d05d35.
//
// Solidity: e BuyerDisputed(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchBuyerDisputed(opts *bind.WatchOpts, sink chan<- *PdashBuyerDisputed) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "BuyerDisputed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashBuyerDisputed)
				if err := _Pdash.contract.UnpackLog(event, "BuyerDisputed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashOrderFinishedIterator is returned from FilterOrderFinished and is used to iterate over the raw logs and unpacked data for OrderFinished events raised by the Pdash contract.
type PdashOrderFinishedIterator struct {
	Event *PdashOrderFinished // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashOrderFinishedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashOrderFinished)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashOrderFinished)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashOrderFinishedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashOrderFinishedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashOrderFinished represents a OrderFinished event raised by the Pdash contract.
type PdashOrderFinished struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderFinished is a free log retrieval operation binding the contract event 0x581a6384d4701bb245eaf6ebd9afd551a8c4f9d4e4ec70b1dfbab15569272bba.
//
// Solidity: e OrderFinished(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterOrderFinished(opts *bind.FilterOpts) (*PdashOrderFinishedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "OrderFinished")
	if err != nil {
		return nil, err
	}
	return &PdashOrderFinishedIterator{contract: _Pdash.contract, event: "OrderFinished", logs: logs, sub: sub}, nil
}

// WatchOrderFinished is a free log subscription operation binding the contract event 0x581a6384d4701bb245eaf6ebd9afd551a8c4f9d4e4ec70b1dfbab15569272bba.
//
// Solidity: e OrderFinished(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchOrderFinished(opts *bind.WatchOpts, sink chan<- *PdashOrderFinished) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "OrderFinished")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashOrderFinished)
				if err := _Pdash.contract.UnpackLog(event, "OrderFinished", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashOrderInitiatedIterator is returned from FilterOrderInitiated and is used to iterate over the raw logs and unpacked data for OrderInitiated events raised by the Pdash contract.
type PdashOrderInitiatedIterator struct {
	Event *PdashOrderInitiated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashOrderInitiatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashOrderInitiated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashOrderInitiated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashOrderInitiatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashOrderInitiatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashOrderInitiated represents a OrderInitiated event raised by the Pdash contract.
type PdashOrderInitiated struct {
	From    common.Address
	OrderId *big.Int
	Value   *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderInitiated is a free log retrieval operation binding the contract event 0xca46e2845b8de28445b9ac838c4fe91c25ecde13a4d5661c14acf05fcc89d7d9.
//
// Solidity: e OrderInitiated(from address, orderId uint256, value uint256, time uint256)
func (_Pdash *PdashFilterer) FilterOrderInitiated(opts *bind.FilterOpts) (*PdashOrderInitiatedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "OrderInitiated")
	if err != nil {
		return nil, err
	}
	return &PdashOrderInitiatedIterator{contract: _Pdash.contract, event: "OrderInitiated", logs: logs, sub: sub}, nil
}

// WatchOrderInitiated is a free log subscription operation binding the contract event 0xca46e2845b8de28445b9ac838c4fe91c25ecde13a4d5661c14acf05fcc89d7d9.
//
// Solidity: e OrderInitiated(from address, orderId uint256, value uint256, time uint256)
func (_Pdash *PdashFilterer) WatchOrderInitiated(opts *bind.WatchOpts, sink chan<- *PdashOrderInitiated) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "OrderInitiated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashOrderInitiated)
				if err := _Pdash.contract.UnpackLog(event, "OrderInitiated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashOrderWithdrawnIterator is returned from FilterOrderWithdrawn and is used to iterate over the raw logs and unpacked data for OrderWithdrawn events raised by the Pdash contract.
type PdashOrderWithdrawnIterator struct {
	Event *PdashOrderWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashOrderWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashOrderWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashOrderWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashOrderWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashOrderWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashOrderWithdrawn represents a OrderWithdrawn event raised by the Pdash contract.
type PdashOrderWithdrawn struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOrderWithdrawn is a free log retrieval operation binding the contract event 0x01e7164b56bfdcd76ac7df9a68a09f177aed22f0b3ef728d56f452745418ebb0.
//
// Solidity: e OrderWithdrawn(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterOrderWithdrawn(opts *bind.FilterOpts) (*PdashOrderWithdrawnIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "OrderWithdrawn")
	if err != nil {
		return nil, err
	}
	return &PdashOrderWithdrawnIterator{contract: _Pdash.contract, event: "OrderWithdrawn", logs: logs, sub: sub}, nil
}

// WatchOrderWithdrawn is a free log subscription operation binding the contract event 0x01e7164b56bfdcd76ac7df9a68a09f177aed22f0b3ef728d56f452745418ebb0.
//
// Solidity: e OrderWithdrawn(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchOrderWithdrawn(opts *bind.WatchOpts, sink chan<- *PdashOrderWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "OrderWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashOrderWithdrawn)
				if err := _Pdash.contract.UnpackLog(event, "OrderWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashProxyDeliveredIterator is returned from FilterProxyDelivered and is used to iterate over the raw logs and unpacked data for ProxyDelivered events raised by the Pdash contract.
type PdashProxyDeliveredIterator struct {
	Event *PdashProxyDelivered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashProxyDeliveredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashProxyDelivered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashProxyDelivered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashProxyDeliveredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashProxyDeliveredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashProxyDelivered represents a ProxyDelivered event raised by the Pdash contract.
type PdashProxyDelivered struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProxyDelivered is a free log retrieval operation binding the contract event 0xee6a57b211b9b5284bd6650f9cca90a9ecbc0236e1610fe97c468faa0fc68287.
//
// Solidity: e ProxyDelivered(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterProxyDelivered(opts *bind.FilterOpts) (*PdashProxyDeliveredIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "ProxyDelivered")
	if err != nil {
		return nil, err
	}
	return &PdashProxyDeliveredIterator{contract: _Pdash.contract, event: "ProxyDelivered", logs: logs, sub: sub}, nil
}

// WatchProxyDelivered is a free log subscription operation binding the contract event 0xee6a57b211b9b5284bd6650f9cca90a9ecbc0236e1610fe97c468faa0fc68287.
//
// Solidity: e ProxyDelivered(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchProxyDelivered(opts *bind.WatchOpts, sink chan<- *PdashProxyDelivered) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "ProxyDelivered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashProxyDelivered)
				if err := _Pdash.contract.UnpackLog(event, "ProxyDelivered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashProxyDepositedIterator is returned from FilterProxyDeposited and is used to iterate over the raw logs and unpacked data for ProxyDeposited events raised by the Pdash contract.
type PdashProxyDepositedIterator struct {
	Event *PdashProxyDeposited // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashProxyDepositedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashProxyDeposited)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashProxyDeposited)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashProxyDepositedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashProxyDepositedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashProxyDeposited represents a ProxyDeposited event raised by the Pdash contract.
type PdashProxyDeposited struct {
	From  common.Address
	Value *big.Int
	Time  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProxyDeposited is a free log retrieval operation binding the contract event 0xe485b77aa65aed2e79b44431303e4512f39e8d8d6bb557ba6273ff499f6c4cec.
//
// Solidity: e ProxyDeposited(from address, value uint256, time uint256)
func (_Pdash *PdashFilterer) FilterProxyDeposited(opts *bind.FilterOpts) (*PdashProxyDepositedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "ProxyDeposited")
	if err != nil {
		return nil, err
	}
	return &PdashProxyDepositedIterator{contract: _Pdash.contract, event: "ProxyDeposited", logs: logs, sub: sub}, nil
}

// WatchProxyDeposited is a free log subscription operation binding the contract event 0xe485b77aa65aed2e79b44431303e4512f39e8d8d6bb557ba6273ff499f6c4cec.
//
// Solidity: e ProxyDeposited(from address, value uint256, time uint256)
func (_Pdash *PdashFilterer) WatchProxyDeposited(opts *bind.WatchOpts, sink chan<- *PdashProxyDeposited) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "ProxyDeposited")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashProxyDeposited)
				if err := _Pdash.contract.UnpackLog(event, "ProxyDeposited", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashProxyFetchedIterator is returned from FilterProxyFetched and is used to iterate over the raw logs and unpacked data for ProxyFetched events raised by the Pdash contract.
type PdashProxyFetchedIterator struct {
	Event *PdashProxyFetched // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashProxyFetchedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashProxyFetched)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashProxyFetched)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashProxyFetchedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashProxyFetchedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashProxyFetched represents a ProxyFetched event raised by the Pdash contract.
type PdashProxyFetched struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProxyFetched is a free log retrieval operation binding the contract event 0xf432f8d0b15f3b091c000b649a96bedc45f97d6f5361ff4cfd391f16a581fe8f.
//
// Solidity: e ProxyFetched(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterProxyFetched(opts *bind.FilterOpts) (*PdashProxyFetchedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "ProxyFetched")
	if err != nil {
		return nil, err
	}
	return &PdashProxyFetchedIterator{contract: _Pdash.contract, event: "ProxyFetched", logs: logs, sub: sub}, nil
}

// WatchProxyFetched is a free log subscription operation binding the contract event 0xf432f8d0b15f3b091c000b649a96bedc45f97d6f5361ff4cfd391f16a581fe8f.
//
// Solidity: e ProxyFetched(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchProxyFetched(opts *bind.WatchOpts, sink chan<- *PdashProxyFetched) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "ProxyFetched")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashProxyFetched)
				if err := _Pdash.contract.UnpackLog(event, "ProxyFetched", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashProxyWithdrawnIterator is returned from FilterProxyWithdrawn and is used to iterate over the raw logs and unpacked data for ProxyWithdrawn events raised by the Pdash contract.
type PdashProxyWithdrawnIterator struct {
	Event *PdashProxyWithdrawn // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashProxyWithdrawnIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashProxyWithdrawn)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashProxyWithdrawn)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashProxyWithdrawnIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashProxyWithdrawnIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashProxyWithdrawn represents a ProxyWithdrawn event raised by the Pdash contract.
type PdashProxyWithdrawn struct {
	From  common.Address
	Value *big.Int
	Time  *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterProxyWithdrawn is a free log retrieval operation binding the contract event 0xc6311a7ead0ac41d26e6a97e6c05f885c84fa52336b5fc201c83451f05b08b7d.
//
// Solidity: e ProxyWithdrawn(from address, value uint256, time uint256)
func (_Pdash *PdashFilterer) FilterProxyWithdrawn(opts *bind.FilterOpts) (*PdashProxyWithdrawnIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "ProxyWithdrawn")
	if err != nil {
		return nil, err
	}
	return &PdashProxyWithdrawnIterator{contract: _Pdash.contract, event: "ProxyWithdrawn", logs: logs, sub: sub}, nil
}

// WatchProxyWithdrawn is a free log subscription operation binding the contract event 0xc6311a7ead0ac41d26e6a97e6c05f885c84fa52336b5fc201c83451f05b08b7d.
//
// Solidity: e ProxyWithdrawn(from address, value uint256, time uint256)
func (_Pdash *PdashFilterer) WatchProxyWithdrawn(opts *bind.WatchOpts, sink chan<- *PdashProxyWithdrawn) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "ProxyWithdrawn")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashProxyWithdrawn)
				if err := _Pdash.contract.UnpackLog(event, "ProxyWithdrawn", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashSellerClaimTimeoutIterator is returned from FilterSellerClaimTimeout and is used to iterate over the raw logs and unpacked data for SellerClaimTimeout events raised by the Pdash contract.
type PdashSellerClaimTimeoutIterator struct {
	Event *PdashSellerClaimTimeout // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashSellerClaimTimeoutIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashSellerClaimTimeout)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashSellerClaimTimeout)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashSellerClaimTimeoutIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashSellerClaimTimeoutIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashSellerClaimTimeout represents a SellerClaimTimeout event raised by the Pdash contract.
type PdashSellerClaimTimeout struct {
	OrderId *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSellerClaimTimeout is a free log retrieval operation binding the contract event 0x34ce961a05a1558f29e54cc2618b644ec6d298fda6c1eda6395c910d04c63f21.
//
// Solidity: e SellerClaimTimeout(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) FilterSellerClaimTimeout(opts *bind.FilterOpts) (*PdashSellerClaimTimeoutIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "SellerClaimTimeout")
	if err != nil {
		return nil, err
	}
	return &PdashSellerClaimTimeoutIterator{contract: _Pdash.contract, event: "SellerClaimTimeout", logs: logs, sub: sub}, nil
}

// WatchSellerClaimTimeout is a free log subscription operation binding the contract event 0x34ce961a05a1558f29e54cc2618b644ec6d298fda6c1eda6395c910d04c63f21.
//
// Solidity: e SellerClaimTimeout(orderId uint256, time uint256)
func (_Pdash *PdashFilterer) WatchSellerClaimTimeout(opts *bind.WatchOpts, sink chan<- *PdashSellerClaimTimeout) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "SellerClaimTimeout")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashSellerClaimTimeout)
				if err := _Pdash.contract.UnpackLog(event, "SellerClaimTimeout", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// PdashSellerConfirmedIterator is returned from FilterSellerConfirmed and is used to iterate over the raw logs and unpacked data for SellerConfirmed events raised by the Pdash contract.
type PdashSellerConfirmedIterator struct {
	Event *PdashSellerConfirmed // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log       // Log channel receiving the found contract events
	sub  cpchain.Subscription // Subscription for errors, completion and termination
	done bool                 // Whether the subscription completed delivering logs
	fail error                // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *PdashSellerConfirmedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(PdashSellerConfirmed)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(PdashSellerConfirmed)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *PdashSellerConfirmedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *PdashSellerConfirmedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// PdashSellerConfirmed represents a SellerConfirmed event raised by the Pdash contract.
type PdashSellerConfirmed struct {
	OrderId *big.Int
	Value   *big.Int
	Time    *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSellerConfirmed is a free log retrieval operation binding the contract event 0x76408f7d8666ddeb495564b182efc9e10ee49e1caa750fc79568b86ae940e42b.
//
// Solidity: e SellerConfirmed(orderId uint256, value uint256, time uint256)
func (_Pdash *PdashFilterer) FilterSellerConfirmed(opts *bind.FilterOpts) (*PdashSellerConfirmedIterator, error) {

	logs, sub, err := _Pdash.contract.FilterLogs(opts, "SellerConfirmed")
	if err != nil {
		return nil, err
	}
	return &PdashSellerConfirmedIterator{contract: _Pdash.contract, event: "SellerConfirmed", logs: logs, sub: sub}, nil
}

// WatchSellerConfirmed is a free log subscription operation binding the contract event 0x76408f7d8666ddeb495564b182efc9e10ee49e1caa750fc79568b86ae940e42b.
//
// Solidity: e SellerConfirmed(orderId uint256, value uint256, time uint256)
func (_Pdash *PdashFilterer) WatchSellerConfirmed(opts *bind.WatchOpts, sink chan<- *PdashSellerConfirmed) (event.Subscription, error) {

	logs, sub, err := _Pdash.contract.WatchLogs(opts, "SellerConfirmed")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(PdashSellerConfirmed)
				if err := _Pdash.contract.UnpackLog(event, "SellerConfirmed", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// SafeMathABI is the input ABI used to generate the binding from.
const SafeMathABI = "[]"

// SafeMathBin is the compiled bytecode used for deploying new contracts.
const SafeMathBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058206063242b4108b0fd154dad56f7408df1b5a3d7d1077890bfb3fea63258c3e25e0029`

// DeploySafeMath deploys a new Ethereum contract, binding an instance of SafeMath to it.
func DeploySafeMath(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *SafeMath, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SafeMathBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// SafeMath is an auto generated Go binding around an Ethereum contract.
type SafeMath struct {
	SafeMathCaller     // Read-only binding to the contract
	SafeMathTransactor // Write-only binding to the contract
	SafeMathFilterer   // Log filterer for contract events
}

// SafeMathCaller is an auto generated read-only Go binding around an Ethereum contract.
type SafeMathCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SafeMathTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SafeMathFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SafeMathSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SafeMathSession struct {
	Contract     *SafeMath         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SafeMathCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SafeMathCallerSession struct {
	Contract *SafeMathCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// SafeMathTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SafeMathTransactorSession struct {
	Contract     *SafeMathTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// SafeMathRaw is an auto generated low-level Go binding around an Ethereum contract.
type SafeMathRaw struct {
	Contract *SafeMath // Generic contract binding to access the raw methods on
}

// SafeMathCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SafeMathCallerRaw struct {
	Contract *SafeMathCaller // Generic read-only contract binding to access the raw methods on
}

// SafeMathTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SafeMathTransactorRaw struct {
	Contract *SafeMathTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafeMath creates a new instance of SafeMath, bound to a specific deployed contract.
func NewSafeMath(address common.Address, backend bind.ContractBackend) (*SafeMath, error) {
	contract, err := bindSafeMath(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &SafeMath{SafeMathCaller: SafeMathCaller{contract: contract}, SafeMathTransactor: SafeMathTransactor{contract: contract}, SafeMathFilterer: SafeMathFilterer{contract: contract}}, nil
}

// NewSafeMathCaller creates a new read-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathCaller(address common.Address, caller bind.ContractCaller) (*SafeMathCaller, error) {
	contract, err := bindSafeMath(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathCaller{contract: contract}, nil
}

// NewSafeMathTransactor creates a new write-only instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathTransactor(address common.Address, transactor bind.ContractTransactor) (*SafeMathTransactor, error) {
	contract, err := bindSafeMath(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SafeMathTransactor{contract: contract}, nil
}

// NewSafeMathFilterer creates a new log filterer instance of SafeMath, bound to a specific deployed contract.
func NewSafeMathFilterer(address common.Address, filterer bind.ContractFilterer) (*SafeMathFilterer, error) {
	contract, err := bindSafeMath(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SafeMathFilterer{contract: contract}, nil
}

// bindSafeMath binds a generic wrapper to an already deployed contract.
func bindSafeMath(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SafeMathABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.SafeMathCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.SafeMathTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_SafeMath *SafeMathCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _SafeMath.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_SafeMath *SafeMathTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_SafeMath *SafeMathTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _SafeMath.Contract.contract.Transact(opts, method, params...)
}

// SetABI is the input ABI used to generate the binding from.
const SetABI = "[]"

// SetBin is the compiled bytecode used for deploying new contracts.
const SetBin = `0x604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a72305820b96eb4df7df1cb336a5845cdfb730e25ebd18ff624316b94c39926fa98ecfd4a0029`

// DeploySet deploys a new Ethereum contract, binding an instance of Set to it.
func DeploySet(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Set, error) {
	parsed, err := abi.JSON(strings.NewReader(SetABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(SetBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Set{SetCaller: SetCaller{contract: contract}, SetTransactor: SetTransactor{contract: contract}, SetFilterer: SetFilterer{contract: contract}}, nil
}

// Set is an auto generated Go binding around an Ethereum contract.
type Set struct {
	SetCaller     // Read-only binding to the contract
	SetTransactor // Write-only binding to the contract
	SetFilterer   // Log filterer for contract events
}

// SetCaller is an auto generated read-only Go binding around an Ethereum contract.
type SetCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetTransactor is an auto generated write-only Go binding around an Ethereum contract.
type SetTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type SetFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// SetSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type SetSession struct {
	Contract     *Set              // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SetCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type SetCallerSession struct {
	Contract *SetCaller    // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts // Call options to use throughout this session
}

// SetTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type SetTransactorSession struct {
	Contract     *SetTransactor    // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// SetRaw is an auto generated low-level Go binding around an Ethereum contract.
type SetRaw struct {
	Contract *Set // Generic contract binding to access the raw methods on
}

// SetCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type SetCallerRaw struct {
	Contract *SetCaller // Generic read-only contract binding to access the raw methods on
}

// SetTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type SetTransactorRaw struct {
	Contract *SetTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSet creates a new instance of Set, bound to a specific deployed contract.
func NewSet(address common.Address, backend bind.ContractBackend) (*Set, error) {
	contract, err := bindSet(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Set{SetCaller: SetCaller{contract: contract}, SetTransactor: SetTransactor{contract: contract}, SetFilterer: SetFilterer{contract: contract}}, nil
}

// NewSetCaller creates a new read-only instance of Set, bound to a specific deployed contract.
func NewSetCaller(address common.Address, caller bind.ContractCaller) (*SetCaller, error) {
	contract, err := bindSet(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &SetCaller{contract: contract}, nil
}

// NewSetTransactor creates a new write-only instance of Set, bound to a specific deployed contract.
func NewSetTransactor(address common.Address, transactor bind.ContractTransactor) (*SetTransactor, error) {
	contract, err := bindSet(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &SetTransactor{contract: contract}, nil
}

// NewSetFilterer creates a new log filterer instance of Set, bound to a specific deployed contract.
func NewSetFilterer(address common.Address, filterer bind.ContractFilterer) (*SetFilterer, error) {
	contract, err := bindSet(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &SetFilterer{contract: contract}, nil
}

// bindSet binds a generic wrapper to an already deployed contract.
func bindSet(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(SetABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Set *SetRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Set.Contract.SetCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Set *SetRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Set.Contract.SetTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Set *SetRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Set.Contract.SetTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Set *SetCallerRaw) Call(opts *bind.CallOpts, result interface{}, method string, params ...interface{}) error {
	return _Set.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Set *SetTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Set.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Set *SetTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Set.Contract.contract.Transact(opts, method, params...)
}
