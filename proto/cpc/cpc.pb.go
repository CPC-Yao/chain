// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cpc.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublicEthereumAPIReply struct {
	Address              *wrappers.BytesValue  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Rate                 *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PublicEthereumAPIReply) Reset()         { *m = PublicEthereumAPIReply{} }
func (m *PublicEthereumAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicEthereumAPIReply) ProtoMessage()    {}
func (*PublicEthereumAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{0}
}

func (m *PublicEthereumAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicEthereumAPIReply.Unmarshal(m, b)
}
func (m *PublicEthereumAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicEthereumAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicEthereumAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicEthereumAPIReply.Merge(m, src)
}
func (m *PublicEthereumAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicEthereumAPIReply.Size(m)
}
func (m *PublicEthereumAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicEthereumAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicEthereumAPIReply proto.InternalMessageInfo

func (m *PublicEthereumAPIReply) GetAddress() *wrappers.BytesValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicEthereumAPIReply) GetRate() *wrappers.UInt64Value {
	if m != nil {
		return m.Rate
	}
	return nil
}

type PublicMinerAPIRequest struct {
	BlockNonce           *wrappers.BytesValue `protobuf:"bytes,1,opt,name=block_nonce,json=blockNonce,proto3" json:"block_nonce,omitempty"`
	Solution             *wrappers.BytesValue `protobuf:"bytes,2,opt,name=solution,proto3" json:"solution,omitempty"`
	Digest               *wrappers.BytesValue `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Hashrate             uint64               `protobuf:"varint,4,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	Id                   []byte               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PublicMinerAPIRequest) Reset()         { *m = PublicMinerAPIRequest{} }
func (m *PublicMinerAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIRequest) ProtoMessage()    {}
func (*PublicMinerAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{1}
}

func (m *PublicMinerAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIRequest.Unmarshal(m, b)
}
func (m *PublicMinerAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIRequest.Merge(m, src)
}
func (m *PublicMinerAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIRequest.Size(m)
}
func (m *PublicMinerAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIRequest proto.InternalMessageInfo

func (m *PublicMinerAPIRequest) GetBlockNonce() *wrappers.BytesValue {
	if m != nil {
		return m.BlockNonce
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetSolution() *wrappers.BytesValue {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetDigest() *wrappers.BytesValue {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetHashrate() uint64 {
	if m != nil {
		return m.Hashrate
	}
	return 0
}

func (m *PublicMinerAPIRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type PublicMinerAPIReply struct {
	Mining               *wrappers.BoolValue `protobuf:"bytes,1,opt,name=mining,proto3" json:"mining,omitempty"`
	IsAccepting          bool                `protobuf:"varint,2,opt,name=is_accepting,json=isAccepting,proto3" json:"is_accepting,omitempty"`
	Works                []string            `protobuf:"bytes,3,rep,name=works,proto3" json:"works,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicMinerAPIReply) Reset()         { *m = PublicMinerAPIReply{} }
func (m *PublicMinerAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIReply) ProtoMessage()    {}
func (*PublicMinerAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{2}
}

func (m *PublicMinerAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIReply.Unmarshal(m, b)
}
func (m *PublicMinerAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIReply.Merge(m, src)
}
func (m *PublicMinerAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIReply.Size(m)
}
func (m *PublicMinerAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIReply proto.InternalMessageInfo

func (m *PublicMinerAPIReply) GetMining() *wrappers.BoolValue {
	if m != nil {
		return m.Mining
	}
	return nil
}

func (m *PublicMinerAPIReply) GetIsAccepting() bool {
	if m != nil {
		return m.IsAccepting
	}
	return false
}

func (m *PublicMinerAPIReply) GetWorks() []string {
	if m != nil {
		return m.Works
	}
	return nil
}

type PrivateMinerAPIRequest struct {
	Threads              *wrappers.Int32Value `protobuf:"bytes,1,opt,name=threads,proto3" json:"threads,omitempty"`
	Extra                string               `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	GasPrice             []byte               `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Etherbase            []byte               `protobuf:"bytes,4,opt,name=etherbase,proto3" json:"etherbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PrivateMinerAPIRequest) Reset()         { *m = PrivateMinerAPIRequest{} }
func (m *PrivateMinerAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateMinerAPIRequest) ProtoMessage()    {}
func (*PrivateMinerAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{3}
}

func (m *PrivateMinerAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateMinerAPIRequest.Unmarshal(m, b)
}
func (m *PrivateMinerAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateMinerAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateMinerAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateMinerAPIRequest.Merge(m, src)
}
func (m *PrivateMinerAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateMinerAPIRequest.Size(m)
}
func (m *PrivateMinerAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateMinerAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateMinerAPIRequest proto.InternalMessageInfo

func (m *PrivateMinerAPIRequest) GetThreads() *wrappers.Int32Value {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *PrivateMinerAPIRequest) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *PrivateMinerAPIRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PrivateMinerAPIRequest) GetEtherbase() []byte {
	if m != nil {
		return m.Etherbase
	}
	return nil
}

type PrivateMinerAPIReply struct {
	IsOk                 bool     `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	Hashrate             uint64   `protobuf:"varint,2,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateMinerAPIReply) Reset()         { *m = PrivateMinerAPIReply{} }
func (m *PrivateMinerAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateMinerAPIReply) ProtoMessage()    {}
func (*PrivateMinerAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{4}
}

func (m *PrivateMinerAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateMinerAPIReply.Unmarshal(m, b)
}
func (m *PrivateMinerAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateMinerAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateMinerAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateMinerAPIReply.Merge(m, src)
}
func (m *PrivateMinerAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateMinerAPIReply.Size(m)
}
func (m *PrivateMinerAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateMinerAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateMinerAPIReply proto.InternalMessageInfo

func (m *PrivateMinerAPIReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *PrivateMinerAPIReply) GetHashrate() uint64 {
	if m != nil {
		return m.Hashrate
	}
	return 0
}

type PrivateAdminAPIRequest struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateAdminAPIRequest) Reset()         { *m = PrivateAdminAPIRequest{} }
func (m *PrivateAdminAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateAdminAPIRequest) ProtoMessage()    {}
func (*PrivateAdminAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{5}
}

func (m *PrivateAdminAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAdminAPIRequest.Unmarshal(m, b)
}
func (m *PrivateAdminAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAdminAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateAdminAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAdminAPIRequest.Merge(m, src)
}
func (m *PrivateAdminAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateAdminAPIRequest.Size(m)
}
func (m *PrivateAdminAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAdminAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAdminAPIRequest proto.InternalMessageInfo

func (m *PrivateAdminAPIRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type PrivateAdminAPIReply struct {
	IsOk                 bool     `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateAdminAPIReply) Reset()         { *m = PrivateAdminAPIReply{} }
func (m *PrivateAdminAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateAdminAPIReply) ProtoMessage()    {}
func (*PrivateAdminAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{6}
}

func (m *PrivateAdminAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAdminAPIReply.Unmarshal(m, b)
}
func (m *PrivateAdminAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAdminAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateAdminAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAdminAPIReply.Merge(m, src)
}
func (m *PrivateAdminAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateAdminAPIReply.Size(m)
}
func (m *PrivateAdminAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAdminAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAdminAPIReply proto.InternalMessageInfo

func (m *PrivateAdminAPIReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

type PublicDebugAPIRequest struct {
	BlockNumber          int64    `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicDebugAPIRequest) Reset()         { *m = PublicDebugAPIRequest{} }
func (m *PublicDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicDebugAPIRequest) ProtoMessage()    {}
func (*PublicDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{7}
}

func (m *PublicDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicDebugAPIRequest.Unmarshal(m, b)
}
func (m *PublicDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicDebugAPIRequest.Merge(m, src)
}
func (m *PublicDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicDebugAPIRequest.Size(m)
}
func (m *PublicDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicDebugAPIRequest proto.InternalMessageInfo

func (m *PublicDebugAPIRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PrivateDebugAPIRequest struct {
	Hash                 []byte                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash            []byte                `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex              int32                 `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	ContractAddress      []byte                `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	KeyStart             []byte                `protobuf:"bytes,5,opt,name=key_start,json=keyStart,proto3" json:"key_start,omitempty"`
	MaxResult            int32                 `protobuf:"varint,6,opt,name=max_result,json=maxResult,proto3" json:"max_result,omitempty"`
	StartHash            []byte                `protobuf:"bytes,7,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	EndHash              *wrappers.BytesValue  `protobuf:"bytes,8,opt,name=end_hash,json=endHash,proto3" json:"end_hash,omitempty"`
	StartNum             uint64                `protobuf:"varint,9,opt,name=start_num,json=startNum,proto3" json:"start_num,omitempty"`
	EndNum               *wrappers.UInt64Value `protobuf:"bytes,10,opt,name=end_num,json=endNum,proto3" json:"end_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrivateDebugAPIRequest) Reset()         { *m = PrivateDebugAPIRequest{} }
func (m *PrivateDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateDebugAPIRequest) ProtoMessage()    {}
func (*PrivateDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{8}
}

func (m *PrivateDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateDebugAPIRequest.Unmarshal(m, b)
}
func (m *PrivateDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDebugAPIRequest.Merge(m, src)
}
func (m *PrivateDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateDebugAPIRequest.Size(m)
}
func (m *PrivateDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDebugAPIRequest proto.InternalMessageInfo

func (m *PrivateDebugAPIRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetTxIndex() int32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *PrivateDebugAPIRequest) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetKeyStart() []byte {
	if m != nil {
		return m.KeyStart
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetMaxResult() int32 {
	if m != nil {
		return m.MaxResult
	}
	return 0
}

func (m *PrivateDebugAPIRequest) GetStartHash() []byte {
	if m != nil {
		return m.StartHash
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetEndHash() *wrappers.BytesValue {
	if m != nil {
		return m.EndHash
	}
	return nil
}

func (m *PrivateDebugAPIRequest) GetStartNum() uint64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *PrivateDebugAPIRequest) GetEndNum() *wrappers.UInt64Value {
	if m != nil {
		return m.EndNum
	}
	return nil
}

type PrivateDebugAPIReply struct {
	Preimage             []byte   `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	BadBlockArgs         *any.Any `protobuf:"bytes,2,opt,name=bad_block_args,json=badBlockArgs,proto3" json:"bad_block_args,omitempty"`
	StorageRangeResult   *any.Any `protobuf:"bytes,3,opt,name=storage_range_result,json=storageRangeResult,proto3" json:"storage_range_result,omitempty"`
	Accounts             *any.Any `protobuf:"bytes,4,opt,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateDebugAPIReply) Reset()         { *m = PrivateDebugAPIReply{} }
func (m *PrivateDebugAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateDebugAPIReply) ProtoMessage()    {}
func (*PrivateDebugAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{9}
}

func (m *PrivateDebugAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateDebugAPIReply.Unmarshal(m, b)
}
func (m *PrivateDebugAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateDebugAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateDebugAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateDebugAPIReply.Merge(m, src)
}
func (m *PrivateDebugAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateDebugAPIReply.Size(m)
}
func (m *PrivateDebugAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateDebugAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateDebugAPIReply proto.InternalMessageInfo

func (m *PrivateDebugAPIReply) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *PrivateDebugAPIReply) GetBadBlockArgs() *any.Any {
	if m != nil {
		return m.BadBlockArgs
	}
	return nil
}

func (m *PrivateDebugAPIReply) GetStorageRangeResult() *any.Any {
	if m != nil {
		return m.StorageRangeResult
	}
	return nil
}

func (m *PrivateDebugAPIReply) GetAccounts() *any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicEthereumAPIReply)(nil), "protos.PublicEthereumAPIReply")
	proto.RegisterType((*PublicMinerAPIRequest)(nil), "protos.PublicMinerAPIRequest")
	proto.RegisterType((*PublicMinerAPIReply)(nil), "protos.PublicMinerAPIReply")
	proto.RegisterType((*PrivateMinerAPIRequest)(nil), "protos.PrivateMinerAPIRequest")
	proto.RegisterType((*PrivateMinerAPIReply)(nil), "protos.PrivateMinerAPIReply")
	proto.RegisterType((*PrivateAdminAPIRequest)(nil), "protos.PrivateAdminAPIRequest")
	proto.RegisterType((*PrivateAdminAPIReply)(nil), "protos.PrivateAdminAPIReply")
	proto.RegisterType((*PublicDebugAPIRequest)(nil), "protos.PublicDebugAPIRequest")
	proto.RegisterType((*PrivateDebugAPIRequest)(nil), "protos.PrivateDebugAPIRequest")
	proto.RegisterType((*PrivateDebugAPIReply)(nil), "protos.PrivateDebugAPIReply")
}

func init() { proto.RegisterFile("cpc.proto", fileDescriptor_423c627df4983bea) }

var fileDescriptor_423c627df4983bea = []byte{
	// 1333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x98, 0xcf, 0x6f, 0x1b, 0xc5,
	0x17, 0xc0, 0xb5, 0x8e, 0x93, 0xac, 0x5f, 0xac, 0xf4, 0xfb, 0x9d, 0xa6, 0xc5, 0xb1, 0x9d, 0x34,
	0x99, 0x16, 0x91, 0x86, 0xca, 0x6e, 0x53, 0xda, 0x4a, 0x11, 0x17, 0xa7, 0x0d, 0x69, 0x0e, 0x0d,
	0xd1, 0x46, 0x80, 0xc4, 0x01, 0x33, 0xbb, 0x3b, 0xd9, 0x8c, 0xec, 0xfd, 0xc1, 0xce, 0x6c, 0x6b,
	0x1f, 0xe9, 0x89, 0x03, 0x37, 0xfe, 0x01, 0x6e, 0xfc, 0x1b, 0xfc, 0x09, 0x48, 0xfc, 0x0b, 0x1c,
	0xb8, 0x71, 0xe5, 0x82, 0x40, 0x33, 0xb3, 0xbb, 0x71, 0xd6, 0x76, 0x1a, 0xc5, 0x70, 0xb1, 0x3d,
	0x33, 0xef, 0xbd, 0xcf, 0xfb, 0x31, 0xf3, 0x66, 0x64, 0xa8, 0x38, 0x91, 0xd3, 0x8a, 0xe2, 0x50,
	0x84, 0x68, 0x41, 0x7d, 0xf1, 0x7a, 0xc3, 0x0b, 0x43, 0xaf, 0x4f, 0xdb, 0x6a, 0x68, 0x27, 0xa7,
	0x6d, 0xea, 0x47, 0x62, 0xa8, 0x85, 0xea, 0xcd, 0x74, 0x91, 0x44, 0xac, 0x4d, 0x82, 0x20, 0x14,
	0x44, 0xb0, 0x30, 0xe0, 0xe9, 0xea, 0x6a, 0x51, 0x95, 0x04, 0x99, 0xe2, 0x7a, 0x71, 0xe9, 0x4d,
	0x4c, 0xa2, 0x88, 0xc6, 0xa9, 0x2a, 0xfe, 0xd6, 0x80, 0xdb, 0xc7, 0x89, 0xdd, 0x67, 0xce, 0xbe,
	0x38, 0xa3, 0x31, 0x4d, 0xfc, 0xce, 0xf1, 0xa1, 0x45, 0xa3, 0xfe, 0x10, 0x3d, 0x81, 0x45, 0xe2,
	0xba, 0x31, 0xe5, 0xbc, 0x66, 0x6c, 0x18, 0x5b, 0x4b, 0x3b, 0x8d, 0x96, 0x36, 0xd6, 0xca, 0x8c,
	0xb5, 0xf6, 0x86, 0x82, 0xf2, 0xcf, 0x49, 0x3f, 0xa1, 0x56, 0x26, 0x8b, 0x1e, 0x42, 0x39, 0x26,
	0x82, 0xd6, 0x4a, 0x4a, 0xa7, 0x39, 0xa6, 0xf3, 0xd9, 0x61, 0x20, 0x9e, 0x7e, 0xa4, 0x95, 0x94,
	0x24, 0xfe, 0xc3, 0x80, 0x5b, 0xda, 0x87, 0x57, 0x2c, 0xa0, 0xb1, 0x72, 0xe0, 0x9b, 0x84, 0x72,
	0x81, 0x3e, 0x86, 0x25, 0xbb, 0x1f, 0x3a, 0xbd, 0x6e, 0x10, 0x06, 0x0e, 0xbd, 0x8a, 0x1b, 0xa0,
	0xe4, 0x8f, 0xa4, 0x38, 0x7a, 0x06, 0x26, 0x0f, 0xfb, 0x89, 0xcc, 0x54, 0xea, 0xcd, 0xa5, 0xaa,
	0xb9, 0x30, 0x7a, 0x0c, 0x0b, 0x2e, 0xf3, 0x28, 0x17, 0xb5, 0xb9, 0x77, 0xab, 0xa5, 0xa2, 0xa8,
	0x0e, 0xe6, 0x19, 0xe1, 0x67, 0x2a, 0xf6, 0xf2, 0x86, 0xb1, 0x55, 0xb6, 0xf2, 0x31, 0x5a, 0x86,
	0x12, 0x73, 0x6b, 0xf3, 0x1b, 0xc6, 0x56, 0xd5, 0x2a, 0x31, 0x17, 0xbf, 0x35, 0xe0, 0x66, 0x31,
	0x62, 0x99, 0xf2, 0x1d, 0x58, 0xf0, 0x59, 0xc0, 0x02, 0x2f, 0x0d, 0xb5, 0x3e, 0x0e, 0x0e, 0xc3,
	0x7e, 0xca, 0xd5, 0x92, 0x68, 0x13, 0xaa, 0x8c, 0x77, 0x89, 0xe3, 0xd0, 0x48, 0x48, 0x4d, 0x19,
	0xa9, 0x69, 0x2d, 0x31, 0xde, 0xc9, 0xa6, 0xd0, 0x0a, 0xcc, 0xbf, 0x09, 0xe3, 0x1e, 0xaf, 0xcd,
	0x6d, 0xcc, 0x6d, 0x55, 0x2c, 0x3d, 0xc0, 0x3f, 0xca, 0xd2, 0xc7, 0xec, 0x35, 0x11, 0xb4, 0x98,
	0xf7, 0x27, 0xb0, 0x28, 0xce, 0x62, 0x4a, 0xdc, 0xe9, 0xa5, 0x3f, 0x0c, 0xc4, 0xe3, 0x9d, 0xb4,
	0xf4, 0xa9, 0xac, 0xe4, 0xd0, 0x81, 0x88, 0x89, 0xf2, 0xa1, 0x62, 0xe9, 0x01, 0x6a, 0x40, 0xc5,
	0x23, 0xbc, 0x1b, 0xc5, 0xcc, 0xa1, 0x2a, 0xa1, 0x55, 0xcb, 0xf4, 0x08, 0x3f, 0x96, 0x63, 0xd4,
	0x84, 0x0a, 0x95, 0x1b, 0xcf, 0x26, 0x5c, 0xa7, 0xad, 0x6a, 0x9d, 0x4f, 0xe0, 0x03, 0x58, 0x19,
	0xf3, 0x50, 0xe6, 0xe9, 0x26, 0xcc, 0x33, 0xde, 0x0d, 0x7b, 0xca, 0x3b, 0xd3, 0x2a, 0x33, 0xfe,
	0x69, 0xef, 0x42, 0x01, 0x4a, 0x17, 0x0b, 0x80, 0x1f, 0xe4, 0xa1, 0x76, 0x5c, 0x9f, 0x05, 0x23,
	0xa1, 0x22, 0x28, 0x9f, 0xb2, 0xbe, 0xde, 0x5b, 0x15, 0x4b, 0xfd, 0xc6, 0x1f, 0xe6, 0xd8, 0x73,
	0xe9, 0x69, 0x58, 0xbc, 0x9b, 0x6d, 0xde, 0x17, 0xd4, 0x4e, 0xbc, 0x11, 0xcb, 0x9b, 0x50, 0x4d,
	0x37, 0x6f, 0xe2, 0xdb, 0x34, 0x56, 0x4a, 0x73, 0x96, 0xde, 0xd0, 0x47, 0x6a, 0x0a, 0xff, 0x59,
	0xca, 0xfd, 0x2a, 0x6a, 0x23, 0x28, 0x4b, 0xef, 0x95, 0x56, 0xd5, 0x52, 0xbf, 0xd1, 0x1a, 0xe8,
	0xed, 0xdd, 0x55, 0x2b, 0x25, 0x9d, 0x2d, 0x35, 0xf3, 0x52, 0x2e, 0xaf, 0x82, 0x29, 0x06, 0x5d,
	0x16, 0xb8, 0x74, 0xa0, 0xf2, 0x3c, 0x6f, 0x2d, 0x8a, 0xc1, 0xa1, 0x1c, 0xa2, 0xfb, 0xf0, 0x3f,
	0x27, 0x0c, 0x44, 0x4c, 0x1c, 0xd1, 0xcd, 0x0e, 0xb5, 0xce, 0xf6, 0x8d, 0x6c, 0xbe, 0x93, 0x9e,
	0xdf, 0x06, 0x54, 0x7a, 0x74, 0xd8, 0xe5, 0x82, 0xc4, 0x22, 0xdd, 0xb2, 0x66, 0x8f, 0x0e, 0x4f,
	0xe4, 0x58, 0x7a, 0xe0, 0x93, 0x41, 0x37, 0xa6, 0x3c, 0xe9, 0x8b, 0xda, 0x82, 0x82, 0x54, 0x7c,
	0x32, 0xb0, 0xd4, 0x84, 0x5c, 0x56, 0x7a, 0xda, 0xc1, 0x45, 0xed, 0xa0, 0x9a, 0x51, 0x0e, 0x3e,
	0x05, 0x93, 0x06, 0xae, 0x5e, 0x34, 0xaf, 0xd0, 0x52, 0x68, 0xe0, 0x2a, 0xbd, 0x06, 0x68, 0x23,
	0x32, 0x93, 0xb5, 0x8a, 0x2e, 0xad, 0x9a, 0x38, 0x4a, 0x7c, 0xb9, 0x57, 0xa5, 0x51, 0xb9, 0x04,
	0x57, 0x68, 0x39, 0x0b, 0x34, 0x70, 0x8f, 0x12, 0x1f, 0xff, 0x6e, 0xe4, 0x45, 0x3e, 0x4f, 0xbd,
	0x2c, 0x72, 0x1d, 0xcc, 0x28, 0xa6, 0xcc, 0x27, 0x1e, 0x4d, 0x93, 0x9f, 0x8f, 0xd1, 0x2e, 0x2c,
	0xdb, 0xc4, 0xed, 0xea, 0x22, 0x90, 0xd8, 0xe3, 0x69, 0x5f, 0x59, 0x19, 0x43, 0x76, 0x82, 0xa1,
	0x55, 0xb5, 0x89, 0xbb, 0x27, 0x45, 0x3b, 0xb1, 0xc7, 0xd1, 0x27, 0xb0, 0xc2, 0x45, 0x18, 0x13,
	0x8f, 0x76, 0x63, 0x12, 0xc8, 0x4f, 0x9d, 0xc4, 0xb9, 0x4b, 0x2c, 0xa0, 0x54, 0xc3, 0x92, 0x0a,
	0x69, 0x8e, 0x1f, 0x82, 0x49, 0x1c, 0x27, 0x4c, 0x02, 0xa1, 0x4b, 0x38, 0x4d, 0x37, 0x97, 0xda,
	0xf9, 0xa5, 0x04, 0xff, 0x1f, 0xeb, 0xf1, 0x88, 0x41, 0x65, 0x3f, 0x3b, 0x68, 0xe8, 0xf6, 0x98,
	0x89, 0x7d, 0x79, 0xfb, 0xd4, 0xd7, 0xf5, 0x04, 0x6f, 0x4d, 0xbe, 0x23, 0xf0, 0xbd, 0xb7, 0xbf,
	0xfe, 0xf6, 0x43, 0x69, 0x1d, 0xaf, 0xb6, 0x5f, 0x3f, 0x92, 0x97, 0x13, 0x6f, 0x47, 0x4a, 0xb0,
	0x9d, 0x9f, 0xe1, 0x5d, 0x63, 0x1b, 0x79, 0x60, 0x3e, 0x0f, 0x59, 0x30, 0x13, 0xe9, 0xae, 0x22,
	0xad, 0xe1, 0x5a, 0x91, 0xe4, 0xa4, 0x96, 0x53, 0xd0, 0xcb, 0xac, 0xe7, 0xfe, 0xeb, 0xa0, 0xac,
	0x99, 0xec, 0x1a, 0xdb, 0x3b, 0x3f, 0xcf, 0xc1, 0xf2, 0xc5, 0x06, 0x8e, 0xbe, 0x86, 0x85, 0x57,
	0xba, 0x23, 0x4f, 0x23, 0x37, 0x2e, 0x92, 0x2f, 0xb4, 0x34, 0xbc, 0xa9, 0xb0, 0x0d, 0x7c, 0xbb,
	0x88, 0xd5, 0x6d, 0x5e, 0x46, 0x17, 0x02, 0x9c, 0x24, 0xb6, 0xcf, 0xc4, 0x17, 0x61, 0xdc, 0x43,
	0x6b, 0xd3, 0xac, 0xa9, 0xfe, 0x71, 0x39, 0xec, 0x7d, 0x05, 0xbb, 0x83, 0xeb, 0x45, 0x18, 0xcf,
	0xed, 0x4b, 0xa0, 0x0d, 0x8b, 0x07, 0x54, 0xd3, 0xae, 0x15, 0x13, 0x56, 0x98, 0x26, 0x7e, 0xaf,
	0x88, 0xf1, 0x68, 0xce, 0x78, 0x03, 0xcb, 0x3a, 0xa8, 0xbc, 0x70, 0xb3, 0x04, 0x76, 0x5f, 0x11,
	0xef, 0xe2, 0xf5, 0xc9, 0x81, 0xbd, 0x1c, 0x29, 0xe1, 0x4f, 0xf3, 0x70, 0xa3, 0x70, 0xb9, 0xa0,
	0x33, 0x98, 0xd7, 0x7d, 0xee, 0x7c, 0x93, 0x4c, 0xbc, 0x20, 0xeb, 0xcd, 0xa9, 0xeb, 0x53, 0x6a,
	0xa9, 0xc5, 0xda, 0xaa, 0x6b, 0xc9, 0xb0, 0xbf, 0x82, 0xf2, 0x89, 0x08, 0xa3, 0xa9, 0x79, 0xbd,
	0x1c, 0xb0, 0xa1, 0x00, 0x75, 0x7c, 0x6b, 0x02, 0x20, 0x8c, 0xa4, 0xfd, 0x00, 0xcc, 0x13, 0x2a,
	0xf6, 0xd5, 0x05, 0x3c, 0x5b, 0x30, 0x13, 0x8e, 0x78, 0xc6, 0x4a, 0x01, 0x92, 0x27, 0x60, 0xe9,
	0x84, 0x8a, 0x83, 0xec, 0x5a, 0x9f, 0x0d, 0xf9, 0x81, 0x42, 0x6e, 0xe2, 0xe6, 0x24, 0x64, 0xc6,
	0x90, 0xd4, 0xd7, 0x50, 0x95, 0x51, 0xe6, 0x6d, 0x6c, 0x36, 0xec, 0x96, 0xc2, 0x62, 0xbc, 0x36,
	0x31, 0xd2, 0xd1, 0x86, 0xd6, 0x87, 0xa5, 0x03, 0x2a, 0xde, 0xd9, 0x6a, 0x66, 0x88, 0x72, 0x74,
	0xa7, 0xfe, 0x65, 0xe4, 0x3b, 0x35, 0x7b, 0x8f, 0xc8, 0x7c, 0xef, 0x0f, 0xa2, 0x30, 0x16, 0xcf,
	0xcf, 0x08, 0x0b, 0xc6, 0x02, 0x2f, 0xbc, 0x72, 0xc6, 0x3c, 0xb9, 0xf0, 0xae, 0xb9, 0xc4, 0x13,
	0x7a, 0xce, 0x48, 0xab, 0x7c, 0xe8, 0xff, 0xf7, 0x54, 0xe6, 0x8f, 0x52, 0x77, 0x06, 0x59, 0xaf,
	0xcd, 0x2e, 0x6a, 0x74, 0x0a, 0x95, 0x17, 0x89, 0x1f, 0xa9, 0xcb, 0xb5, 0xd8, 0x2f, 0x0a, 0x0f,
	0xa9, 0xfa, 0xc4, 0xdb, 0x71, 0xfa, 0xc5, 0xe5, 0x66, 0x76, 0x25, 0xf9, 0xef, 0x72, 0x9e, 0xf9,
	0x9c, 0x1d, 0x80, 0x79, 0x9c, 0xbd, 0x07, 0x8a, 0x09, 0x28, 0xb2, 0x9b, 0x53, 0xd7, 0x2f, 0x3f,
	0x59, 0xd9, 0x83, 0x43, 0x9f, 0xe4, 0xea, 0x01, 0x15, 0x7b, 0xe9, 0x53, 0x82, 0xbf, 0x93, 0x39,
	0x39, 0xde, 0xe9, 0x7b, 0xdb, 0x1b, 0x31, 0x2e, 0x79, 0x31, 0x2c, 0x9f, 0x8c, 0xbc, 0x3a, 0x3a,
	0xe2, 0x9a, 0xc4, 0x6d, 0x45, 0xbc, 0x87, 0xef, 0x4c, 0xea, 0x51, 0x23, 0xe6, 0x25, 0xf3, 0x7b,
	0x03, 0x1a, 0x07, 0x54, 0xbc, 0x0a, 0x5d, 0x76, 0xca, 0xa8, 0xdb, 0x49, 0x5f, 0x2e, 0x7b, 0x43,
	0xfd, 0x4e, 0xbe, 0xa6, 0x07, 0xcf, 0x94, 0x07, 0x8f, 0xf0, 0x83, 0x49, 0x31, 0x4f, 0x63, 0x49,
	0x77, 0xbe, 0x33, 0x60, 0x75, 0xa2, 0x3b, 0xea, 0x35, 0x7a, 0x3d, 0x67, 0x9e, 0x28, 0x67, 0xda,
	0x78, 0xfb, 0x6a, 0xce, 0x48, 0xd2, 0xae, 0xb1, 0xbd, 0xf7, 0x00, 0xb0, 0xcd, 0x84, 0x9d, 0x38,
	0x3d, 0x2a, 0x5a, 0x61, 0xec, 0xb5, 0x9c, 0xc8, 0x91, 0xe7, 0xa2, 0xa5, 0x3f, 0xb5, 0x27, 0x5f,
	0xa6, 0xff, 0x21, 0xd8, 0xfa, 0xfb, 0xf1, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa7, 0x7f, 0x05,
	0xbf, 0x5f, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicEthereumAPIClient is the client API for PublicEthereumAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicEthereumAPIClient interface {
	// Etherbase is the address that mining rewards will be send to
	Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	// Coinbase is the address that mining rewards will be send to (alias for Etherbase)
	Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	// Hashrate returns the POW hashrate
	Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
}

type publicEthereumAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicEthereumAPIClient(cc *grpc.ClientConn) PublicEthereumAPIClient {
	return &publicEthereumAPIClient{cc}
}

func (c *publicEthereumAPIClient) Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicEthereumAPI/Etherbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicEthereumAPI/Coinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicEthereumAPI/Hashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicEthereumAPIServer is the server API for PublicEthereumAPI service.
type PublicEthereumAPIServer interface {
	// Etherbase is the address that mining rewards will be send to
	Etherbase(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	// Coinbase is the address that mining rewards will be send to (alias for Etherbase)
	Coinbase(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	// Hashrate returns the POW hashrate
	Hashrate(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
}

func RegisterPublicEthereumAPIServer(s *grpc.Server, srv PublicEthereumAPIServer) {
	s.RegisterService(&_PublicEthereumAPI_serviceDesc, srv)
}

func _PublicEthereumAPI_Etherbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Etherbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicEthereumAPI/Etherbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Etherbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_Coinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Coinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicEthereumAPI/Coinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Coinbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_Hashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Hashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicEthereumAPI/Hashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Hashrate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicEthereumAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PublicEthereumAPI",
	HandlerType: (*PublicEthereumAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Etherbase",
			Handler:    _PublicEthereumAPI_Etherbase_Handler,
		},
		{
			MethodName: "Coinbase",
			Handler:    _PublicEthereumAPI_Coinbase_Handler,
		},
		{
			MethodName: "Hashrate",
			Handler:    _PublicEthereumAPI_Hashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicMinerAPIClient is the client API for PublicMinerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicMinerAPIClient interface {
	// Mining returns an indication if this node is currently mining.
	Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
}

type publicMinerAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicMinerAPIClient(cc *grpc.ClientConn) PublicMinerAPIClient {
	return &publicMinerAPIClient{cc}
}

func (c *publicMinerAPIClient) Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicMinerAPI/Mining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicMinerAPI/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicMinerAPI/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PublicMinerAPI/SubmitHashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicMinerAPIServer is the server API for PublicMinerAPI service.
type PublicMinerAPIServer interface {
	// Mining returns an indication if this node is currently mining.
	Mining(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
}

func RegisterPublicMinerAPIServer(s *grpc.Server, srv PublicMinerAPIServer) {
	s.RegisterService(&_PublicMinerAPI_serviceDesc, srv)
}

func _PublicMinerAPI_Mining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).Mining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicMinerAPI/Mining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).Mining(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicMinerAPI/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicMinerAPI/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).GetWork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitHashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicMinerAPI/SubmitHashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicMinerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PublicMinerAPI",
	HandlerType: (*PublicMinerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mining",
			Handler:    _PublicMinerAPI_Mining_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _PublicMinerAPI_SubmitWork_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _PublicMinerAPI_GetWork_Handler,
		},
		{
			MethodName: "SubmitHashrate",
			Handler:    _PublicMinerAPI_SubmitHashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PrivateMinerAPIClient is the client API for PrivateMinerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateMinerAPIClient interface {
	// Start the miner with the given number of threads. If threads is nil the number
	// of workers started is equal to the number of logical CPUs that are usable by
	// this process. If mining is already running, this method adjust the number of
	// threads allowed to use.
	Start(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
	// Stop the miner
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
	// SetExtra sets the extra data string that is included when this miner mines a block.
	SetExtra(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
	// SetGasPrice sets the minimum accepted gas price for the miner.
	SetGasPrice(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
	// SetEtherbase sets the etherbase of the miner
	SetEtherbase(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
	// GetHashrate returns the current hashrate of the miner.
	GetHashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error)
}

type privateMinerAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateMinerAPIClient(cc *grpc.ClientConn) PrivateMinerAPIClient {
	return &privateMinerAPIClient{cc}
}

func (c *privateMinerAPIClient) Start(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetExtra(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/SetExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetGasPrice(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/SetGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetEtherbase(ctx context.Context, in *PrivateMinerAPIRequest, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/SetEtherbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) GetHashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateMinerAPIReply, error) {
	out := new(PrivateMinerAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateMinerAPI/GetHashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateMinerAPIServer is the server API for PrivateMinerAPI service.
type PrivateMinerAPIServer interface {
	// Start the miner with the given number of threads. If threads is nil the number
	// of workers started is equal to the number of logical CPUs that are usable by
	// this process. If mining is already running, this method adjust the number of
	// threads allowed to use.
	Start(context.Context, *PrivateMinerAPIRequest) (*PrivateMinerAPIReply, error)
	// Stop the miner
	Stop(context.Context, *empty.Empty) (*PrivateMinerAPIReply, error)
	// SetExtra sets the extra data string that is included when this miner mines a block.
	SetExtra(context.Context, *PrivateMinerAPIRequest) (*PrivateMinerAPIReply, error)
	// SetGasPrice sets the minimum accepted gas price for the miner.
	SetGasPrice(context.Context, *PrivateMinerAPIRequest) (*PrivateMinerAPIReply, error)
	// SetEtherbase sets the etherbase of the miner
	SetEtherbase(context.Context, *PrivateMinerAPIRequest) (*PrivateMinerAPIReply, error)
	// GetHashrate returns the current hashrate of the miner.
	GetHashrate(context.Context, *empty.Empty) (*PrivateMinerAPIReply, error)
}

func RegisterPrivateMinerAPIServer(s *grpc.Server, srv PrivateMinerAPIServer) {
	s.RegisterService(&_PrivateMinerAPI_serviceDesc, srv)
}

func _PrivateMinerAPI_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).Start(ctx, req.(*PrivateMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMinerAPI_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMinerAPI_SetExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).SetExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/SetExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).SetExtra(ctx, req.(*PrivateMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMinerAPI_SetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).SetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/SetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).SetGasPrice(ctx, req.(*PrivateMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMinerAPI_SetEtherbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).SetEtherbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/SetEtherbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).SetEtherbase(ctx, req.(*PrivateMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateMinerAPI_GetHashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateMinerAPIServer).GetHashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateMinerAPI/GetHashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateMinerAPIServer).GetHashrate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateMinerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PrivateMinerAPI",
	HandlerType: (*PrivateMinerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _PrivateMinerAPI_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _PrivateMinerAPI_Stop_Handler,
		},
		{
			MethodName: "SetExtra",
			Handler:    _PrivateMinerAPI_SetExtra_Handler,
		},
		{
			MethodName: "SetGasPrice",
			Handler:    _PrivateMinerAPI_SetGasPrice_Handler,
		},
		{
			MethodName: "SetEtherbase",
			Handler:    _PrivateMinerAPI_SetEtherbase_Handler,
		},
		{
			MethodName: "GetHashrate",
			Handler:    _PrivateMinerAPI_GetHashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PrivateAdminAPIClient is the client API for PrivateAdminAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateAdminAPIClient interface {
	// ExportChain exports the current blockchain into a local file.
	ExportChain(ctx context.Context, in *PrivateAdminAPIRequest, opts ...grpc.CallOption) (*PrivateAdminAPIReply, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(ctx context.Context, in *PrivateAdminAPIRequest, opts ...grpc.CallOption) (*PrivateAdminAPIReply, error)
}

type privateAdminAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateAdminAPIClient(cc *grpc.ClientConn) PrivateAdminAPIClient {
	return &privateAdminAPIClient{cc}
}

func (c *privateAdminAPIClient) ExportChain(ctx context.Context, in *PrivateAdminAPIRequest, opts ...grpc.CallOption) (*PrivateAdminAPIReply, error) {
	out := new(PrivateAdminAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateAdminAPI/ExportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAdminAPIClient) ImportChain(ctx context.Context, in *PrivateAdminAPIRequest, opts ...grpc.CallOption) (*PrivateAdminAPIReply, error) {
	out := new(PrivateAdminAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateAdminAPI/ImportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateAdminAPIServer is the server API for PrivateAdminAPI service.
type PrivateAdminAPIServer interface {
	// ExportChain exports the current blockchain into a local file.
	ExportChain(context.Context, *PrivateAdminAPIRequest) (*PrivateAdminAPIReply, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(context.Context, *PrivateAdminAPIRequest) (*PrivateAdminAPIReply, error)
}

func RegisterPrivateAdminAPIServer(s *grpc.Server, srv PrivateAdminAPIServer) {
	s.RegisterService(&_PrivateAdminAPI_serviceDesc, srv)
}

func _PrivateAdminAPI_ExportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAdminAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAdminAPIServer).ExportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateAdminAPI/ExportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAdminAPIServer).ExportChain(ctx, req.(*PrivateAdminAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAdminAPI_ImportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAdminAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAdminAPIServer).ImportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateAdminAPI/ImportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAdminAPIServer).ImportChain(ctx, req.(*PrivateAdminAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateAdminAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PrivateAdminAPI",
	HandlerType: (*PrivateAdminAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportChain",
			Handler:    _PrivateAdminAPI_ExportChain_Handler,
		},
		{
			MethodName: "ImportChain",
			Handler:    _PrivateAdminAPI_ImportChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicDebugAPIClient is the client API for PublicDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicDebugAPIClient interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
}

type publicDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicDebugAPIClient(cc *grpc.ClientConn) PublicDebugAPIClient {
	return &publicDebugAPIClient{cc}
}

func (c *publicDebugAPIClient) DumpBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/protos.PublicDebugAPI/DumpBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicDebugAPIServer is the server API for PublicDebugAPI service.
type PublicDebugAPIServer interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(context.Context, *PublicDebugAPIRequest) (*any.Any, error)
}

func RegisterPublicDebugAPIServer(s *grpc.Server, srv PublicDebugAPIServer) {
	s.RegisterService(&_PublicDebugAPI_serviceDesc, srv)
}

func _PublicDebugAPI_DumpBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDebugAPIServer).DumpBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PublicDebugAPI/DumpBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDebugAPIServer).DumpBlock(ctx, req.(*PublicDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PublicDebugAPI",
	HandlerType: (*PublicDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpBlock",
			Handler:    _PublicDebugAPI_DumpBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PrivateDebugAPIClient is the client API for PrivateDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateDebugAPIClient interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
	// StorageRangeAt returns the storage at the given block height and transaction index.
	StorageRangeAt(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
}

type privateDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateDebugAPIClient(cc *grpc.ClientConn) PrivateDebugAPIClient {
	return &privateDebugAPIClient{cc}
}

func (c *privateDebugAPIClient) Preimage(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*PrivateDebugAPIReply, error) {
	out := new(PrivateDebugAPIReply)
	err := c.cc.Invoke(ctx, "/protos.PrivateDebugAPI/Preimage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetBadBlocks(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/protos.PrivateDebugAPI/GetBadBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) StorageRangeAt(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/protos.PrivateDebugAPI/StorageRangeAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetModifiedAccountsByNumber(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/protos.PrivateDebugAPI/GetModifiedAccountsByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetModifiedAccountsByHash(ctx context.Context, in *PrivateDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/protos.PrivateDebugAPI/GetModifiedAccountsByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateDebugAPIServer is the server API for PrivateDebugAPI service.
type PrivateDebugAPIServer interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(context.Context, *PrivateDebugAPIRequest) (*PrivateDebugAPIReply, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(context.Context, *PrivateDebugAPIRequest) (*any.Any, error)
	// StorageRangeAt returns the storage at the given block height and transaction index.
	StorageRangeAt(context.Context, *PrivateDebugAPIRequest) (*any.Any, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(context.Context, *PrivateDebugAPIRequest) (*any.Any, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(context.Context, *PrivateDebugAPIRequest) (*any.Any, error)
}

func RegisterPrivateDebugAPIServer(s *grpc.Server, srv PrivateDebugAPIServer) {
	s.RegisterService(&_PrivateDebugAPI_serviceDesc, srv)
}

func _PrivateDebugAPI_Preimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).Preimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateDebugAPI/Preimage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).Preimage(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_GetBadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).GetBadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateDebugAPI/GetBadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).GetBadBlocks(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_StorageRangeAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).StorageRangeAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateDebugAPI/StorageRangeAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).StorageRangeAt(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_GetModifiedAccountsByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).GetModifiedAccountsByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateDebugAPI/GetModifiedAccountsByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).GetModifiedAccountsByNumber(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateDebugAPI_GetModifiedAccountsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateDebugAPIServer).GetModifiedAccountsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.PrivateDebugAPI/GetModifiedAccountsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateDebugAPIServer).GetModifiedAccountsByHash(ctx, req.(*PrivateDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.PrivateDebugAPI",
	HandlerType: (*PrivateDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preimage",
			Handler:    _PrivateDebugAPI_Preimage_Handler,
		},
		{
			MethodName: "GetBadBlocks",
			Handler:    _PrivateDebugAPI_GetBadBlocks_Handler,
		},
		{
			MethodName: "StorageRangeAt",
			Handler:    _PrivateDebugAPI_StorageRangeAt_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByNumber",
			Handler:    _PrivateDebugAPI_GetModifiedAccountsByNumber_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByHash",
			Handler:    _PrivateDebugAPI_GetModifiedAccountsByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}
