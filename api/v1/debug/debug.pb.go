// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/debug/debug.proto

package debugpb

import (
	commonpb "bitbucket.org/cpchain/chain/api/v1/commonpb"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// PreimageValue the preimage for a sha3 hash
type PreimageValue struct {
	Preimage             []byte   `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreimageValue) Reset()         { *m = PreimageValue{} }
func (m *PreimageValue) String() string { return proto.CompactTextString(m) }
func (*PreimageValue) ProtoMessage()    {}
func (*PreimageValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c6fe4ef7af2c197, []int{0}
}

func (m *PreimageValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreimageValue.Unmarshal(m, b)
}
func (m *PreimageValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreimageValue.Marshal(b, m, deterministic)
}
func (m *PreimageValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreimageValue.Merge(m, src)
}
func (m *PreimageValue) XXX_Size() int {
	return xxx_messageInfo_PreimageValue.Size(m)
}
func (m *PreimageValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PreimageValue.DiscardUnknown(m)
}

var xxx_messageInfo_PreimageValue proto.InternalMessageInfo

func (m *PreimageValue) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

// DebugManagerRequest DebugManager request arguments
type DebugManagerRequest struct {
	BlockHash            string                `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex              int32                 `protobuf:"varint,2,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	ContractAddress      string                `protobuf:"bytes,3,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	KeyStart             []byte                `protobuf:"bytes,4,opt,name=key_start,json=keyStart,proto3" json:"key_start,omitempty"`
	MaxResult            int32                 `protobuf:"varint,5,opt,name=max_result,json=maxResult,proto3" json:"max_result,omitempty"`
	StartNumber          uint64                `protobuf:"varint,6,opt,name=start_number,json=startNumber,proto3" json:"start_number,omitempty"`
	EndNumber            *wrappers.UInt64Value `protobuf:"bytes,7,opt,name=end_number,json=endNumber,proto3" json:"end_number,omitempty"`
	StartHash            string                `protobuf:"bytes,8,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	EndHash              *wrappers.StringValue `protobuf:"bytes,9,opt,name=end_hash,json=endHash,proto3" json:"end_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DebugManagerRequest) Reset()         { *m = DebugManagerRequest{} }
func (m *DebugManagerRequest) String() string { return proto.CompactTextString(m) }
func (*DebugManagerRequest) ProtoMessage()    {}
func (*DebugManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c6fe4ef7af2c197, []int{1}
}

func (m *DebugManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugManagerRequest.Unmarshal(m, b)
}
func (m *DebugManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugManagerRequest.Marshal(b, m, deterministic)
}
func (m *DebugManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugManagerRequest.Merge(m, src)
}
func (m *DebugManagerRequest) XXX_Size() int {
	return xxx_messageInfo_DebugManagerRequest.Size(m)
}
func (m *DebugManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugManagerRequest proto.InternalMessageInfo

func (m *DebugManagerRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *DebugManagerRequest) GetTxIndex() int32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *DebugManagerRequest) GetContractAddress() string {
	if m != nil {
		return m.ContractAddress
	}
	return ""
}

func (m *DebugManagerRequest) GetKeyStart() []byte {
	if m != nil {
		return m.KeyStart
	}
	return nil
}

func (m *DebugManagerRequest) GetMaxResult() int32 {
	if m != nil {
		return m.MaxResult
	}
	return 0
}

func (m *DebugManagerRequest) GetStartNumber() uint64 {
	if m != nil {
		return m.StartNumber
	}
	return 0
}

func (m *DebugManagerRequest) GetEndNumber() *wrappers.UInt64Value {
	if m != nil {
		return m.EndNumber
	}
	return nil
}

func (m *DebugManagerRequest) GetStartHash() string {
	if m != nil {
		return m.StartHash
	}
	return ""
}

func (m *DebugManagerRequest) GetEndHash() *wrappers.StringValue {
	if m != nil {
		return m.EndHash
	}
	return nil
}

type StorageEntry struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageEntry) Reset()         { *m = StorageEntry{} }
func (m *StorageEntry) String() string { return proto.CompactTextString(m) }
func (*StorageEntry) ProtoMessage()    {}
func (*StorageEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c6fe4ef7af2c197, []int{2}
}

func (m *StorageEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageEntry.Unmarshal(m, b)
}
func (m *StorageEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageEntry.Marshal(b, m, deterministic)
}
func (m *StorageEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageEntry.Merge(m, src)
}
func (m *StorageEntry) XXX_Size() int {
	return xxx_messageInfo_StorageEntry.Size(m)
}
func (m *StorageEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageEntry.DiscardUnknown(m)
}

var xxx_messageInfo_StorageEntry proto.InternalMessageInfo

func (m *StorageEntry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *StorageEntry) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// StorageRangeResult is the result of a debug_storageRangeAt API call.
type StorageRangeResult struct {
	StorageMap           map[string]*StorageEntry `protobuf:"bytes,1,rep,name=storage_map,json=storageMap,proto3" json:"storage_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NextKey              string                   `protobuf:"bytes,2,opt,name=next_key,json=nextKey,proto3" json:"next_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *StorageRangeResult) Reset()         { *m = StorageRangeResult{} }
func (m *StorageRangeResult) String() string { return proto.CompactTextString(m) }
func (*StorageRangeResult) ProtoMessage()    {}
func (*StorageRangeResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c6fe4ef7af2c197, []int{3}
}

func (m *StorageRangeResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StorageRangeResult.Unmarshal(m, b)
}
func (m *StorageRangeResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StorageRangeResult.Marshal(b, m, deterministic)
}
func (m *StorageRangeResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageRangeResult.Merge(m, src)
}
func (m *StorageRangeResult) XXX_Size() int {
	return xxx_messageInfo_StorageRangeResult.Size(m)
}
func (m *StorageRangeResult) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageRangeResult.DiscardUnknown(m)
}

var xxx_messageInfo_StorageRangeResult proto.InternalMessageInfo

func (m *StorageRangeResult) GetStorageMap() map[string]*StorageEntry {
	if m != nil {
		return m.StorageMap
	}
	return nil
}

func (m *StorageRangeResult) GetNextKey() string {
	if m != nil {
		return m.NextKey
	}
	return ""
}

func init() {
	proto.RegisterType((*PreimageValue)(nil), "debug.PreimageValue")
	proto.RegisterType((*DebugManagerRequest)(nil), "debug.DebugManagerRequest")
	proto.RegisterType((*StorageEntry)(nil), "debug.StorageEntry")
	proto.RegisterType((*StorageRangeResult)(nil), "debug.StorageRangeResult")
	proto.RegisterMapType((map[string]*StorageEntry)(nil), "debug.StorageRangeResult.StorageMapEntry")
}

func init() { proto.RegisterFile("v1/debug/debug.proto", fileDescriptor_2c6fe4ef7af2c197) }

var fileDescriptor_2c6fe4ef7af2c197 = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xdd, 0x6e, 0xda, 0x48,
	0x14, 0x96, 0x49, 0x08, 0xf8, 0xc0, 0x6e, 0xb2, 0x13, 0x94, 0x75, 0x0c, 0xd9, 0x25, 0x23, 0xad,
	0x02, 0xd9, 0x15, 0x28, 0x6c, 0x94, 0x5d, 0xd1, 0x2b, 0x50, 0xa2, 0x34, 0xad, 0x52, 0xb5, 0x8e,
	0xda, 0x8b, 0xde, 0x58, 0x03, 0x9e, 0x38, 0x08, 0x3c, 0x76, 0xed, 0x71, 0x0a, 0x37, 0xbd, 0xc8,
	0x2b, 0xf4, 0x79, 0xfa, 0x0c, 0xbd, 0xe8, 0x2b, 0xf4, 0xba, 0xcf, 0x50, 0xcd, 0x8f, 0x29, 0xe4,
	0xa7, 0x6a, 0x6f, 0x2c, 0x9f, 0x6f, 0xce, 0x39, 0xdf, 0x37, 0xe7, 0xcc, 0x07, 0x95, 0xeb, 0x83,
	0xb6, 0x47, 0x07, 0xa9, 0xaf, 0xbe, 0xad, 0x28, 0x0e, 0x79, 0x88, 0xf2, 0x32, 0xb0, 0xad, 0xeb,
	0x83, 0xf6, 0x30, 0x0c, 0x82, 0x90, 0x45, 0x03, 0xfd, 0xa3, 0x12, 0xec, 0xaa, 0x1f, 0x86, 0xfe,
	0x84, 0xb6, 0x65, 0x34, 0x48, 0x2f, 0xdb, 0x34, 0x88, 0xf8, 0x4c, 0x1f, 0xfe, 0x71, 0xfb, 0xf0,
	0x6d, 0x4c, 0xa2, 0x88, 0xc6, 0x89, 0x3e, 0xaf, 0xe9, 0x73, 0x12, 0x8d, 0xda, 0x84, 0xb1, 0x90,
	0x13, 0x3e, 0x0a, 0x99, 0x3e, 0xc5, 0x7f, 0xc3, 0x2f, 0xcf, 0x63, 0x3a, 0x0a, 0x88, 0x4f, 0x5f,
	0x91, 0x49, 0x4a, 0x91, 0x0d, 0xc5, 0x48, 0x03, 0x96, 0x51, 0x37, 0x1a, 0x65, 0x67, 0x1e, 0xe3,
	0x2f, 0x39, 0xd8, 0x3c, 0x16, 0x5a, 0xcf, 0x09, 0x23, 0x3e, 0x8d, 0x1d, 0xfa, 0x26, 0xa5, 0x09,
	0x47, 0x3b, 0x00, 0x83, 0x49, 0x38, 0x1c, 0xbb, 0x57, 0x24, 0xb9, 0x92, 0x55, 0xa6, 0x63, 0x4a,
	0xe4, 0x31, 0x49, 0xae, 0xd0, 0x36, 0x14, 0xf9, 0xd4, 0x1d, 0x31, 0x8f, 0x4e, 0xad, 0x5c, 0xdd,
	0x68, 0xe4, 0x9d, 0x02, 0x9f, 0x9e, 0x89, 0x10, 0x35, 0x61, 0x63, 0x18, 0x32, 0x1e, 0x93, 0x21,
	0x77, 0x89, 0xe7, 0xc5, 0x34, 0x49, 0xac, 0x15, 0x59, 0xbf, 0x9e, 0xe1, 0x3d, 0x05, 0xa3, 0x2a,
	0x98, 0x63, 0x3a, 0x73, 0x13, 0x4e, 0x62, 0x6e, 0xad, 0x2a, 0x65, 0x63, 0x3a, 0xbb, 0x10, 0xb1,
	0x50, 0x10, 0x90, 0xa9, 0x1b, 0xd3, 0x24, 0x9d, 0x70, 0x2b, 0x2f, 0x49, 0xcc, 0x80, 0x4c, 0x1d,
	0x09, 0xa0, 0x5d, 0x28, 0xcb, 0x3a, 0x97, 0xa5, 0xc1, 0x80, 0xc6, 0xd6, 0x5a, 0xdd, 0x68, 0xac,
	0x3a, 0x25, 0x89, 0x3d, 0x93, 0x10, 0x7a, 0x04, 0x40, 0x99, 0x97, 0x25, 0x14, 0xea, 0x46, 0xa3,
	0xd4, 0xa9, 0xb5, 0xd4, 0xec, 0x5a, 0xd9, 0x6c, 0x5b, 0x2f, 0xcf, 0x18, 0x3f, 0x3a, 0x94, 0x93,
	0x72, 0x4c, 0xca, 0x3c, 0x5d, 0xbc, 0x03, 0xa0, 0xfa, 0xcb, 0x01, 0x14, 0xd5, 0x00, 0x24, 0x22,
	0x07, 0xf0, 0x1f, 0x14, 0x45, 0x6f, 0x79, 0x68, 0x3e, 0xd0, 0xf9, 0x82, 0xc7, 0x23, 0xe6, 0xab,
	0xce, 0x05, 0xca, 0x3c, 0x51, 0x88, 0x8f, 0xa0, 0x7c, 0xc1, 0xc3, 0x98, 0xf8, 0xf4, 0x84, 0xf1,
	0x78, 0x86, 0x36, 0x60, 0x65, 0x4c, 0x67, 0x7a, 0xc2, 0xe2, 0x17, 0x55, 0x20, 0x7f, 0x2d, 0x6a,
	0xe4, 0x60, 0x4d, 0x47, 0x05, 0xf8, 0xa3, 0x01, 0x48, 0x17, 0x3a, 0x84, 0xf9, 0x54, 0x8f, 0xe1,
	0x09, 0x94, 0x12, 0x85, 0xba, 0x01, 0x89, 0x2c, 0xa3, 0xbe, 0xd2, 0x28, 0x75, 0x9a, 0x2d, 0xf5,
	0x16, 0xef, 0xe6, 0x67, 0xd0, 0x39, 0x89, 0x24, 0xbd, 0x03, 0xc9, 0x1c, 0x10, 0x4b, 0x65, 0x74,
	0xca, 0x5d, 0xa1, 0x47, 0x71, 0x17, 0x44, 0xfc, 0x94, 0xce, 0x6c, 0x07, 0xd6, 0x6f, 0x55, 0xde,
	0x23, 0xbc, 0xb9, 0x28, 0xbc, 0xd4, 0xd9, 0x5c, 0x56, 0xa1, 0xf8, 0x54, 0x46, 0x37, 0xf7, 0xbf,
	0xd1, 0x21, 0x50, 0x92, 0x2f, 0xef, 0x38, 0x0d, 0x22, 0x1a, 0x23, 0x07, 0x4c, 0xf1, 0xd7, 0x17,
	0x6f, 0x0c, 0x6d, 0xb6, 0xb4, 0x5b, 0x64, 0xa8, 0x56, 0x62, 0x97, 0x33, 0x50, 0xe4, 0x61, 0x7c,
	0xf3, 0xe9, 0xf3, 0xfb, 0x5c, 0x0d, 0xff, 0x2e, 0x6d, 0xf0, 0xcd, 0x85, 0x59, 0x8f, 0xae, 0xb1,
	0xdf, 0xf9, 0xb0, 0x0a, 0xe5, 0xc5, 0xd7, 0x8d, 0x5e, 0x40, 0x31, 0xf3, 0x06, 0x9a, 0xb7, 0x13,
	0x7b, 0xb1, 0x2b, 0x5a, 0xed, 0x92, 0x75, 0xf0, 0xae, 0x24, 0xa9, 0xe2, 0xad, 0x65, 0x92, 0xcc,
	0x3e, 0x5d, 0x63, 0x1f, 0x0d, 0xa1, 0x7c, 0x4a, 0x79, 0x9f, 0x78, 0x92, 0x35, 0x41, 0x5b, 0x77,
	0xde, 0xc1, 0x89, 0xb0, 0xb6, 0x5d, 0x99, 0x5f, 0x49, 0xa7, 0xf6, 0x62, 0x3f, 0xc1, 0x7f, 0x49,
	0x82, 0x3f, 0xb1, 0xbd, 0x4c, 0xe0, 0x2f, 0x74, 0x14, 0x24, 0x11, 0xfc, 0xba, 0xb8, 0xcc, 0x1e,
	0x47, 0xb6, 0xd6, 0x7b, 0x8f, 0x79, 0xed, 0xed, 0x07, 0xf7, 0x8f, 0xf7, 0x24, 0xdf, 0x2e, 0xae,
	0x2d, 0xf3, 0x25, 0x4b, 0xcd, 0x05, 0xe3, 0x8d, 0x01, 0xd5, 0x53, 0xca, 0xcf, 0x43, 0x6f, 0x74,
	0x39, 0xa2, 0x5e, 0x6f, 0x38, 0x0c, 0x53, 0xc6, 0x93, 0xfe, 0x4c, 0xfb, 0xe3, 0x7b, 0xfc, 0xbf,
	0x65, 0x57, 0xd5, 0x46, 0xa7, 0x09, 0x3e, 0x94, 0xbc, 0x2d, 0xdc, 0xbc, 0x73, 0xcf, 0x87, 0x18,
	0x84, 0x88, 0x77, 0xb0, 0x7d, 0xaf, 0x06, 0x69, 0xc1, 0x9f, 0x54, 0xd0, 0x91, 0x0a, 0xfe, 0xc1,
	0x7b, 0x3f, 0xa0, 0x40, 0xf4, 0xef, 0x1a, 0xfb, 0x7d, 0xf3, 0x75, 0x41, 0x66, 0x45, 0x83, 0xc1,
	0x9a, 0x5c, 0xe7, 0xbf, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xac, 0x65, 0xae, 0xf0, 0x05,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugDumperClient is the client API for DebugDumper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugDumperClient interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(ctx context.Context, in *commonpb.BlockNumber, opts ...grpc.CallOption) (*commonpb.Dump, error)
}

type debugDumperClient struct {
	cc *grpc.ClientConn
}

func NewDebugDumperClient(cc *grpc.ClientConn) DebugDumperClient {
	return &debugDumperClient{cc}
}

func (c *debugDumperClient) DumpBlock(ctx context.Context, in *commonpb.BlockNumber, opts ...grpc.CallOption) (*commonpb.Dump, error) {
	out := new(commonpb.Dump)
	err := c.cc.Invoke(ctx, "/debug.DebugDumper/DumpBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugDumperServer is the server API for DebugDumper service.
type DebugDumperServer interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(context.Context, *commonpb.BlockNumber) (*commonpb.Dump, error)
}

func RegisterDebugDumperServer(s *grpc.Server, srv DebugDumperServer) {
	s.RegisterService(&_DebugDumper_serviceDesc, srv)
}

func _DebugDumper_DumpBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugDumperServer).DumpBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugDumper/DumpBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugDumperServer).DumpBlock(ctx, req.(*commonpb.BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugDumper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.DebugDumper",
	HandlerType: (*DebugDumperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpBlock",
			Handler:    _DebugDumper_DumpBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/debug/debug.proto",
}

// DebugManagerClient is the client API for DebugManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugManagerClient interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(ctx context.Context, in *commonpb.Hash, opts ...grpc.CallOption) (*PreimageValue, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.BadBlockArgs, error)
	// StorageRangeAt returns the storage at the giyyven block height and transaction index.
	StorageRangeAt(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*StorageRangeResult, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*commonpb.Addresses, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*commonpb.Addresses, error)
}

type debugManagerClient struct {
	cc *grpc.ClientConn
}

func NewDebugManagerClient(cc *grpc.ClientConn) DebugManagerClient {
	return &debugManagerClient{cc}
}

func (c *debugManagerClient) Preimage(ctx context.Context, in *commonpb.Hash, opts ...grpc.CallOption) (*PreimageValue, error) {
	out := new(PreimageValue)
	err := c.cc.Invoke(ctx, "/debug.DebugManager/Preimage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugManagerClient) GetBadBlocks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.BadBlockArgs, error) {
	out := new(commonpb.BadBlockArgs)
	err := c.cc.Invoke(ctx, "/debug.DebugManager/GetBadBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugManagerClient) StorageRangeAt(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*StorageRangeResult, error) {
	out := new(StorageRangeResult)
	err := c.cc.Invoke(ctx, "/debug.DebugManager/StorageRangeAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugManagerClient) GetModifiedAccountsByNumber(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*commonpb.Addresses, error) {
	out := new(commonpb.Addresses)
	err := c.cc.Invoke(ctx, "/debug.DebugManager/GetModifiedAccountsByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *debugManagerClient) GetModifiedAccountsByHash(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*commonpb.Addresses, error) {
	out := new(commonpb.Addresses)
	err := c.cc.Invoke(ctx, "/debug.DebugManager/GetModifiedAccountsByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugManagerServer is the server API for DebugManager service.
type DebugManagerServer interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(context.Context, *commonpb.Hash) (*PreimageValue, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(context.Context, *empty.Empty) (*commonpb.BadBlockArgs, error)
	// StorageRangeAt returns the storage at the giyyven block height and transaction index.
	StorageRangeAt(context.Context, *DebugManagerRequest) (*StorageRangeResult, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(context.Context, *DebugManagerRequest) (*commonpb.Addresses, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(context.Context, *DebugManagerRequest) (*commonpb.Addresses, error)
}

func RegisterDebugManagerServer(s *grpc.Server, srv DebugManagerServer) {
	s.RegisterService(&_DebugManager_serviceDesc, srv)
}

func _DebugManager_Preimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.Hash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).Preimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugManager/Preimage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).Preimage(ctx, req.(*commonpb.Hash))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetBadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetBadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugManager/GetBadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetBadBlocks(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_StorageRangeAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).StorageRangeAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugManager/StorageRangeAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).StorageRangeAt(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetModifiedAccountsByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetModifiedAccountsByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugManager/GetModifiedAccountsByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetModifiedAccountsByNumber(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetModifiedAccountsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetModifiedAccountsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debug.DebugManager/GetModifiedAccountsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetModifiedAccountsByHash(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debug.DebugManager",
	HandlerType: (*DebugManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preimage",
			Handler:    _DebugManager_Preimage_Handler,
		},
		{
			MethodName: "GetBadBlocks",
			Handler:    _DebugManager_GetBadBlocks_Handler,
		},
		{
			MethodName: "StorageRangeAt",
			Handler:    _DebugManager_StorageRangeAt_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByNumber",
			Handler:    _DebugManager_GetModifiedAccountsByNumber_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByHash",
			Handler:    _DebugManager_GetModifiedAccountsByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/debug/debug.proto",
}
