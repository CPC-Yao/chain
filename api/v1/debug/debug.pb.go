// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug.proto

package debugpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type DebugManagerRequest struct {
	Hash                 []byte                `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	BlockHash            []byte                `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex              int32                 `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
	ContractAddress      []byte                `protobuf:"bytes,4,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	KeyStart             []byte                `protobuf:"bytes,5,opt,name=key_start,json=keyStart,proto3" json:"key_start,omitempty"`
	MaxResult            int32                 `protobuf:"varint,6,opt,name=max_result,json=maxResult,proto3" json:"max_result,omitempty"`
	StartHash            []byte                `protobuf:"bytes,7,opt,name=start_hash,json=startHash,proto3" json:"start_hash,omitempty"`
	EndHash              *wrappers.BytesValue  `protobuf:"bytes,8,opt,name=end_hash,json=endHash,proto3" json:"end_hash,omitempty"`
	StartNum             uint64                `protobuf:"varint,9,opt,name=start_num,json=startNum,proto3" json:"start_num,omitempty"`
	EndNum               *wrappers.UInt64Value `protobuf:"bytes,10,opt,name=end_num,json=endNum,proto3" json:"end_num,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *DebugManagerRequest) Reset()         { *m = DebugManagerRequest{} }
func (m *DebugManagerRequest) String() string { return proto.CompactTextString(m) }
func (*DebugManagerRequest) ProtoMessage()    {}
func (*DebugManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{0}
}

func (m *DebugManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugManagerRequest.Unmarshal(m, b)
}
func (m *DebugManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugManagerRequest.Marshal(b, m, deterministic)
}
func (m *DebugManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugManagerRequest.Merge(m, src)
}
func (m *DebugManagerRequest) XXX_Size() int {
	return xxx_messageInfo_DebugManagerRequest.Size(m)
}
func (m *DebugManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugManagerRequest proto.InternalMessageInfo

func (m *DebugManagerRequest) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *DebugManagerRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *DebugManagerRequest) GetTxIndex() int32 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

func (m *DebugManagerRequest) GetContractAddress() []byte {
	if m != nil {
		return m.ContractAddress
	}
	return nil
}

func (m *DebugManagerRequest) GetKeyStart() []byte {
	if m != nil {
		return m.KeyStart
	}
	return nil
}

func (m *DebugManagerRequest) GetMaxResult() int32 {
	if m != nil {
		return m.MaxResult
	}
	return 0
}

func (m *DebugManagerRequest) GetStartHash() []byte {
	if m != nil {
		return m.StartHash
	}
	return nil
}

func (m *DebugManagerRequest) GetEndHash() *wrappers.BytesValue {
	if m != nil {
		return m.EndHash
	}
	return nil
}

func (m *DebugManagerRequest) GetStartNum() uint64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *DebugManagerRequest) GetEndNum() *wrappers.UInt64Value {
	if m != nil {
		return m.EndNum
	}
	return nil
}

type DebugManagerReply struct {
	Preimage             []byte   `protobuf:"bytes,1,opt,name=preimage,proto3" json:"preimage,omitempty"`
	BadBlockArgs         *any.Any `protobuf:"bytes,2,opt,name=bad_block_args,json=badBlockArgs,proto3" json:"bad_block_args,omitempty"`
	StorageRangeResult   *any.Any `protobuf:"bytes,3,opt,name=storage_range_result,json=storageRangeResult,proto3" json:"storage_range_result,omitempty"`
	Accounts             *any.Any `protobuf:"bytes,4,opt,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DebugManagerReply) Reset()         { *m = DebugManagerReply{} }
func (m *DebugManagerReply) String() string { return proto.CompactTextString(m) }
func (*DebugManagerReply) ProtoMessage()    {}
func (*DebugManagerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{1}
}

func (m *DebugManagerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugManagerReply.Unmarshal(m, b)
}
func (m *DebugManagerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugManagerReply.Marshal(b, m, deterministic)
}
func (m *DebugManagerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugManagerReply.Merge(m, src)
}
func (m *DebugManagerReply) XXX_Size() int {
	return xxx_messageInfo_DebugManagerReply.Size(m)
}
func (m *DebugManagerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugManagerReply.DiscardUnknown(m)
}

var xxx_messageInfo_DebugManagerReply proto.InternalMessageInfo

func (m *DebugManagerReply) GetPreimage() []byte {
	if m != nil {
		return m.Preimage
	}
	return nil
}

func (m *DebugManagerReply) GetBadBlockArgs() *any.Any {
	if m != nil {
		return m.BadBlockArgs
	}
	return nil
}

func (m *DebugManagerReply) GetStorageRangeResult() *any.Any {
	if m != nil {
		return m.StorageRangeResult
	}
	return nil
}

func (m *DebugManagerReply) GetAccounts() *any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type PublicDebugAPIRequest struct {
	BlockNumber          int64    `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicDebugAPIRequest) Reset()         { *m = PublicDebugAPIRequest{} }
func (m *PublicDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicDebugAPIRequest) ProtoMessage()    {}
func (*PublicDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{2}
}

func (m *PublicDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicDebugAPIRequest.Unmarshal(m, b)
}
func (m *PublicDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicDebugAPIRequest.Merge(m, src)
}
func (m *PublicDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicDebugAPIRequest.Size(m)
}
func (m *PublicDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicDebugAPIRequest proto.InternalMessageInfo

func (m *PublicDebugAPIRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PublicInnerDebugAPIRequest struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicInnerDebugAPIRequest) Reset()         { *m = PublicInnerDebugAPIRequest{} }
func (m *PublicInnerDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicInnerDebugAPIRequest) ProtoMessage()    {}
func (*PublicInnerDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{3}
}

func (m *PublicInnerDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicInnerDebugAPIRequest.Unmarshal(m, b)
}
func (m *PublicInnerDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicInnerDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicInnerDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicInnerDebugAPIRequest.Merge(m, src)
}
func (m *PublicInnerDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicInnerDebugAPIRequest.Size(m)
}
func (m *PublicInnerDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicInnerDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicInnerDebugAPIRequest proto.InternalMessageInfo

func (m *PublicInnerDebugAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PublicInnerDebugAPIReply struct {
	Info                 string   `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Rlp                  string   `protobuf:"bytes,2,opt,name=rlp,proto3" json:"rlp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicInnerDebugAPIReply) Reset()         { *m = PublicInnerDebugAPIReply{} }
func (m *PublicInnerDebugAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicInnerDebugAPIReply) ProtoMessage()    {}
func (*PublicInnerDebugAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{4}
}

func (m *PublicInnerDebugAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicInnerDebugAPIReply.Unmarshal(m, b)
}
func (m *PublicInnerDebugAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicInnerDebugAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicInnerDebugAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicInnerDebugAPIReply.Merge(m, src)
}
func (m *PublicInnerDebugAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicInnerDebugAPIReply.Size(m)
}
func (m *PublicInnerDebugAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicInnerDebugAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicInnerDebugAPIReply proto.InternalMessageInfo

func (m *PublicInnerDebugAPIReply) GetInfo() string {
	if m != nil {
		return m.Info
	}
	return ""
}

func (m *PublicInnerDebugAPIReply) GetRlp() string {
	if m != nil {
		return m.Rlp
	}
	return ""
}

type PrivateInnerDebugAPIRequest struct {
	Property             string   `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateInnerDebugAPIRequest) Reset()         { *m = PrivateInnerDebugAPIRequest{} }
func (m *PrivateInnerDebugAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateInnerDebugAPIRequest) ProtoMessage()    {}
func (*PrivateInnerDebugAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{5}
}

func (m *PrivateInnerDebugAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateInnerDebugAPIRequest.Unmarshal(m, b)
}
func (m *PrivateInnerDebugAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateInnerDebugAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateInnerDebugAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateInnerDebugAPIRequest.Merge(m, src)
}
func (m *PrivateInnerDebugAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateInnerDebugAPIRequest.Size(m)
}
func (m *PrivateInnerDebugAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateInnerDebugAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateInnerDebugAPIRequest proto.InternalMessageInfo

func (m *PrivateInnerDebugAPIRequest) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *PrivateInnerDebugAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PrivateInnerDebugAPIReply struct {
	Property             string   `protobuf:"bytes,1,opt,name=property,proto3" json:"property,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateInnerDebugAPIReply) Reset()         { *m = PrivateInnerDebugAPIReply{} }
func (m *PrivateInnerDebugAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateInnerDebugAPIReply) ProtoMessage()    {}
func (*PrivateInnerDebugAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{6}
}

func (m *PrivateInnerDebugAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateInnerDebugAPIReply.Unmarshal(m, b)
}
func (m *PrivateInnerDebugAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateInnerDebugAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateInnerDebugAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateInnerDebugAPIReply.Merge(m, src)
}
func (m *PrivateInnerDebugAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateInnerDebugAPIReply.Size(m)
}
func (m *PrivateInnerDebugAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateInnerDebugAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateInnerDebugAPIReply proto.InternalMessageInfo

func (m *PrivateInnerDebugAPIReply) GetProperty() string {
	if m != nil {
		return m.Property
	}
	return ""
}

func (m *PrivateInnerDebugAPIReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type PublicNetAPIReply struct {
	IsListening          bool     `protobuf:"varint,1,opt,name=is_listening,json=isListening,proto3" json:"is_listening,omitempty"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	PeerCount            uint32   `protobuf:"varint,3,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicNetAPIReply) Reset()         { *m = PublicNetAPIReply{} }
func (m *PublicNetAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicNetAPIReply) ProtoMessage()    {}
func (*PublicNetAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_8d9d361be58531fb, []int{7}
}

func (m *PublicNetAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicNetAPIReply.Unmarshal(m, b)
}
func (m *PublicNetAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicNetAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicNetAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicNetAPIReply.Merge(m, src)
}
func (m *PublicNetAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicNetAPIReply.Size(m)
}
func (m *PublicNetAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicNetAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicNetAPIReply proto.InternalMessageInfo

func (m *PublicNetAPIReply) GetIsListening() bool {
	if m != nil {
		return m.IsListening
	}
	return false
}

func (m *PublicNetAPIReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *PublicNetAPIReply) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func init() {
	proto.RegisterType((*DebugManagerRequest)(nil), "debugpb.DebugManagerRequest")
	proto.RegisterType((*DebugManagerReply)(nil), "debugpb.DebugManagerReply")
	proto.RegisterType((*PublicDebugAPIRequest)(nil), "debugpb.PublicDebugAPIRequest")
	proto.RegisterType((*PublicInnerDebugAPIRequest)(nil), "debugpb.PublicInnerDebugAPIRequest")
	proto.RegisterType((*PublicInnerDebugAPIReply)(nil), "debugpb.PublicInnerDebugAPIReply")
	proto.RegisterType((*PrivateInnerDebugAPIRequest)(nil), "debugpb.PrivateInnerDebugAPIRequest")
	proto.RegisterType((*PrivateInnerDebugAPIReply)(nil), "debugpb.PrivateInnerDebugAPIReply")
	proto.RegisterType((*PublicNetAPIReply)(nil), "debugpb.PublicNetAPIReply")
}

func init() { proto.RegisterFile("debug.proto", fileDescriptor_8d9d361be58531fb) }

var fileDescriptor_8d9d361be58531fb = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0xcf, 0x6f, 0xe3, 0xc4,
	0x17, 0x97, 0x9b, 0x6c, 0x93, 0xbc, 0xf4, 0xdb, 0xee, 0x77, 0x28, 0x25, 0x4d, 0xda, 0x6e, 0x3b,
	0x5d, 0x50, 0xb6, 0x12, 0x09, 0x74, 0xd9, 0x3d, 0xf4, 0x02, 0x69, 0x17, 0x76, 0x2b, 0x41, 0x15,
	0xb9, 0x82, 0xc3, 0x0a, 0x29, 0x1a, 0xc7, 0x53, 0xd7, 0xaa, 0x3d, 0xf6, 0x8e, 0xc7, 0x25, 0x41,
	0x9c, 0x38, 0xb0, 0x07, 0x0e, 0x1c, 0xf8, 0xd3, 0xf8, 0x17, 0x38, 0xf0, 0x27, 0x20, 0x71, 0x41,
	0xf3, 0xc6, 0x0e, 0x9b, 0xc4, 0xd9, 0xad, 0xaa, 0x5e, 0x22, 0xcf, 0xfb, 0xf1, 0xf9, 0x7c, 0xfc,
	0xde, 0x9b, 0x17, 0x43, 0xdd, 0xe5, 0x4e, 0xea, 0x75, 0x62, 0x19, 0xa9, 0x88, 0x54, 0xf0, 0x10,
	0x3b, 0xcd, 0x96, 0x17, 0x45, 0x5e, 0xc0, 0xbb, 0x68, 0x76, 0xd2, 0x8b, 0x2e, 0x0f, 0x63, 0x35,
	0x36, 0x51, 0xcd, 0xad, 0xcc, 0xc9, 0x62, 0xbf, 0xcb, 0x84, 0x88, 0x14, 0x53, 0x7e, 0x24, 0x92,
	0xcc, 0xbb, 0x39, 0x9b, 0xca, 0x44, 0x9e, 0xb8, 0x33, 0xeb, 0xfa, 0x41, 0xb2, 0x38, 0xe6, 0x32,
	0x4b, 0xa5, 0x7f, 0x2f, 0xc1, 0x46, 0x5f, 0xfa, 0xd7, 0x4c, 0xf1, 0x67, 0x5a, 0x48, 0xaf, 0x7f,
	0x6a, 0xf3, 0x57, 0x29, 0x4f, 0x14, 0x21, 0x50, 0xbe, 0x64, 0xc9, 0x65, 0xc3, 0xda, 0xb5, 0xda,
	0x2b, 0x36, 0x3e, 0x93, 0x6d, 0x00, 0x27, 0x88, 0x86, 0x57, 0x03, 0xf4, 0x2c, 0xa1, 0xa7, 0x86,
	0x96, 0x17, 0xda, 0xbd, 0x09, 0x55, 0x35, 0x1a, 0xf8, 0xc2, 0xe5, 0xa3, 0x46, 0x69, 0xd7, 0x6a,
	0xdf, 0xb3, 0x2b, 0x6a, 0x74, 0xaa, 0x8f, 0xe4, 0x11, 0xdc, 0x1f, 0x46, 0x42, 0x49, 0x36, 0x54,
	0x03, 0xe6, 0xba, 0x92, 0x27, 0x49, 0xa3, 0x8c, 0xf9, 0x6b, 0xb9, 0xbd, 0x67, 0xcc, 0xa4, 0x05,
	0xb5, 0x2b, 0x3e, 0x1e, 0x24, 0x8a, 0x49, 0xd5, 0xb8, 0x87, 0x31, 0xd5, 0x2b, 0x3e, 0x3e, 0xd7,
	0x67, 0xad, 0x20, 0x64, 0xa3, 0x81, 0xe4, 0x49, 0x1a, 0xa8, 0xc6, 0x32, 0x92, 0xd4, 0x42, 0x36,
	0xb2, 0xd1, 0xa0, 0xdd, 0x98, 0x67, 0x04, 0x56, 0x8c, 0x40, 0xb4, 0xa0, 0xc0, 0xa7, 0x50, 0xe5,
	0xc2, 0x35, 0xce, 0xea, 0xae, 0xd5, 0xae, 0x1f, 0xb6, 0x3a, 0xa6, 0x42, 0x9d, 0xbc, 0x42, 0x9d,
	0xe3, 0xb1, 0xe2, 0xc9, 0x77, 0x2c, 0x48, 0xb9, 0x5d, 0xe1, 0xc2, 0xc5, 0xbc, 0x16, 0x18, 0x90,
	0x81, 0x48, 0xc3, 0x46, 0x6d, 0xd7, 0x6a, 0x97, 0xed, 0x2a, 0x1a, 0xce, 0xd2, 0x90, 0x3c, 0x01,
	0x1d, 0x87, 0x2e, 0x40, 0xcc, 0xad, 0x39, 0xcc, 0x6f, 0x4f, 0x85, 0x7a, 0xfa, 0x99, 0x01, 0x5d,
	0xe6, 0xc2, 0x3d, 0x4b, 0x43, 0xfa, 0x97, 0x05, 0xeb, 0x73, 0xa5, 0x8f, 0x83, 0x31, 0x69, 0x42,
	0x35, 0x96, 0xdc, 0x0f, 0x99, 0xc7, 0xb3, 0xe2, 0x4f, 0xce, 0xe4, 0x08, 0x56, 0x1d, 0xe6, 0x0e,
	0x4c, 0x13, 0x98, 0xf4, 0x12, 0x6c, 0x42, 0xfd, 0x70, 0x7d, 0x8e, 0xb2, 0x27, 0xc6, 0xf6, 0x8a,
	0xc3, 0xdc, 0x63, 0x1d, 0xda, 0x93, 0x5e, 0x42, 0xbe, 0x82, 0xf5, 0x44, 0x45, 0x92, 0x79, 0x7c,
	0x20, 0x99, 0xd0, 0xbf, 0xa6, 0x88, 0xa5, 0xb7, 0x20, 0x90, 0x2c, 0xc3, 0xd6, 0x09, 0x59, 0x8d,
	0x3f, 0x81, 0x2a, 0x1b, 0x0e, 0xa3, 0x54, 0x28, 0xd3, 0xc2, 0x45, 0xb9, 0x93, 0x28, 0x7a, 0x04,
	0xef, 0xf7, 0x53, 0x27, 0xf0, 0x87, 0xb3, 0x33, 0xb6, 0x07, 0x2b, 0xe6, 0x55, 0x44, 0x1a, 0x3a,
	0x5c, 0xe2, 0xeb, 0x96, 0xec, 0x3a, 0xda, 0xce, 0xd0, 0x44, 0x3f, 0x87, 0xa6, 0xc9, 0x3d, 0x15,
	0x82, 0xcb, 0x9b, 0x00, 0x94, 0xa7, 0x01, 0xbe, 0x80, 0x46, 0x21, 0x80, 0x2e, 0x35, 0x81, 0xb2,
	0x2f, 0x2e, 0x22, 0x4c, 0xab, 0xd9, 0xf8, 0x4c, 0xee, 0x43, 0x49, 0x06, 0x31, 0xd6, 0xb5, 0x66,
	0xeb, 0x47, 0xfa, 0x3d, 0xb4, 0xb2, 0x46, 0x15, 0x6a, 0xc0, 0x7e, 0x45, 0x31, 0x97, 0x6a, 0x9c,
	0x01, 0x4d, 0xce, 0x73, 0xfa, 0x96, 0xe6, 0xf5, 0xbd, 0x84, 0xcd, 0x62, 0xf4, 0xc9, 0x2c, 0xdc,
	0x1e, 0x3b, 0x82, 0xff, 0x9b, 0x77, 0x3f, 0xe3, 0x6a, 0x82, 0xb9, 0x07, 0x2b, 0x7e, 0x32, 0x08,
	0xfc, 0x44, 0x71, 0xe1, 0x0b, 0x0f, 0x71, 0xab, 0x76, 0xdd, 0x4f, 0xbe, 0xce, 0x4d, 0xa4, 0x01,
	0x95, 0x6b, 0x2e, 0x13, 0x3f, 0x12, 0x59, 0x1d, 0xf2, 0xa3, 0xbe, 0x60, 0x31, 0xe7, 0x72, 0x80,
	0x9d, 0xc5, 0xd1, 0xf9, 0x9f, 0x5d, 0xd3, 0x96, 0x13, 0x6d, 0x38, 0xfc, 0xa7, 0x0c, 0x6b, 0x33,
	0x43, 0x4d, 0x04, 0x54, 0xfb, 0xf9, 0xfc, 0x3e, 0xe8, 0x64, 0xfb, 0xae, 0x53, 0xbc, 0x75, 0x9a,
	0xdb, 0x8b, 0x03, 0xe2, 0x60, 0x4c, 0xe9, 0xcf, 0x7f, 0xfc, 0xf9, 0xfb, 0xd2, 0x16, 0xfd, 0x40,
	0xaf, 0xc2, 0xa4, 0x7b, 0xfd, 0x69, 0x17, 0xc3, 0xbb, 0xf9, 0x05, 0x39, 0xb2, 0x0e, 0x48, 0x08,
	0x2b, 0xcf, 0xb9, 0x3a, 0xce, 0x46, 0x3f, 0x79, 0x37, 0x67, 0xe1, 0xf8, 0xd2, 0x8f, 0x90, 0x6a,
	0x97, 0xb6, 0x66, 0xa8, 0xbc, 0x37, 0xb0, 0x35, 0xdd, 0x2b, 0x58, 0x3d, 0x7f, 0xe3, 0x92, 0xf4,
	0xd4, 0x6d, 0x09, 0xdb, 0x48, 0x48, 0xe9, 0xf6, 0x0c, 0x61, 0x32, 0x85, 0xae, 0x29, 0x7f, 0xb5,
	0xa0, 0xf5, 0x9c, 0xab, 0x6f, 0x22, 0xd7, 0xbf, 0xf0, 0xb9, 0xdb, 0xcb, 0xee, 0xd9, 0xf1, 0xd8,
	0xb4, 0xfd, 0xb6, 0x02, 0x9e, 0xa0, 0x80, 0x2e, 0x3d, 0x98, 0x7f, 0xe3, 0x45, 0x54, 0x5a, 0xcd,
	0x6b, 0x0b, 0x36, 0x0b, 0xd5, 0xe0, 0xea, 0xbc, 0xa5, 0x96, 0xc7, 0xa8, 0xe5, 0x63, 0xda, 0xbe,
	0x89, 0x16, 0x4d, 0x74, 0x64, 0x1d, 0x1c, 0x8e, 0x60, 0x75, 0x7a, 0xcf, 0x90, 0x0b, 0xa8, 0x3d,
	0x4b, 0xc3, 0x18, 0xbb, 0x45, 0x76, 0xfe, 0x93, 0x52, 0xb4, 0x8d, 0x16, 0x28, 0xd9, 0x47, 0x25,
	0xdb, 0xb4, 0x31, 0xa3, 0xc4, 0xcd, 0x71, 0x35, 0xf3, 0xeb, 0x12, 0xbc, 0x57, 0xb0, 0x65, 0xc8,
	0x4f, 0x50, 0xd7, 0xb3, 0xa8, 0xc3, 0xec, 0x20, 0x26, 0xfb, 0x33, 0x0a, 0x8a, 0xf6, 0x49, 0x73,
	0xef, 0xed, 0x41, 0xfa, 0x1a, 0x7c, 0x88, 0x9a, 0x1e, 0xd0, 0x66, 0xc1, 0x6c, 0x66, 0x5c, 0xba,
	0x33, 0x3f, 0x02, 0xf4, 0xa5, 0x2f, 0x8c, 0xed, 0xce, 0xc8, 0x1f, 0x22, 0xf9, 0x0e, 0xdd, 0x9c,
	0xbb, 0x83, 0x39, 0x95, 0xe6, 0xbe, 0x86, 0xea, 0x39, 0xe7, 0xe6, 0xef, 0xf3, 0xae, 0x98, 0x17,
	0xdd, 0xfe, 0x24, 0x23, 0xd2, 0x9d, 0xf8, 0xad, 0x34, 0xf9, 0x5b, 0x9d, 0x6e, 0xc5, 0x35, 0xac,
	0x9e, 0x5c, 0x32, 0x5f, 0xb8, 0xce, 0x49, 0x14, 0xc6, 0x6c, 0xa8, 0xc8, 0xc6, 0x5c, 0xbf, 0xbf,
	0xd4, 0xdf, 0x5c, 0x4d, 0x3a, 0x3b, 0xb2, 0x05, 0x52, 0x16, 0x5d, 0xd6, 0xe1, 0x14, 0x85, 0x2e,
	0xc4, 0x2f, 0x16, 0xac, 0x65, 0xc4, 0xfd, 0x7c, 0x75, 0x3f, 0x7c, 0x07, 0x83, 0xa9, 0xc8, 0x4d,
	0x74, 0x3c, 0x42, 0x1d, 0xfb, 0x74, 0xa7, 0x58, 0x47, 0xce, 0x68, 0x3a, 0x52, 0x39, 0xe7, 0xea,
	0x05, 0x67, 0xee, 0x1d, 0xf2, 0xef, 0x21, 0x7f, 0x8b, 0x6e, 0xcc, 0xb5, 0x04, 0x99, 0x8e, 0xac,
	0x83, 0xe3, 0x0e, 0xec, 0x47, 0xd2, 0xeb, 0x38, 0xbe, 0x72, 0xd2, 0xe1, 0x15, 0x57, 0x9d, 0x61,
	0x8c, 0xea, 0x3a, 0xe6, 0x37, 0xe3, 0x78, 0x99, 0x7f, 0x09, 0x3b, 0xcb, 0xd8, 0x8e, 0xc7, 0xff,
	0x06, 0x00, 0x00, 0xff, 0xff, 0x4c, 0xc3, 0x77, 0xc3, 0x28, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugManagerClient is the client API for DebugManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugManagerClient interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*DebugManagerReply, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error)
	// StorageRangeAt returns the storage at the given block height and transaction index.
	StorageRangeAt(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error)
}

type privateDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewDebugManagerClient(cc *grpc.ClientConn) DebugManagerClient {
	return &privateDebugAPIClient{cc}
}

func (c *privateDebugAPIClient) Preimage(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*DebugManagerReply, error) {
	out := new(DebugManagerReply)
	err := c.cc.Invoke(ctx, "/debugpb.DebugManager/Preimage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetBadBlocks(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/debugpb.DebugManager/GetBadBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) StorageRangeAt(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/debugpb.DebugManager/StorageRangeAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetModifiedAccountsByNumber(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/debugpb.DebugManager/GetModifiedAccountsByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateDebugAPIClient) GetModifiedAccountsByHash(ctx context.Context, in *DebugManagerRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/debugpb.DebugManager/GetModifiedAccountsByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DebugManagerServer is the server API for DebugManager service.
type DebugManagerServer interface {
	// Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
	Preimage(context.Context, *DebugManagerRequest) (*DebugManagerReply, error)
	// GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
	// and returns them as a JSON list of block-hashes
	GetBadBlocks(context.Context, *DebugManagerRequest) (*any.Any, error)
	// StorageRangeAt returns the storage at the given block height and transaction index.
	StorageRangeAt(context.Context, *DebugManagerRequest) (*any.Any, error)
	// GetModifiedAccountsByNumber returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByNumber(context.Context, *DebugManagerRequest) (*any.Any, error)
	// GetModifiedAccountsByHash returns all accounts that have changed between the
	// two blocks specified. A change is defined as a difference in nonce, balance,
	// code hash, or storage hash.
	//
	// With one parameter, returns the list of accounts modified in the specified block.
	GetModifiedAccountsByHash(context.Context, *DebugManagerRequest) (*any.Any, error)
}

func RegisterDebugManagerServer(s *grpc.Server, srv DebugManagerServer) {
	s.RegisterService(&_DebugManager_serviceDesc, srv)
}

func _DebugManager_Preimage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).Preimage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.DebugManager/Preimage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).Preimage(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetBadBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetBadBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.DebugManager/GetBadBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetBadBlocks(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_StorageRangeAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).StorageRangeAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.DebugManager/StorageRangeAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).StorageRangeAt(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetModifiedAccountsByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetModifiedAccountsByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.DebugManager/GetModifiedAccountsByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetModifiedAccountsByNumber(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DebugManager_GetModifiedAccountsByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebugManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DebugManagerServer).GetModifiedAccountsByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.DebugManager/GetModifiedAccountsByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DebugManagerServer).GetModifiedAccountsByHash(ctx, req.(*DebugManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DebugManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugpb.DebugManager",
	HandlerType: (*DebugManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Preimage",
			Handler:    _DebugManager_Preimage_Handler,
		},
		{
			MethodName: "GetBadBlocks",
			Handler:    _DebugManager_GetBadBlocks_Handler,
		},
		{
			MethodName: "StorageRangeAt",
			Handler:    _DebugManager_StorageRangeAt_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByNumber",
			Handler:    _DebugManager_GetModifiedAccountsByNumber_Handler,
		},
		{
			MethodName: "GetModifiedAccountsByHash",
			Handler:    _DebugManager_GetModifiedAccountsByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}

// PublicDebugAPIClient is the client API for PublicDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicDebugAPIClient interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error)
}

type publicDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicDebugAPIClient(cc *grpc.ClientConn) PublicDebugAPIClient {
	return &publicDebugAPIClient{cc}
}

func (c *publicDebugAPIClient) DumpBlock(ctx context.Context, in *PublicDebugAPIRequest, opts ...grpc.CallOption) (*any.Any, error) {
	out := new(any.Any)
	err := c.cc.Invoke(ctx, "/debugpb.PublicDebugAPI/DumpBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicDebugAPIServer is the server API for PublicDebugAPI service.
type PublicDebugAPIServer interface {
	// DumpBlock retrieves the entire state of the database at a given block.
	DumpBlock(context.Context, *PublicDebugAPIRequest) (*any.Any, error)
}

func RegisterPublicDebugAPIServer(s *grpc.Server, srv PublicDebugAPIServer) {
	s.RegisterService(&_PublicDebugAPI_serviceDesc, srv)
}

func _PublicDebugAPI_DumpBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicDebugAPIServer).DumpBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PublicDebugAPI/DumpBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicDebugAPIServer).DumpBlock(ctx, req.(*PublicDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugpb.PublicDebugAPI",
	HandlerType: (*PublicDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DumpBlock",
			Handler:    _PublicDebugAPI_DumpBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}

// PublicInnerDebugAPIClient is the client API for PublicInnerDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicInnerDebugAPIClient interface {
	GetBlockRlp(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error)
	PrintBlock(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error)
	SeedHash(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error)
}

type publicInnerDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicInnerDebugAPIClient(cc *grpc.ClientConn) PublicInnerDebugAPIClient {
	return &publicInnerDebugAPIClient{cc}
}

func (c *publicInnerDebugAPIClient) GetBlockRlp(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error) {
	out := new(PublicInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PublicInnerDebugAPI/GetBlockRlp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicInnerDebugAPIClient) PrintBlock(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error) {
	out := new(PublicInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PublicInnerDebugAPI/PrintBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicInnerDebugAPIClient) SeedHash(ctx context.Context, in *PublicInnerDebugAPIRequest, opts ...grpc.CallOption) (*PublicInnerDebugAPIReply, error) {
	out := new(PublicInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PublicInnerDebugAPI/SeedHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicInnerDebugAPIServer is the server API for PublicInnerDebugAPI service.
type PublicInnerDebugAPIServer interface {
	GetBlockRlp(context.Context, *PublicInnerDebugAPIRequest) (*PublicInnerDebugAPIReply, error)
	PrintBlock(context.Context, *PublicInnerDebugAPIRequest) (*PublicInnerDebugAPIReply, error)
	SeedHash(context.Context, *PublicInnerDebugAPIRequest) (*PublicInnerDebugAPIReply, error)
}

func RegisterPublicInnerDebugAPIServer(s *grpc.Server, srv PublicInnerDebugAPIServer) {
	s.RegisterService(&_PublicInnerDebugAPI_serviceDesc, srv)
}

func _PublicInnerDebugAPI_GetBlockRlp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicInnerDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerDebugAPIServer).GetBlockRlp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PublicInnerDebugAPI/GetBlockRlp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerDebugAPIServer).GetBlockRlp(ctx, req.(*PublicInnerDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicInnerDebugAPI_PrintBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicInnerDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerDebugAPIServer).PrintBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PublicInnerDebugAPI/PrintBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerDebugAPIServer).PrintBlock(ctx, req.(*PublicInnerDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicInnerDebugAPI_SeedHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicInnerDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerDebugAPIServer).SeedHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PublicInnerDebugAPI/SeedHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerDebugAPIServer).SeedHash(ctx, req.(*PublicInnerDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicInnerDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugpb.PublicInnerDebugAPI",
	HandlerType: (*PublicInnerDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockRlp",
			Handler:    _PublicInnerDebugAPI_GetBlockRlp_Handler,
		},
		{
			MethodName: "PrintBlock",
			Handler:    _PublicInnerDebugAPI_PrintBlock_Handler,
		},
		{
			MethodName: "SeedHash",
			Handler:    _PublicInnerDebugAPI_SeedHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}

// PrivateInnerDebugAPIClient is the client API for PrivateInnerDebugAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateInnerDebugAPIClient interface {
	ChaindbCompact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error)
	ChaindbProperty(ctx context.Context, in *PrivateInnerDebugAPIRequest, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error)
	SetHead(ctx context.Context, in *PrivateInnerDebugAPIRequest, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error)
}

type privateInnerDebugAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateInnerDebugAPIClient(cc *grpc.ClientConn) PrivateInnerDebugAPIClient {
	return &privateInnerDebugAPIClient{cc}
}

func (c *privateInnerDebugAPIClient) ChaindbCompact(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error) {
	out := new(PrivateInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PrivateInnerDebugAPI/ChaindbCompact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateInnerDebugAPIClient) ChaindbProperty(ctx context.Context, in *PrivateInnerDebugAPIRequest, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error) {
	out := new(PrivateInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PrivateInnerDebugAPI/ChaindbProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateInnerDebugAPIClient) SetHead(ctx context.Context, in *PrivateInnerDebugAPIRequest, opts ...grpc.CallOption) (*PrivateInnerDebugAPIReply, error) {
	out := new(PrivateInnerDebugAPIReply)
	err := c.cc.Invoke(ctx, "/debugpb.PrivateInnerDebugAPI/SetHead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateInnerDebugAPIServer is the server API for PrivateInnerDebugAPI service.
type PrivateInnerDebugAPIServer interface {
	ChaindbCompact(context.Context, *empty.Empty) (*PrivateInnerDebugAPIReply, error)
	ChaindbProperty(context.Context, *PrivateInnerDebugAPIRequest) (*PrivateInnerDebugAPIReply, error)
	SetHead(context.Context, *PrivateInnerDebugAPIRequest) (*PrivateInnerDebugAPIReply, error)
}

func RegisterPrivateInnerDebugAPIServer(s *grpc.Server, srv PrivateInnerDebugAPIServer) {
	s.RegisterService(&_PrivateInnerDebugAPI_serviceDesc, srv)
}

func _PrivateInnerDebugAPI_ChaindbCompact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateInnerDebugAPIServer).ChaindbCompact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PrivateInnerDebugAPI/ChaindbCompact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateInnerDebugAPIServer).ChaindbCompact(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateInnerDebugAPI_ChaindbProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateInnerDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateInnerDebugAPIServer).ChaindbProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PrivateInnerDebugAPI/ChaindbProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateInnerDebugAPIServer).ChaindbProperty(ctx, req.(*PrivateInnerDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateInnerDebugAPI_SetHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateInnerDebugAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateInnerDebugAPIServer).SetHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/debugpb.PrivateInnerDebugAPI/SetHead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateInnerDebugAPIServer).SetHead(ctx, req.(*PrivateInnerDebugAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateInnerDebugAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "debugpb.PrivateInnerDebugAPI",
	HandlerType: (*PrivateInnerDebugAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChaindbCompact",
			Handler:    _PrivateInnerDebugAPI_ChaindbCompact_Handler,
		},
		{
			MethodName: "ChaindbProperty",
			Handler:    _PrivateInnerDebugAPI_ChaindbProperty_Handler,
		},
		{
			MethodName: "SetHead",
			Handler:    _PrivateInnerDebugAPI_SetHead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "debug.proto",
}
