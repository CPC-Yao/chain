syntax = "proto3";

option java_package = "org.bitbucket.cpchain.chain.debugpb";
option go_package = "debugpb";

package debugpb;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/wrappers.proto";



message DebugManagerRequest {
    bytes hash = 1;
    bytes block_hash = 2;
    int32 tx_index = 3;
    bytes contract_address = 4;
    bytes key_start = 5;
    int32 max_result = 6;
    bytes start_hash = 7;
    google.protobuf.BytesValue end_hash = 8;
    uint64 start_num = 9;
    google.protobuf.UInt64Value end_num = 10;

}

message DebugManagerReply {
    bytes preimage = 1;
    google.protobuf.Any bad_block_args = 2;
    google.protobuf.Any storage_range_result = 3;
    google.protobuf.Any accounts = 4;
}

// DebugManager is the collection of Ethereum full node APIs exposed over
// the private debugging endpoint.
service DebugManager {
    // Preimage is a debug API function that returns the preimage for a sha3 hash, if known.
    rpc Preimage(DebugManagerRequest) returns (DebugManagerReply) {
        option (google.api.http) = {
            post: "/apis/v1/debug/preimage"
            body: "*"
          };
    }
    // GetBadBlocks returns a list of the last 'bad blocks' that the client has seen on the network
    // and returns them as a JSON list of block-hashes
    rpc GetBadBlocks(DebugManagerRequest) returns (google.protobuf.Any) {
        option (google.api.http) = {
            post: "/apis/v1/debug/getBadBlocks"
            body: "*"
          };
    }
    // StorageRangeAt returns the storage at the given block height and transaction index.
    rpc StorageRangeAt(DebugManagerRequest) returns (google.protobuf.Any) {
        option (google.api.http) = {
            post: "/apis/v1/debug/storageRangeAt"
            body: "*"
          };
    }
    // GetModifiedAccountsByNumber returns all accounts that have changed between the
    // two blocks specified. A change is defined as a difference in nonce, balance,
    // code hash, or storage hash.
    //
    // With one parameter, returns the list of accounts modified in the specified block.
    rpc GetModifiedAccountsByNumber(DebugManagerRequest) returns (google.protobuf.Any) {
        option (google.api.http) = {
            post: "/apis/v1/debug/getModifiedAccountsByNumber"
            body: "*"
          };
    }
    // GetModifiedAccountsByHash returns all accounts that have changed between the
    // two blocks specified. A change is defined as a difference in nonce, balance,
    // code hash, or storage hash.
    //
    // With one parameter, returns the list of accounts modified in the specified block.
    rpc GetModifiedAccountsByHash(DebugManagerRequest) returns (google.protobuf.Any) {
        option (google.api.http) = {
            post: "/apis/v1/debug/getModifiedAccountsByHash"
            body: "*"
          };
    }
}
message PublicDebugAPIRequest {
    int64 block_number = 1;
}

// PublicDebugAPI is the collection of Ethereum full node APIs exposed
// over the public debugging endpoint.
service PublicDebugAPI {
    // DumpBlock retrieves the entire state of the database at a given block.
    rpc DumpBlock(PublicDebugAPIRequest) returns (google.protobuf.Any) {
        option (google.api.http) = {
            post: "/apis/v1/debug/dumpBlock"
            body: "*"
          };
    }
}

message PublicInnerDebugAPIRequest { uint64 block_number = 1; }
message PublicInnerDebugAPIReply {
    string info = 1;
    string rlp = 2;
}

service PublicInnerDebugAPI {
    rpc GetBlockRlp(PublicInnerDebugAPIRequest) returns (PublicInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/getBlockRlp"
         body : "*"
    };
    }
    rpc PrintBlock(PublicInnerDebugAPIRequest) returns (PublicInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/printBlock"
         body : "*"
    };
    }
    rpc SeedHash(PublicInnerDebugAPIRequest) returns (PublicInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/seedHash"
         body : "*"
    };
    }
}
message PrivateInnerDebugAPIRequest {
    string property = 1;
    uint64 block_number= 2;
}
message PrivateInnerDebugAPIReply {
    string property = 1;
    uint64 block_number = 2;
}
message PublicNetAPIReply {
    bool is_listening = 1;
    string version = 2;
    uint32 peer_count = 3;
}
service PrivateInnerDebugAPI {
    rpc ChaindbCompact(google.protobuf.Empty) returns (PrivateInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/chaindbCompact"
         body : "*"
    };
    }
    rpc ChaindbProperty(PrivateInnerDebugAPIRequest) returns (PrivateInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/chaindbProperty"
         body : "*"
    };
    }
    rpc SetHead(PrivateInnerDebugAPIRequest) returns (PrivateInnerDebugAPIReply) {
        option (google.api.http) = {
post : "/apis/v1/debug/setHead"
         body : "*"
    };
    }
}
