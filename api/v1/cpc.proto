syntax = "proto3";

option java_package = "org.bitbucket.cpchain.chain.protos";
option go_package = "protos";

package protos;

import "common.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

message ChainReaderRequest {
    string address = 1;
    string block_hash = 2;
    int64 block_number = 3;
    bool is_full = 4;
}

// ChainReaderAPI provides an API to access the Ethereum blockchain.
// It offers only methods that operate on public data that is freely available to anyone.
service ChainReader {
    // GetBlockCount returns the block number of the chain head.
    rpc GetBlockCount(google.protobuf.Empty) returns (BlockNumber) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockCount"
            body : "*"
        };
    }

    // GetBalance returns the amount of wei for the given address in the state of the
    // given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
    // block numbers are also allowed.
    rpc GetBalance(ChainReaderRequest) returns (Balance) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBalance"
            body : "*"
        };
    }

// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
    rpc GetBlockByNumber(BlockNumber) returns (Block) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockByNumber"
            body : "*"
        };
    }

    // GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
    // detail, otherwise only the transaction hash is returned.
    rpc GetBlockByHash(ChainReaderRequest) returns (Block) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockByHash"
            body : "*"
        };
    }
}

//web3.eth.pgetTransactionReceit(search).status
//web3.eth.getTransaction
//web3.eth.getBlockTransactionCount
//web3.eth.getTransactionByBlock

message TransactionCount {
    uint64 transaction_count = 1;
}

message TransactionPoolReaderRequest {
    uint64 block_number = 1;
    uint64 index = 2;
    string block_hash =3;
    string address = 4;
}

message RawTransaction {
    bytes raw_transaction = 1;
}

message TransactionHash {
    string transaction_hash = 1;
}

service TransactionPoolReader {
    rpc GetTransactionCountByBlockNumber(BlockNumber) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCountByBlockNumber"
            body : "*"
        };
    }
    rpc GetTransactionCountByBlockHash(BlockNumber) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCountByBlockHash"
            body : "*"
        };
    }
    rpc GetTransactionByBlockNumberAndIndex(TransactionPoolReaderRequest) returns (Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByBlockNumberAndIndex"
            body : "*"
        };
    }
    rpc GetTransactionByBlockHashAndIndex(TransactionPoolReaderRequest) returns (Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByBlockHashAndIndex"
            body : "*"
        };
    }
    rpc GetRawTransactionByBlockNumberAndIndex(TransactionPoolReaderRequest) returns (Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getRawTransactionByBlockNumberAndIndex"
            body : "*"
        };
    }
    rpc GetTransactionByHash(TransactionHash) returns (Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByHash"
            body : "*"
        };
    }
    rpc GetTransactionReceipt(TransactionHash) returns (Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionReceipt"
            body : "*"
        };
    }
    rpc GetTransactionCount(TransactionPoolReaderRequest) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCount"
            body : "*"
        };
    }
}

service Coinbase {
    // Coinbase is the address that mining rewards will be send to (alias for Etherbase)
    rpc Coinbase(google.protobuf.Empty) returns (Address) {
        option (google.api.http) = {
            post: "/api/v1/cpc/coinbase"
            body: "*"
          };
    }
}

message Works {
    map<int32, string> works = 1;
}

service MinerReader {
    // Coinbase is the address that mining rewards will be send to (alias for Etherbase)
    rpc Mining(google.protobuf.Empty) returns (IsOk) {
        option (google.api.http) = {
            post: "/api/v1/cpc/mining"
            body: "*"
          };
    }
    // GetWork returns a work package for external miner. The work package consists of 3 strings
    // result[0], 32 bytes hex encoded current block header pow-hash
    // result[1], 32 bytes hex encoded seed hash used for DAG
    // result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
    rpc GetWork(google.protobuf.Empty) returns (Works) {
        option (google.api.http) = {
            post: "/api/v1/cpc/getWork"
            body: "*"
          };
    }
}
