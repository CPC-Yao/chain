// Code generated by protoc-gen-go. DO NOT EDIT.
// source: miner.proto

package minerpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublicMinerAPIRequest struct {
	BlockNonce           *wrappers.BytesValue `protobuf:"bytes,1,opt,name=block_nonce,json=blockNonce,proto3" json:"block_nonce,omitempty"`
	Solution             *wrappers.BytesValue `protobuf:"bytes,2,opt,name=solution,proto3" json:"solution,omitempty"`
	Digest               *wrappers.BytesValue `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Hashrate             uint64               `protobuf:"varint,4,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	Id                   []byte               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PublicMinerAPIRequest) Reset()         { *m = PublicMinerAPIRequest{} }
func (m *PublicMinerAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIRequest) ProtoMessage()    {}
func (*PublicMinerAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e7fcaacee94c057, []int{0}
}

func (m *PublicMinerAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIRequest.Unmarshal(m, b)
}
func (m *PublicMinerAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIRequest.Merge(m, src)
}
func (m *PublicMinerAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIRequest.Size(m)
}
func (m *PublicMinerAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIRequest proto.InternalMessageInfo

func (m *PublicMinerAPIRequest) GetBlockNonce() *wrappers.BytesValue {
	if m != nil {
		return m.BlockNonce
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetSolution() *wrappers.BytesValue {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetDigest() *wrappers.BytesValue {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetHashrate() uint64 {
	if m != nil {
		return m.Hashrate
	}
	return 0
}

func (m *PublicMinerAPIRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type PublicMinerAPIReply struct {
	Mining               *wrappers.BoolValue `protobuf:"bytes,1,opt,name=mining,proto3" json:"mining,omitempty"`
	IsAccepting          bool                `protobuf:"varint,2,opt,name=is_accepting,json=isAccepting,proto3" json:"is_accepting,omitempty"`
	Works                []string            `protobuf:"bytes,3,rep,name=works,proto3" json:"works,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicMinerAPIReply) Reset()         { *m = PublicMinerAPIReply{} }
func (m *PublicMinerAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIReply) ProtoMessage()    {}
func (*PublicMinerAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e7fcaacee94c057, []int{1}
}

func (m *PublicMinerAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIReply.Unmarshal(m, b)
}
func (m *PublicMinerAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIReply.Merge(m, src)
}
func (m *PublicMinerAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIReply.Size(m)
}
func (m *PublicMinerAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIReply proto.InternalMessageInfo

func (m *PublicMinerAPIReply) GetMining() *wrappers.BoolValue {
	if m != nil {
		return m.Mining
	}
	return nil
}

func (m *PublicMinerAPIReply) GetIsAccepting() bool {
	if m != nil {
		return m.IsAccepting
	}
	return false
}

func (m *PublicMinerAPIReply) GetWorks() []string {
	if m != nil {
		return m.Works
	}
	return nil
}

type MineControlRequest struct {
	Threads              *wrappers.Int32Value `protobuf:"bytes,1,opt,name=threads,proto3" json:"threads,omitempty"`
	Extra                string               `protobuf:"bytes,2,opt,name=extra,proto3" json:"extra,omitempty"`
	GasPrice             []byte               `protobuf:"bytes,3,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Etherbase            []byte               `protobuf:"bytes,4,opt,name=etherbase,proto3" json:"etherbase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *MineControlRequest) Reset()         { *m = MineControlRequest{} }
func (m *MineControlRequest) String() string { return proto.CompactTextString(m) }
func (*MineControlRequest) ProtoMessage()    {}
func (*MineControlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e7fcaacee94c057, []int{2}
}

func (m *MineControlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MineControlRequest.Unmarshal(m, b)
}
func (m *MineControlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MineControlRequest.Marshal(b, m, deterministic)
}
func (m *MineControlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineControlRequest.Merge(m, src)
}
func (m *MineControlRequest) XXX_Size() int {
	return xxx_messageInfo_MineControlRequest.Size(m)
}
func (m *MineControlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MineControlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MineControlRequest proto.InternalMessageInfo

func (m *MineControlRequest) GetThreads() *wrappers.Int32Value {
	if m != nil {
		return m.Threads
	}
	return nil
}

func (m *MineControlRequest) GetExtra() string {
	if m != nil {
		return m.Extra
	}
	return ""
}

func (m *MineControlRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *MineControlRequest) GetEtherbase() []byte {
	if m != nil {
		return m.Etherbase
	}
	return nil
}

type MineControlReply struct {
	IsOk                 bool     `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	Hashrate             uint64   `protobuf:"varint,2,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MineControlReply) Reset()         { *m = MineControlReply{} }
func (m *MineControlReply) String() string { return proto.CompactTextString(m) }
func (*MineControlReply) ProtoMessage()    {}
func (*MineControlReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6e7fcaacee94c057, []int{3}
}

func (m *MineControlReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MineControlReply.Unmarshal(m, b)
}
func (m *MineControlReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MineControlReply.Marshal(b, m, deterministic)
}
func (m *MineControlReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MineControlReply.Merge(m, src)
}
func (m *MineControlReply) XXX_Size() int {
	return xxx_messageInfo_MineControlReply.Size(m)
}
func (m *MineControlReply) XXX_DiscardUnknown() {
	xxx_messageInfo_MineControlReply.DiscardUnknown(m)
}

var xxx_messageInfo_MineControlReply proto.InternalMessageInfo

func (m *MineControlReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *MineControlReply) GetHashrate() uint64 {
	if m != nil {
		return m.Hashrate
	}
	return 0
}

func init() {
	proto.RegisterType((*PublicMinerAPIRequest)(nil), "minerpb.PublicMinerAPIRequest")
	proto.RegisterType((*PublicMinerAPIReply)(nil), "minerpb.PublicMinerAPIReply")
	proto.RegisterType((*MineControlRequest)(nil), "minerpb.MineControlRequest")
	proto.RegisterType((*MineControlReply)(nil), "minerpb.MineControlReply")
}

func init() { proto.RegisterFile("miner.proto", fileDescriptor_6e7fcaacee94c057) }

var fileDescriptor_6e7fcaacee94c057 = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0xcd, 0x6e, 0x1a, 0x3b,
	0x14, 0xc7, 0x35, 0x7c, 0x05, 0x0e, 0x28, 0x57, 0x72, 0x72, 0x73, 0xb9, 0xc0, 0x4d, 0xb8, 0x53,
	0xb5, 0x42, 0x59, 0x0c, 0x2a, 0x51, 0x55, 0x29, 0xea, 0x26, 0x91, 0x22, 0x9a, 0x45, 0x5a, 0x34,
	0x48, 0xad, 0x54, 0xa9, 0xa5, 0x9e, 0xc1, 0x1d, 0x2c, 0x60, 0x3c, 0xb5, 0x4d, 0xd2, 0x6c, 0xf3,
	0x0a, 0x7d, 0x81, 0x6e, 0xfa, 0x12, 0x7d, 0x8d, 0xbe, 0x42, 0xf7, 0x7d, 0x85, 0xca, 0xf6, 0x0c,
	0x94, 0xaf, 0x22, 0x85, 0x0d, 0xd2, 0x19, 0x1f, 0x9f, 0xdf, 0xf9, 0x9f, 0xf3, 0xb7, 0x80, 0xe2,
	0x98, 0x86, 0x84, 0x3b, 0x11, 0x67, 0x92, 0xa1, 0x1d, 0x1d, 0x44, 0x5e, 0xa5, 0x1a, 0x30, 0x16,
	0x8c, 0x48, 0x53, 0x7f, 0xf6, 0x26, 0x1f, 0x9a, 0x64, 0x1c, 0xc9, 0x5b, 0x93, 0x55, 0xa9, 0xc5,
	0x87, 0x38, 0xa2, 0x4d, 0x1c, 0x86, 0x4c, 0x62, 0x49, 0x59, 0x28, 0xe2, 0xd3, 0xc3, 0xc5, 0xab,
	0x37, 0x1c, 0x47, 0x11, 0xe1, 0xf1, 0xb9, 0xfd, 0xd3, 0x82, 0xbf, 0x3b, 0x13, 0x6f, 0x44, 0xfd,
	0x2b, 0x05, 0x3b, 0xeb, 0x5c, 0xba, 0xe4, 0xe3, 0x84, 0x08, 0x89, 0x9e, 0x41, 0xd1, 0x1b, 0x31,
	0x7f, 0xd8, 0x0b, 0x59, 0xe8, 0x93, 0xb2, 0x55, 0xb7, 0x1a, 0xc5, 0x56, 0xd5, 0x31, 0xf5, 0x9c,
	0xa4, 0x9e, 0x73, 0x7e, 0x2b, 0x89, 0x78, 0x85, 0x47, 0x13, 0xe2, 0x82, 0xce, 0x7f, 0xa1, 0xd2,
	0xd1, 0x53, 0xc8, 0x0b, 0x36, 0x9a, 0xa8, 0x56, 0xca, 0xa9, 0xcd, 0x57, 0xa7, 0xc9, 0xe8, 0x04,
	0x72, 0x7d, 0x1a, 0x10, 0x21, 0xcb, 0xe9, 0xcd, 0xd7, 0xe2, 0x54, 0x54, 0x81, 0xfc, 0x00, 0x8b,
	0x01, 0xc7, 0x92, 0x94, 0x33, 0x75, 0xab, 0x91, 0x71, 0xa7, 0x31, 0xda, 0x85, 0x14, 0xed, 0x97,
	0xb3, 0x75, 0xab, 0x51, 0x72, 0x53, 0xb4, 0x6f, 0xdf, 0x59, 0xb0, 0xb7, 0xa8, 0x38, 0x1a, 0xdd,
	0xa2, 0x16, 0xe4, 0xc6, 0x34, 0xa4, 0x61, 0x10, 0x4b, 0xad, 0x2c, 0x83, 0x19, 0x1b, 0xc5, 0x5c,
	0x93, 0x89, 0xfe, 0x87, 0x12, 0x15, 0x3d, 0xec, 0xfb, 0x24, 0x92, 0xea, 0xa6, 0x52, 0x9a, 0x77,
	0x8b, 0x54, 0x9c, 0x25, 0x9f, 0xd0, 0x3e, 0x64, 0x6f, 0x18, 0x1f, 0x8a, 0x72, 0xba, 0x9e, 0x6e,
	0x14, 0x5c, 0x13, 0xd8, 0x5f, 0x2c, 0x38, 0xe8, 0x70, 0x7a, 0x8d, 0x25, 0x59, 0x9c, 0xfb, 0x13,
	0xd8, 0x91, 0x03, 0x4e, 0x70, 0x5f, 0xac, 0x9d, 0xf9, 0x65, 0x28, 0x4f, 0x5a, 0xa6, 0x93, 0x24,
	0x57, 0x71, 0xc8, 0x27, 0xc9, 0xb1, 0xee, 0xa1, 0xe0, 0x9a, 0x00, 0x55, 0xa1, 0x10, 0x60, 0xd1,
	0x8b, 0x38, 0xf5, 0x89, 0x1e, 0x68, 0xc9, 0xcd, 0x07, 0x58, 0x74, 0x54, 0x8c, 0x6a, 0x50, 0x20,
	0x72, 0x40, 0xb8, 0x87, 0x85, 0x19, 0x5b, 0xc9, 0x9d, 0x7d, 0xb0, 0xdb, 0xb0, 0xbf, 0xd4, 0xa1,
	0x9a, 0xd3, 0x1e, 0x64, 0xa9, 0xe8, 0xb1, 0xa1, 0xee, 0x2e, 0xef, 0x66, 0xa8, 0x78, 0x39, 0x9c,
	0x5b, 0x40, 0x6a, 0x7e, 0x01, 0xad, 0x6f, 0x69, 0xd8, 0x9d, 0x1f, 0x38, 0x7a, 0x07, 0xb9, 0x2b,
	0x33, 0xc1, 0x83, 0x25, 0x71, 0x17, 0xca, 0xdb, 0x95, 0x9a, 0x13, 0x9b, 0xdf, 0x59, 0xb1, 0x2b,
	0xfb, 0xf0, 0xee, 0xfb, 0x8f, 0xcf, 0xa9, 0xb2, 0xbd, 0xa7, 0x5c, 0x2f, 0x9a, 0xd7, 0x8f, 0x9b,
	0x7e, 0xe4, 0x37, 0xcd, 0x52, 0x4e, 0xad, 0x63, 0x14, 0x02, 0x74, 0x27, 0xde, 0x98, 0xca, 0xd7,
	0x8c, 0x0f, 0xd1, 0xe1, 0xda, 0x5a, 0x7a, 0xe2, 0x1b, 0x58, 0xb6, 0x66, 0xd5, 0xec, 0x7f, 0xe6,
	0x58, 0x62, 0x5a, 0x5e, 0xf1, 0xde, 0xc3, 0x4e, 0x9b, 0x18, 0xd8, 0xfd, 0x04, 0x1d, 0x69, 0xc8,
	0xbf, 0xf6, 0xfe, 0x1c, 0x24, 0x20, 0x53, 0xc2, 0x35, 0xec, 0x1a, 0x45, 0xcf, 0x13, 0x5f, 0x6f,
	0xa7, 0xea, 0x91, 0x06, 0xd6, 0xed, 0xea, 0x0a, 0x55, 0x09, 0xe2, 0xd4, 0x3a, 0x6e, 0x7d, 0xcd,
	0xc2, 0x5f, 0x0b, 0x36, 0x40, 0x03, 0xc8, 0x76, 0x25, 0xe6, 0x12, 0x1d, 0xcd, 0x10, 0x2b, 0xbd,
	0x5c, 0xf9, 0x6f, 0x7d, 0xc2, 0x6a, 0xd5, 0x3a, 0xbd, 0x29, 0x54, 0x75, 0xa5, 0xfa, 0x2d, 0x64,
	0xba, 0x92, 0x45, 0x6b, 0x87, 0xba, 0xa1, 0xfe, 0xb2, 0x4d, 0x92, 0xfa, 0x2c, 0x32, 0x36, 0xc9,
	0x77, 0x89, 0xbc, 0xd0, 0x2f, 0x65, 0x5b, 0x2d, 0xcb, 0x36, 0x89, 0x59, 0x31, 0x40, 0xf1, 0x24,
	0x14, 0xbb, 0x44, 0xb6, 0x93, 0xf7, 0xb7, 0x2d, 0xf2, 0xa1, 0x46, 0x1e, 0xd9, 0x95, 0x65, 0x64,
	0xc2, 0x30, 0xd6, 0x29, 0x29, 0x95, 0xc9, 0xc3, 0xde, 0x1a, 0xbb, 0x6c, 0x9d, 0x99, 0xd2, 0x04,
	0xa2, 0xb8, 0x43, 0x28, 0xb6, 0xc9, 0xcc, 0xaf, 0xf7, 0xdc, 0xe1, 0x1f, 0x44, 0xfe, 0xe6, 0xd3,
	0x73, 0x07, 0x1e, 0x30, 0x1e, 0x38, 0x1e, 0x95, 0xde, 0xc4, 0x1f, 0x12, 0xe9, 0xf8, 0x91, 0x3f,
	0xc0, 0x34, 0x74, 0xcc, 0x6f, 0x8c, 0x78, 0x93, 0xfc, 0xa5, 0x7a, 0x39, 0xdd, 0xc5, 0xc9, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x23, 0xef, 0x41, 0x71, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicMinerAPIClient is the client API for PublicMinerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicMinerAPIClient interface {
	// Mining returns an indication if this node is currently mining.
	Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
}

type publicMinerAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicMinerAPIClient(cc *grpc.ClientConn) PublicMinerAPIClient {
	return &publicMinerAPIClient{cc}
}

func (c *publicMinerAPIClient) Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/minerpb.PublicMinerAPI/Mining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/minerpb.PublicMinerAPI/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/minerpb.PublicMinerAPI/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/minerpb.PublicMinerAPI/SubmitHashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicMinerAPIServer is the server API for PublicMinerAPI service.
type PublicMinerAPIServer interface {
	// Mining returns an indication if this node is currently mining.
	Mining(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
}

func RegisterPublicMinerAPIServer(s *grpc.Server, srv PublicMinerAPIServer) {
	s.RegisterService(&_PublicMinerAPI_serviceDesc, srv)
}

func _PublicMinerAPI_Mining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).Mining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.PublicMinerAPI/Mining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).Mining(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.PublicMinerAPI/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.PublicMinerAPI/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).GetWork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitHashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.PublicMinerAPI/SubmitHashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicMinerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minerpb.PublicMinerAPI",
	HandlerType: (*PublicMinerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mining",
			Handler:    _PublicMinerAPI_Mining_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _PublicMinerAPI_SubmitWork_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _PublicMinerAPI_GetWork_Handler,
		},
		{
			MethodName: "SubmitHashrate",
			Handler:    _PublicMinerAPI_SubmitHashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miner.proto",
}

// MineControlClient is the client API for MineControl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MineControlClient interface {
	// Start the miner with the given number of threads. If threads is nil the number
	// of workers started is equal to the number of logical CPUs that are usable by
	// this process. If mining is already running, this method adjust the number of
	// threads allowed to use.
	Start(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error)
	// Stop the miner
	Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MineControlReply, error)
	// SetExtra sets the extra data string that is included when this miner mines a block.
	SetExtra(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error)
	// SetGasPrice sets the minimum accepted gas price for the miner.
	SetGasPrice(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error)
	// SetEtherbase sets the etherbase of the miner
	SetEtherbase(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error)
	// GetHashrate returns the current hashrate of the miner.
	GetHashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MineControlReply, error)
}

type privateMinerAPIClient struct {
	cc *grpc.ClientConn
}

func NewMineControlClient(cc *grpc.ClientConn) MineControlClient {
	return &privateMinerAPIClient{cc}
}

func (c *privateMinerAPIClient) Start(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) Stop(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetExtra(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/SetExtra", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetGasPrice(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/SetGasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) SetEtherbase(ctx context.Context, in *MineControlRequest, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/SetEtherbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateMinerAPIClient) GetHashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MineControlReply, error) {
	out := new(MineControlReply)
	err := c.cc.Invoke(ctx, "/minerpb.MineControl/GetHashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MineControlServer is the server API for MineControl service.
type MineControlServer interface {
	// Start the miner with the given number of threads. If threads is nil the number
	// of workers started is equal to the number of logical CPUs that are usable by
	// this process. If mining is already running, this method adjust the number of
	// threads allowed to use.
	Start(context.Context, *MineControlRequest) (*MineControlReply, error)
	// Stop the miner
	Stop(context.Context, *empty.Empty) (*MineControlReply, error)
	// SetExtra sets the extra data string that is included when this miner mines a block.
	SetExtra(context.Context, *MineControlRequest) (*MineControlReply, error)
	// SetGasPrice sets the minimum accepted gas price for the miner.
	SetGasPrice(context.Context, *MineControlRequest) (*MineControlReply, error)
	// SetEtherbase sets the etherbase of the miner
	SetEtherbase(context.Context, *MineControlRequest) (*MineControlReply, error)
	// GetHashrate returns the current hashrate of the miner.
	GetHashrate(context.Context, *empty.Empty) (*MineControlReply, error)
}

func RegisterMineControlServer(s *grpc.Server, srv MineControlServer) {
	s.RegisterService(&_MineControl_serviceDesc, srv)
}

func _MineControl_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).Start(ctx, req.(*MineControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineControl_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).Stop(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineControl_SetExtra_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).SetExtra(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/SetExtra",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).SetExtra(ctx, req.(*MineControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineControl_SetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).SetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/SetGasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).SetGasPrice(ctx, req.(*MineControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineControl_SetEtherbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MineControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).SetEtherbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/SetEtherbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).SetEtherbase(ctx, req.(*MineControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MineControl_GetHashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MineControlServer).GetHashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minerpb.MineControl/GetHashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MineControlServer).GetHashrate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MineControl_serviceDesc = grpc.ServiceDesc{
	ServiceName: "minerpb.MineControl",
	HandlerType: (*MineControlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _MineControl_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _MineControl_Stop_Handler,
		},
		{
			MethodName: "SetExtra",
			Handler:    _MineControl_SetExtra_Handler,
		},
		{
			MethodName: "SetGasPrice",
			Handler:    _MineControl_SetGasPrice_Handler,
		},
		{
			MethodName: "SetEtherbase",
			Handler:    _MineControl_SetEtherbase_Handler,
		},
		{
			MethodName: "GetHashrate",
			Handler:    _MineControl_GetHashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "miner.proto",
}
