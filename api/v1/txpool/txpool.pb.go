// Code generated by protoc-gen-go. DO NOT EDIT.
// source: txpool.proto

package txpoolpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RPCTransaction struct {
	BlockHash            []byte   `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber          []byte   `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	From                 []byte   `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Gas                  uint64   `protobuf:"varint,4,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,5,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Hash                 []byte   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	Input                []byte   `protobuf:"bytes,7,opt,name=input,proto3" json:"input,omitempty"`
	Nonce                uint64   `protobuf:"varint,8,opt,name=nonce,proto3" json:"nonce,omitempty"`
	To                   []byte   `protobuf:"bytes,9,opt,name=to,proto3" json:"to,omitempty"`
	TransactionIndex     uint32   `protobuf:"varint,10,opt,name=transaction_index,json=transactionIndex,proto3" json:"transaction_index,omitempty"`
	V                    []byte   `protobuf:"bytes,11,opt,name=v,proto3" json:"v,omitempty"`
	R                    []byte   `protobuf:"bytes,12,opt,name=r,proto3" json:"r,omitempty"`
	S                    []byte   `protobuf:"bytes,13,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RPCTransaction) Reset()         { *m = RPCTransaction{} }
func (m *RPCTransaction) String() string { return proto.CompactTextString(m) }
func (*RPCTransaction) ProtoMessage()    {}
func (*RPCTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e706a69112ae768, []int{0}
}

func (m *RPCTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RPCTransaction.Unmarshal(m, b)
}
func (m *RPCTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RPCTransaction.Marshal(b, m, deterministic)
}
func (m *RPCTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RPCTransaction.Merge(m, src)
}
func (m *RPCTransaction) XXX_Size() int {
	return xxx_messageInfo_RPCTransaction.Size(m)
}
func (m *RPCTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RPCTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RPCTransaction proto.InternalMessageInfo

func (m *RPCTransaction) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *RPCTransaction) GetBlockNumber() []byte {
	if m != nil {
		return m.BlockNumber
	}
	return nil
}

func (m *RPCTransaction) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *RPCTransaction) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *RPCTransaction) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *RPCTransaction) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *RPCTransaction) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *RPCTransaction) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *RPCTransaction) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *RPCTransaction) GetTransactionIndex() uint32 {
	if m != nil {
		return m.TransactionIndex
	}
	return 0
}

func (m *RPCTransaction) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *RPCTransaction) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RPCTransaction) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PublicTxPoolAPIReply struct {
	Status               map[string]uint64 `protobuf:"bytes,1,rep,name=status,proto3" json:"status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Content              *any.Any          `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	Inspect              *any.Any          `protobuf:"bytes,3,opt,name=inspect,proto3" json:"inspect,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *PublicTxPoolAPIReply) Reset()         { *m = PublicTxPoolAPIReply{} }
func (m *PublicTxPoolAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicTxPoolAPIReply) ProtoMessage()    {}
func (*PublicTxPoolAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e706a69112ae768, []int{1}
}

func (m *PublicTxPoolAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTxPoolAPIReply.Unmarshal(m, b)
}
func (m *PublicTxPoolAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTxPoolAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicTxPoolAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTxPoolAPIReply.Merge(m, src)
}
func (m *PublicTxPoolAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicTxPoolAPIReply.Size(m)
}
func (m *PublicTxPoolAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTxPoolAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTxPoolAPIReply proto.InternalMessageInfo

func (m *PublicTxPoolAPIReply) GetStatus() map[string]uint64 {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PublicTxPoolAPIReply) GetContent() *any.Any {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *PublicTxPoolAPIReply) GetInspect() *any.Any {
	if m != nil {
		return m.Inspect
	}
	return nil
}

func init() {
	proto.RegisterType((*RPCTransaction)(nil), "txpooldb.RPCTransaction")
	proto.RegisterType((*PublicTxPoolAPIReply)(nil), "txpooldb.PublicTxPoolAPIReply")
	proto.RegisterMapType((map[string]uint64)(nil), "txpooldb.PublicTxPoolAPIReply.StatusEntry")
}

func init() { proto.RegisterFile("txpool.proto", fileDescriptor_4e706a69112ae768) }

var fileDescriptor_4e706a69112ae768 = []byte{
	// 538 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x52, 0xcf, 0x6e, 0xd3, 0x30,
	0x18, 0x57, 0xb2, 0xae, 0x7f, 0xbe, 0x76, 0x63, 0x58, 0xd5, 0x30, 0xed, 0x40, 0x5d, 0xc4, 0xa1,
	0x2a, 0x92, 0x03, 0xe5, 0x02, 0xbd, 0x6d, 0xd3, 0x24, 0x7a, 0x41, 0x55, 0xd8, 0x89, 0x4b, 0xe5,
	0x78, 0x5e, 0x1a, 0x35, 0xb5, 0xa3, 0xd8, 0xa9, 0xda, 0x2b, 0xaf, 0xc0, 0xeb, 0x70, 0xe4, 0x0d,
	0x78, 0x05, 0x5e, 0x81, 0x3b, 0xb2, 0x9d, 0x8a, 0xa9, 0xfc, 0x39, 0x20, 0x2e, 0xd1, 0xf7, 0xfb,
	0x13, 0xff, 0xfc, 0x7d, 0x9f, 0xa1, 0xa3, 0x37, 0xb9, 0x94, 0x19, 0xc9, 0x0b, 0xa9, 0x25, 0x6a,
	0x3a, 0x74, 0x1b, 0xf7, 0xfa, 0x89, 0x94, 0x49, 0xc6, 0x43, 0xcb, 0xc7, 0xe5, 0x5d, 0xc8, 0x57,
	0xb9, 0xde, 0x3a, 0x5b, 0xef, 0xf1, 0xbe, 0x48, 0xc5, 0x4e, 0x3a, 0xab, 0x24, 0x9a, 0xa7, 0x21,
	0x15, 0x42, 0x6a, 0xaa, 0x53, 0x29, 0x94, 0x53, 0x83, 0xcf, 0x3e, 0x1c, 0x47, 0xb3, 0xab, 0x9b,
	0x82, 0x0a, 0x45, 0x99, 0x51, 0xd0, 0x13, 0x80, 0x38, 0x93, 0x6c, 0x39, 0x5f, 0x50, 0xb5, 0xc0,
	0xde, 0xc0, 0x1b, 0x76, 0xa2, 0x96, 0x65, 0xde, 0x52, 0xb5, 0x40, 0xe7, 0xd0, 0x71, 0xb2, 0x28,
	0x57, 0x31, 0x2f, 0xb0, 0x6f, 0x0d, 0x6d, 0xcb, 0xbd, 0xb3, 0x14, 0x42, 0x50, 0xbb, 0x2b, 0xe4,
	0x0a, 0x1f, 0x58, 0xc9, 0xd6, 0xe8, 0x04, 0x0e, 0x12, 0xaa, 0x70, 0x6d, 0xe0, 0x0d, 0x6b, 0x91,
	0x29, 0x51, 0x1f, 0x5a, 0x09, 0x55, 0xf3, 0xbc, 0x48, 0x19, 0xc7, 0x87, 0xd6, 0xda, 0x4c, 0xa8,
	0x9a, 0x19, 0x6c, 0x8e, 0xb0, 0xf1, 0x75, 0x77, 0x84, 0xa9, 0x51, 0x17, 0x0e, 0x53, 0x91, 0x97,
	0x1a, 0x37, 0x2c, 0xe9, 0x80, 0x61, 0x85, 0x14, 0x8c, 0xe3, 0xa6, 0x3d, 0xda, 0x01, 0x74, 0x0c,
	0xbe, 0x96, 0xb8, 0x65, 0x8d, 0xbe, 0x96, 0xe8, 0x39, 0x3c, 0xd4, 0x3f, 0x7b, 0x9c, 0xa7, 0xe2,
	0x96, 0x6f, 0x30, 0x0c, 0xbc, 0xe1, 0x51, 0x74, 0x72, 0x4f, 0x98, 0x1a, 0x1e, 0x75, 0xc0, 0x5b,
	0xe3, 0xb6, 0xfd, 0xd7, 0x5b, 0x1b, 0x54, 0xe0, 0x8e, 0x43, 0x85, 0x41, 0x0a, 0x1f, 0x39, 0xa4,
	0x82, 0xef, 0x1e, 0x74, 0x67, 0x65, 0x9c, 0xa5, 0xec, 0x66, 0x33, 0x93, 0x32, 0xbb, 0x98, 0x4d,
	0x23, 0x9e, 0x67, 0x5b, 0x74, 0x09, 0x75, 0xa5, 0xa9, 0x2e, 0x15, 0xf6, 0x06, 0x07, 0xc3, 0xf6,
	0x78, 0x44, 0x76, 0x8b, 0x24, 0xbf, 0xf3, 0x93, 0xf7, 0xd6, 0x7c, 0x2d, 0x74, 0xb1, 0x8d, 0xaa,
	0x3f, 0x11, 0x81, 0x06, 0x93, 0x42, 0x73, 0xa1, 0xed, 0x90, 0xdb, 0xe3, 0x2e, 0x71, 0xbb, 0x24,
	0xbb, 0x35, 0x93, 0x0b, 0xb1, 0x8d, 0x76, 0x26, 0xe3, 0x4f, 0x85, 0xca, 0x39, 0xd3, 0x76, 0xf2,
	0x7f, 0xf4, 0x57, 0xa6, 0xde, 0x1b, 0x68, 0xdf, 0x8b, 0x35, 0x1b, 0x5a, 0xf2, 0xad, 0x5d, 0x78,
	0x2b, 0x32, 0xa5, 0x19, 0xed, 0x9a, 0x66, 0x25, 0xb7, 0xf1, 0xb5, 0xc8, 0x81, 0x89, 0xff, 0xda,
	0x1b, 0x7f, 0xf1, 0xe1, 0xc1, 0x5e, 0x1f, 0x88, 0x43, 0xe3, 0xaa, 0xba, 0xc9, 0xe9, 0x2f, 0xc1,
	0xd7, 0xe6, 0xb1, 0xf6, 0x9e, 0xfe, 0x7d, 0x0a, 0x41, 0xf0, 0xf1, 0xeb, 0xb7, 0x4f, 0xfe, 0x59,
	0xf0, 0xc8, 0xbc, 0x56, 0x15, 0xae, 0x5f, 0x86, 0xce, 0x1f, 0x56, 0x2d, 0x4e, 0xbc, 0x91, 0x89,
	0x99, 0xba, 0x06, 0xfe, 0x7f, 0x4c, 0x35, 0x19, 0x13, 0xc3, 0xa0, 0xee, 0x86, 0xf3, 0xcf, 0x29,
	0xe7, 0x36, 0xa5, 0x1f, 0x9c, 0xee, 0xa7, 0xb8, 0xf5, 0x4e, 0xbc, 0xd1, 0xe5, 0x0b, 0x78, 0x26,
	0x8b, 0x84, 0xc4, 0xa9, 0x8e, 0x4b, 0xb6, 0xe4, 0x9a, 0xb0, 0x9c, 0x2d, 0x68, 0x2a, 0x88, 0xfb,
	0x3a, 0x7f, 0x1e, 0x7f, 0x68, 0xee, 0xaa, 0xb8, 0x6e, 0x2f, 0xf1, 0xea, 0x47, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x73, 0x17, 0x59, 0x1b, 0x26, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicTxPoolAPIClient is the client API for PublicTxPoolAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicTxPoolAPIClient interface {
	Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
	Inspect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
	Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error)
}

type publicTxPoolAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicTxPoolAPIClient(cc *grpc.ClientConn) PublicTxPoolAPIClient {
	return &publicTxPoolAPIClient{cc}
}

func (c *publicTxPoolAPIClient) Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/txpooldb.PublicTxPoolAPI/Content", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTxPoolAPIClient) Inspect(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/txpooldb.PublicTxPoolAPI/Inspect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTxPoolAPIClient) Status(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTxPoolAPIReply, error) {
	out := new(PublicTxPoolAPIReply)
	err := c.cc.Invoke(ctx, "/txpooldb.PublicTxPoolAPI/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicTxPoolAPIServer is the server API for PublicTxPoolAPI service.
type PublicTxPoolAPIServer interface {
	Content(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
	Inspect(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
	Status(context.Context, *empty.Empty) (*PublicTxPoolAPIReply, error)
}

func RegisterPublicTxPoolAPIServer(s *grpc.Server, srv PublicTxPoolAPIServer) {
	s.RegisterService(&_PublicTxPoolAPI_serviceDesc, srv)
}

func _PublicTxPoolAPI_Content_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Content(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpooldb.PublicTxPoolAPI/Content",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Content(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTxPoolAPI_Inspect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Inspect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpooldb.PublicTxPoolAPI/Inspect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Inspect(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTxPoolAPI_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTxPoolAPIServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpooldb.PublicTxPoolAPI/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTxPoolAPIServer).Status(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicTxPoolAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txpooldb.PublicTxPoolAPI",
	HandlerType: (*PublicTxPoolAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Content",
			Handler:    _PublicTxPoolAPI_Content_Handler,
		},
		{
			MethodName: "Inspect",
			Handler:    _PublicTxPoolAPI_Inspect_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _PublicTxPoolAPI_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "txpool.proto",
}
