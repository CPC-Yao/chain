// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/txpool/txpool.proto

package txpoolpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("v1/txpool/txpool.proto", fileDescriptor_4fff8348ec1dc78f) }

var fileDescriptor_4fff8348ec1dc78f = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2b, 0x33, 0xd4, 0x2f,
	0xa9, 0x28, 0xc8, 0xcf, 0xcf, 0x81, 0x52, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10,
	0x9e, 0x94, 0x74, 0x7a, 0x7e, 0x7e, 0x7a, 0x4e, 0xaa, 0x3e, 0x58, 0x34, 0xa9, 0x34, 0x4d, 0x3f,
	0x35, 0xb7, 0xa0, 0xa4, 0x12, 0xa2, 0x48, 0x4a, 0x06, 0x2a, 0x99, 0x58, 0x90, 0xa9, 0x9f, 0x98,
	0x97, 0x97, 0x5f, 0x92, 0x58, 0x92, 0x99, 0x9f, 0x57, 0x0c, 0x91, 0x35, 0x2a, 0xe5, 0x12, 0x0d,
	0x29, 0x4a, 0xcc, 0x2b, 0x4e, 0x4c, 0x06, 0x89, 0x06, 0xe4, 0xe7, 0xe7, 0x04, 0xa5, 0x26, 0xa6,
	0xa4, 0x16, 0x09, 0xc5, 0x70, 0xb1, 0x3b, 0xe7, 0xe7, 0x95, 0xa4, 0xe6, 0x95, 0x08, 0x89, 0xe9,
	0x41, 0x8c, 0xd0, 0x83, 0x99, 0xaf, 0xe7, 0x0a, 0x32, 0x5f, 0x0a, 0x87, 0xb8, 0x92, 0x62, 0xd3,
	0xe5, 0x27, 0x93, 0x99, 0xa4, 0x95, 0xc4, 0xc0, 0x76, 0x22, 0xdc, 0x9e, 0x0c, 0x31, 0xcf, 0x8a,
	0x51, 0xcb, 0x89, 0x2b, 0x8a, 0x03, 0x22, 0x58, 0x90, 0x94, 0xc4, 0x06, 0xd6, 0x6e, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x15, 0x47, 0xd5, 0x4b, 0xe6, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionPoolReaderClient is the client API for TransactionPoolReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionPoolReaderClient interface {
	Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type transactionPoolReaderClient struct {
	cc *grpc.ClientConn
}

func NewTransactionPoolReaderClient(cc *grpc.ClientConn) TransactionPoolReaderClient {
	return &transactionPoolReaderClient{cc}
}

func (c *transactionPoolReaderClient) Content(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/txpool.TransactionPoolReader/Content", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionPoolReaderServer is the server API for TransactionPoolReader service.
type TransactionPoolReaderServer interface {
	Content(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterTransactionPoolReaderServer(s *grpc.Server, srv TransactionPoolReaderServer) {
	s.RegisterService(&_TransactionPoolReader_serviceDesc, srv)
}

func _TransactionPoolReader_Content_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).Content(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/txpool.TransactionPoolReader/Content",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).Content(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionPoolReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "txpool.TransactionPoolReader",
	HandlerType: (*TransactionPoolReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Content",
			Handler:    _TransactionPoolReader_Content_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/txpool/txpool.proto",
}
