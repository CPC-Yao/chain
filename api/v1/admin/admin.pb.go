// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

package adminpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChainManagerRequest struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainManagerRequest) Reset()         { *m = ChainManagerRequest{} }
func (m *ChainManagerRequest) String() string { return proto.CompactTextString(m) }
func (*ChainManagerRequest) ProtoMessage()    {}
func (*ChainManagerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

func (m *ChainManagerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainManagerRequest.Unmarshal(m, b)
}
func (m *ChainManagerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainManagerRequest.Marshal(b, m, deterministic)
}
func (m *ChainManagerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainManagerRequest.Merge(m, src)
}
func (m *ChainManagerRequest) XXX_Size() int {
	return xxx_messageInfo_ChainManagerRequest.Size(m)
}
func (m *ChainManagerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainManagerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainManagerRequest proto.InternalMessageInfo

func (m *ChainManagerRequest) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

type ChainManagerReply struct {
	IsOk                 bool     `protobuf:"varint,1,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainManagerReply) Reset()         { *m = ChainManagerReply{} }
func (m *ChainManagerReply) String() string { return proto.CompactTextString(m) }
func (*ChainManagerReply) ProtoMessage()    {}
func (*ChainManagerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{1}
}

func (m *ChainManagerReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainManagerReply.Unmarshal(m, b)
}
func (m *ChainManagerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainManagerReply.Marshal(b, m, deterministic)
}
func (m *ChainManagerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainManagerReply.Merge(m, src)
}
func (m *ChainManagerReply) XXX_Size() int {
	return xxx_messageInfo_ChainManagerReply.Size(m)
}
func (m *ChainManagerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainManagerReply.DiscardUnknown(m)
}

var xxx_messageInfo_ChainManagerReply proto.InternalMessageInfo

func (m *ChainManagerReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func init() {
	proto.RegisterType((*ChainManagerRequest)(nil), "adminpb.ChainManagerRequest")
	proto.RegisterType((*ChainManagerReply)(nil), "adminpb.ChainManagerReply")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0xc9, 0xcd,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x07, 0x73, 0x0a, 0x92, 0xa4, 0x64, 0xd2,
	0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0x13, 0x0b, 0x32, 0xf5, 0x13, 0xf3, 0xf2, 0xf2, 0x4b, 0x12,
	0x4b, 0x32, 0xf3, 0xf3, 0x8a, 0x21, 0xca, 0x94, 0x74, 0xb8, 0xc4, 0x02, 0x8a, 0x32, 0xcb, 0x12,
	0x4b, 0x52, 0x1d, 0x41, 0xea, 0x1d, 0x03, 0x3c, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84,
	0x84, 0xb8, 0x58, 0xd2, 0x32, 0x73, 0x52, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c,
	0x25, 0x6d, 0x2e, 0x11, 0x0c, 0xd5, 0x05, 0x39, 0x95, 0x42, 0xc2, 0x5c, 0xac, 0x99, 0xc5, 0xf1,
	0xf9, 0xd9, 0x60, 0xc5, 0x1c, 0x41, 0x2c, 0x99, 0xc5, 0xfe, 0xd9, 0x46, 0x7f, 0x19, 0xb9, 0xf8,
	0xd1, 0x54, 0x0b, 0x95, 0x70, 0x71, 0xbb, 0x56, 0x14, 0xe4, 0x17, 0x95, 0x38, 0x67, 0x24, 0x66,
	0xe6, 0x09, 0xc9, 0xeb, 0x41, 0x5d, 0xa9, 0x87, 0xdd, 0x11, 0x52, 0xb2, 0xb8, 0x15, 0x14, 0xe4,
	0x54, 0x2a, 0xa9, 0x36, 0x5d, 0x7e, 0x32, 0x99, 0x49, 0x5e, 0x49, 0x0a, 0xe4, 0xbb, 0x62, 0xfd,
	0x32, 0x43, 0x7d, 0xb0, 0x72, 0xfd, 0x54, 0x84, 0x1d, 0x56, 0x8c, 0x5a, 0x20, 0x5b, 0x3d, 0x73,
	0x69, 0x6f, 0x6b, 0x66, 0x2e, 0xb2, 0xad, 0x4e, 0x7a, 0x5c, 0xca, 0xf9, 0x45, 0xe9, 0x7a, 0x49,
	0x99, 0x25, 0x49, 0xa5, 0xc9, 0xd9, 0xa9, 0x25, 0x7a, 0xc9, 0x05, 0xc9, 0x20, 0x39, 0x3d, 0x08,
	0x09, 0xb5, 0x22, 0x0a, 0x16, 0x51, 0x49, 0x6c, 0xe0, 0x18, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0x4e, 0xc4, 0xf2, 0xc7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainManagerClient is the client API for ChainManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainManagerClient interface {
	// ExportChain exports the current blockchain into a local file.
	ExportChain(ctx context.Context, in *ChainManagerRequest, opts ...grpc.CallOption) (*ChainManagerReply, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(ctx context.Context, in *ChainManagerRequest, opts ...grpc.CallOption) (*ChainManagerReply, error)
}

type privateAdminAPIClient struct {
	cc *grpc.ClientConn
}

func NewChainManagerClient(cc *grpc.ClientConn) ChainManagerClient {
	return &privateAdminAPIClient{cc}
}

func (c *privateAdminAPIClient) ExportChain(ctx context.Context, in *ChainManagerRequest, opts ...grpc.CallOption) (*ChainManagerReply, error) {
	out := new(ChainManagerReply)
	err := c.cc.Invoke(ctx, "/adminpb.ChainManager/ExportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAdminAPIClient) ImportChain(ctx context.Context, in *ChainManagerRequest, opts ...grpc.CallOption) (*ChainManagerReply, error) {
	out := new(ChainManagerReply)
	err := c.cc.Invoke(ctx, "/adminpb.ChainManager/ImportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainManagerServer is the server API for ChainManager service.
type ChainManagerServer interface {
	// ExportChain exports the current blockchain into a local file.
	ExportChain(context.Context, *ChainManagerRequest) (*ChainManagerReply, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(context.Context, *ChainManagerRequest) (*ChainManagerReply, error)
}

func RegisterChainManagerServer(s *grpc.Server, srv ChainManagerServer) {
	s.RegisterService(&_ChainManager_serviceDesc, srv)
}

func _ChainManager_ExportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManagerServer).ExportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.ChainManager/ExportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManagerServer).ExportChain(ctx, req.(*ChainManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainManager_ImportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainManagerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManagerServer).ImportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/adminpb.ChainManager/ImportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManagerServer).ImportChain(ctx, req.(*ChainManagerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "adminpb.ChainManager",
	HandlerType: (*ChainManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportChain",
			Handler:    _ChainManager_ExportChain_Handler,
		},
		{
			MethodName: "ImportChain",
			Handler:    _ChainManager_ImportChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
