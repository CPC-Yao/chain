syntax = "proto3";

import "v1/commonpb/common.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/api/annotations.proto";

option go_package = "cpcpb";

package cpc;

// Coinbase provides an API to access Ethereum full node-related
service Coinbase {
    // Coinbase is the address that mining rewards will be send to 
    rpc Coinbase(google.protobuf.Empty) returns (common.Address) {
        option (google.api.http) = {
            post: "/api/v1/cpc/coinbase"
            body: "*"
          };
    }
}


// Works a work package for external miner. The work package consists of 3 strings
// result[0], 32 bytes hex encoded current block header pow-hash
// result[1], 32 bytes hex encoded seed hash used for DAG
// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
message Works {
    map<int32, string> works = 1;
}

// MinerReadder provides an API to control the miner.
// It offers only methods that operate on data that pose no security risk when it is publicly accessible.
service MinerReader {
    // Mining returns an indication if this node is currently mining.
    rpc Mining(google.protobuf.Empty) returns (common.IsOk) {
        option (google.api.http) = {
            post: "/api/v1/cpc/mining"
            body: "*"
          };
    }
    // GetWork returns a work package for external miner. The work package consists of 3 strings
    // result[0], 32 bytes hex encoded current block header pow-hash
    // result[1], 32 bytes hex encoded seed hash used for DAG
    // result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
    rpc GetWork(google.protobuf.Empty) returns (Works) {
        option (google.api.http) = {
            post: "/api/v1/cpc/getWork"
            body: "*"
          };
    }
}

// AccountReader provides an API to access accounts managed by this node.
// It offers only methods that can retrieve accounts.
service AccountReader {
    // Accounts returns the collection of accounts this node manages
    rpc Accounts(google.protobuf.Empty) returns (common.Addresses) {
        option (google.api.http) = {
            post : "/api/v1/cpc/accounts"
            body : "*"
        };
    }
}

// ChainStateReader provides an API to access the Ethereum blockchain.
// It offers only methods that operate on public data that is freely available to anyone.
service ChainStateReader {
    // GasPrice returns a suggestion for a gas price.
    rpc GasPrice(google.protobuf.Empty) returns (common.GasPrice) {
        option (google.api.http) = {
            post : "/api/v1/cpc/gasPrice"
            body : "*"
        };
    }

    // ProtocolVersion returns the current Ethereum protocol version this node supports
    rpc ProtocolVersion(google.protobuf.Empty) returns (google.protobuf.UInt32Value) {
        option (google.api.http) = {
            post : "/api/v1/cpc/protocolVersion"
            body : "*"
        };
    }

    // Syncing returns false in case the node is currently not syncing with the network. It can be up to date or has not
    // yet received the latest block headers from its pears. In case it is synchronizing:
    // - startingBlock: block number this node started to synchronise from
    // - currentBlock:  block number this node is currently importing
    // - highestBlock:  block number of the highest block header this node has received from peers
    // - pulledStates:  number of state entries processed until now
    // - knownStates:   number of known state entries that still need to be pulled
    rpc Syncing(google.protobuf.Empty) returns (common.SyncingInfo) {
        option (google.api.http) = {
            post : "/api/v1/cpc/syncing"
            body : "*"
        };
    }

}

//ChainReaderRequest ChainReader request arguments
message ChainReaderRequest {
    string address = 1;
    string block_hash = 2;
    int64 block_number = 3;
    bool is_full = 4;
}

// ChainReader provides an API to access the Ethereum blockchain.
// It offers only methods that operate on public data that is freely available to anyone.
service ChainReader {
    // GetBlockCount returns the block number of the chain head.
    rpc GetBlockCount(google.protobuf.Empty) returns (common.BlockNumber) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockCount"
            body : "*"
        };
    }

    // GetBalance returns the amount of wei for the given address in the state of the
    // given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
    // block numbers are also allowed.
    rpc GetBalance(ChainReaderRequest) returns (common.Balance) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBalance"
            body : "*"
        };
    }

// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
    rpc GetBlockByNumber(ChainReaderRequest) returns (common.Block) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockByNumber"
            body : "*"
        };
    }

    // GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
    // detail, otherwise only the transaction hash is returned.
    rpc GetBlockByHash(ChainReaderRequest) returns (common.Block) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getBlockByHash"
            body : "*"
        };
    }
}

message TransactionCount {
    uint64 transaction_count = 1;
}

message TransactionPoolReaderRequest {
    uint64 block_number = 1;
    uint64 index = 2;
    string block_hash =3;
    string address = 4;
}

message RawTransaction {
    bytes raw_transaction = 1;
}

message TransactionHash {
    string transaction_hash = 1;
}

service TransactionPoolReader {
    rpc GetTransactionCountByBlockNumber(common.BlockNumber) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCountByBlockNumber"
            body : "*"
        };
    }
    rpc GetTransactionCountByBlockHash(common.BlockHash) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCountByBlockHash"
            body : "*"
        };
    }
    rpc GetTransactionByBlockNumberAndIndex(TransactionPoolReaderRequest) returns (common.Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByBlockNumberAndIndex"
            body : "*"
        };
    }
    rpc GetTransactionByBlockHashAndIndex(TransactionPoolReaderRequest) returns (common.Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByBlockHashAndIndex"
            body : "*"
        };
    }
    rpc GetRawTransactionByBlockNumberAndIndex(TransactionPoolReaderRequest) returns (RawTransaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getRawTransactionByBlockNumberAndIndex"
            body : "*"
        };
    }
    rpc GetTransactionByHash(TransactionHash) returns (common.Transaction) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionByHash"
            body : "*"
        };
    }
    rpc GetTransactionReceipt(TransactionHash) returns (common.Receipt) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionReceipt"
            body : "*"
        };
    }
    rpc GetTransactionCount(TransactionPoolReaderRequest) returns (TransactionCount) {
        option (google.api.http) = {
            post : "/api/v1/cpc/getTransactionCount"
            body : "*"
        };
    }
}
