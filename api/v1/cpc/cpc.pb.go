// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/cpc/cpc.proto

package cpcpb

import (
	commonpb "bitbucket.org/cpchain/chain/api/v1/commonpb"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Works a work package for external miner. The work package consists of 3 strings
// result[0], 32 bytes hex encoded current block header pow-hash
// result[1], 32 bytes hex encoded seed hash used for DAG
// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
type Works struct {
	Works                map[int32]string `protobuf:"bytes,1,rep,name=works,proto3" json:"works,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Works) Reset()         { *m = Works{} }
func (m *Works) String() string { return proto.CompactTextString(m) }
func (*Works) ProtoMessage()    {}
func (*Works) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{0}
}

func (m *Works) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Works.Unmarshal(m, b)
}
func (m *Works) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Works.Marshal(b, m, deterministic)
}
func (m *Works) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Works.Merge(m, src)
}
func (m *Works) XXX_Size() int {
	return xxx_messageInfo_Works.Size(m)
}
func (m *Works) XXX_DiscardUnknown() {
	xxx_messageInfo_Works.DiscardUnknown(m)
}

var xxx_messageInfo_Works proto.InternalMessageInfo

func (m *Works) GetWorks() map[int32]string {
	if m != nil {
		return m.Works
	}
	return nil
}

// ChainReaderRequest ChainReader request arguments
type ChainReaderRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash            string   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber          int64    `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	IsFull               bool     `protobuf:"varint,4,opt,name=is_full,json=isFull,proto3" json:"is_full,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainReaderRequest) Reset()         { *m = ChainReaderRequest{} }
func (m *ChainReaderRequest) String() string { return proto.CompactTextString(m) }
func (*ChainReaderRequest) ProtoMessage()    {}
func (*ChainReaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{1}
}

func (m *ChainReaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainReaderRequest.Unmarshal(m, b)
}
func (m *ChainReaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainReaderRequest.Marshal(b, m, deterministic)
}
func (m *ChainReaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainReaderRequest.Merge(m, src)
}
func (m *ChainReaderRequest) XXX_Size() int {
	return xxx_messageInfo_ChainReaderRequest.Size(m)
}
func (m *ChainReaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainReaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainReaderRequest proto.InternalMessageInfo

func (m *ChainReaderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChainReaderRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *ChainReaderRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ChainReaderRequest) GetIsFull() bool {
	if m != nil {
		return m.IsFull
	}
	return false
}

type TransactionCount struct {
	TransactionCount     uint64   `protobuf:"varint,1,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionCount) Reset()         { *m = TransactionCount{} }
func (m *TransactionCount) String() string { return proto.CompactTextString(m) }
func (*TransactionCount) ProtoMessage()    {}
func (*TransactionCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{2}
}

func (m *TransactionCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCount.Unmarshal(m, b)
}
func (m *TransactionCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCount.Marshal(b, m, deterministic)
}
func (m *TransactionCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCount.Merge(m, src)
}
func (m *TransactionCount) XXX_Size() int {
	return xxx_messageInfo_TransactionCount.Size(m)
}
func (m *TransactionCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCount.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionCount proto.InternalMessageInfo

func (m *TransactionCount) GetTransactionCount() uint64 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

type TransactionPoolReaderRequest struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BlockHash            string   `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionPoolReaderRequest) Reset()         { *m = TransactionPoolReaderRequest{} }
func (m *TransactionPoolReaderRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPoolReaderRequest) ProtoMessage()    {}
func (*TransactionPoolReaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{3}
}

func (m *TransactionPoolReaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionPoolReaderRequest.Unmarshal(m, b)
}
func (m *TransactionPoolReaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionPoolReaderRequest.Marshal(b, m, deterministic)
}
func (m *TransactionPoolReaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPoolReaderRequest.Merge(m, src)
}
func (m *TransactionPoolReaderRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionPoolReaderRequest.Size(m)
}
func (m *TransactionPoolReaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPoolReaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPoolReaderRequest proto.InternalMessageInfo

func (m *TransactionPoolReaderRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionPoolReaderRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionPoolReaderRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TransactionPoolReaderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RawTransaction struct {
	RawTransaction       []byte   `protobuf:"bytes,1,opt,name=raw_transaction,json=rawTransaction,proto3" json:"raw_transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTransaction) Reset()         { *m = RawTransaction{} }
func (m *RawTransaction) String() string { return proto.CompactTextString(m) }
func (*RawTransaction) ProtoMessage()    {}
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{4}
}

func (m *RawTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTransaction.Unmarshal(m, b)
}
func (m *RawTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTransaction.Marshal(b, m, deterministic)
}
func (m *RawTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTransaction.Merge(m, src)
}
func (m *RawTransaction) XXX_Size() int {
	return xxx_messageInfo_RawTransaction.Size(m)
}
func (m *RawTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RawTransaction proto.InternalMessageInfo

func (m *RawTransaction) GetRawTransaction() []byte {
	if m != nil {
		return m.RawTransaction
	}
	return nil
}

type TransactionHash struct {
	TransactionHash      string   `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionHash) Reset()         { *m = TransactionHash{} }
func (m *TransactionHash) String() string { return proto.CompactTextString(m) }
func (*TransactionHash) ProtoMessage()    {}
func (*TransactionHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_2dce01fedbe4c8ea, []int{5}
}

func (m *TransactionHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionHash.Unmarshal(m, b)
}
func (m *TransactionHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionHash.Marshal(b, m, deterministic)
}
func (m *TransactionHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHash.Merge(m, src)
}
func (m *TransactionHash) XXX_Size() int {
	return xxx_messageInfo_TransactionHash.Size(m)
}
func (m *TransactionHash) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHash.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHash proto.InternalMessageInfo

func (m *TransactionHash) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func init() {
	proto.RegisterType((*Works)(nil), "cpc.Works")
	proto.RegisterMapType((map[int32]string)(nil), "cpc.Works.WorksEntry")
	proto.RegisterType((*ChainReaderRequest)(nil), "cpc.ChainReaderRequest")
	proto.RegisterType((*TransactionCount)(nil), "cpc.TransactionCount")
	proto.RegisterType((*TransactionPoolReaderRequest)(nil), "cpc.TransactionPoolReaderRequest")
	proto.RegisterType((*RawTransaction)(nil), "cpc.RawTransaction")
	proto.RegisterType((*TransactionHash)(nil), "cpc.TransactionHash")
}

func init() { proto.RegisterFile("v1/cpc/cpc.proto", fileDescriptor_2dce01fedbe4c8ea) }

var fileDescriptor_2dce01fedbe4c8ea = []byte{
	// 1031 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xdf, 0x6e, 0xe3, 0xc4,
	0x17, 0x96, 0x9b, 0xa6, 0x49, 0x4f, 0xff, 0x24, 0x9d, 0xa6, 0xdb, 0x6c, 0xda, 0x6d, 0x93, 0xf9,
	0xed, 0x76, 0xf3, 0x4b, 0x97, 0x44, 0x9b, 0x05, 0x6d, 0x89, 0x40, 0xa8, 0xa9, 0x96, 0xd0, 0x8b,
	0x42, 0xe5, 0xdd, 0x2d, 0x82, 0x9b, 0x30, 0x71, 0xa6, 0xa9, 0x55, 0x67, 0x6c, 0xec, 0xc9, 0x96,
	0x88, 0x2b, 0xb8, 0x41, 0xdc, 0x21, 0x10, 0x17, 0x5c, 0xf1, 0x00, 0xdc, 0xf1, 0x2a, 0x48, 0x3c,
	0x01, 0x0f, 0x82, 0x66, 0x3c, 0x26, 0xb6, 0x6b, 0xb7, 0x95, 0xf6, 0xa2, 0x95, 0xe7, 0x9c, 0x93,
	0xef, 0xfb, 0xe6, 0x9b, 0x33, 0x67, 0xa0, 0xf8, 0xe6, 0x69, 0xcb, 0x70, 0x0c, 0xf1, 0xd7, 0x74,
	0x5c, 0x9b, 0xdb, 0x28, 0x63, 0x38, 0x46, 0xa5, 0x2c, 0xc2, 0xf6, 0x78, 0x6c, 0x33, 0x67, 0xa0,
	0x3e, 0xfc, 0x74, 0x65, 0x6b, 0x64, 0xdb, 0x23, 0x8b, 0xb6, 0xe4, 0x6a, 0x30, 0x39, 0x6f, 0xd1,
	0xb1, 0xc3, 0xa7, 0x2a, 0xb9, 0x13, 0x4f, 0x5e, 0xb9, 0xc4, 0x71, 0xa8, 0xeb, 0xa9, 0xfc, 0xb6,
	0xca, 0x13, 0xc7, 0x6c, 0x11, 0xc6, 0x6c, 0x4e, 0xb8, 0x69, 0x33, 0x95, 0xc5, 0x0c, 0xb2, 0x9f,
	0xdb, 0xee, 0xa5, 0x87, 0xf6, 0x21, 0x7b, 0x25, 0x3e, 0xca, 0x5a, 0x35, 0x53, 0x5f, 0x6a, 0x6f,
	0x34, 0x85, 0x3a, 0x99, 0xf2, 0xff, 0xbf, 0x60, 0xdc, 0x9d, 0xea, 0x7e, 0x4d, 0xe5, 0x00, 0x60,
	0x16, 0x44, 0x45, 0xc8, 0x5c, 0xd2, 0x69, 0x59, 0xab, 0x6a, 0xf5, 0xac, 0x2e, 0x3e, 0x51, 0x09,
	0xb2, 0x6f, 0x88, 0x35, 0xa1, 0xe5, 0xb9, 0xaa, 0x56, 0x5f, 0xd4, 0xfd, 0x45, 0x67, 0xee, 0x40,
	0xc3, 0x3f, 0x6a, 0x80, 0x8e, 0x2e, 0x88, 0xc9, 0x74, 0x4a, 0x86, 0xd4, 0xd5, 0xe9, 0xd7, 0x13,
	0xea, 0x71, 0x54, 0x86, 0x1c, 0x19, 0x0e, 0x5d, 0xea, 0x79, 0x12, 0x66, 0x51, 0x0f, 0x96, 0xe8,
	0x01, 0xc0, 0xc0, 0xb2, 0x8d, 0xcb, 0xfe, 0x05, 0xf1, 0x2e, 0x14, 0xde, 0xa2, 0x8c, 0x7c, 0x42,
	0xbc, 0x0b, 0x54, 0x83, 0x65, 0x3f, 0xcd, 0x26, 0xe3, 0x01, 0x75, 0xcb, 0x99, 0xaa, 0x56, 0xcf,
	0xe8, 0x4b, 0x32, 0xf6, 0xa9, 0x0c, 0xa1, 0x4d, 0xc8, 0x99, 0x5e, 0xff, 0x7c, 0x62, 0x59, 0xe5,
	0xf9, 0xaa, 0x56, 0xcf, 0xeb, 0x0b, 0xa6, 0xf7, 0xf1, 0xc4, 0xb2, 0xf0, 0x47, 0x50, 0x7c, 0xe5,
	0x12, 0xe6, 0x11, 0x43, 0x38, 0x72, 0x64, 0x4f, 0x18, 0x47, 0xfb, 0xb0, 0xc6, 0x67, 0xb1, 0xbe,
	0x21, 0x82, 0x52, 0xd2, 0xbc, 0x5e, 0xe4, 0xb1, 0x62, 0xfc, 0x93, 0x06, 0xdb, 0x21, 0x84, 0x53,
	0xdb, 0xb6, 0xa2, 0xdb, 0x8a, 0xab, 0xf3, 0x81, 0x22, 0xea, 0x4a, 0x90, 0x35, 0xd9, 0x90, 0x7e,
	0x23, 0xb7, 0x36, 0xaf, 0xfb, 0x8b, 0xd8, 0xae, 0x33, 0xf1, 0x5d, 0x87, 0xec, 0x9a, 0x8f, 0xd8,
	0x85, 0xdf, 0x87, 0x55, 0x9d, 0x5c, 0x85, 0x44, 0xa1, 0xc7, 0x50, 0x70, 0xc9, 0x55, 0x3f, 0x24,
	0x5e, 0xca, 0x58, 0xd6, 0x57, 0xdd, 0x48, 0x21, 0xfe, 0x00, 0x0a, 0xa1, 0xa5, 0xe4, 0xf9, 0x3f,
	0x84, 0x37, 0xed, 0x8b, 0xf1, 0xcf, 0xa7, 0xc0, 0xa3, 0xa5, 0xed, 0xaf, 0x20, 0x7f, 0x64, 0x9b,
	0x6c, 0x40, 0x3c, 0x8a, 0x5e, 0x85, 0xbe, 0xef, 0x35, 0xfd, 0xfe, 0x6b, 0x06, 0xfd, 0xd9, 0x7c,
	0x21, 0x9a, 0xb7, 0x52, 0x68, 0xaa, 0x16, 0x3f, 0x54, 0xca, 0x77, 0xbf, 0xff, 0xeb, 0x9f, 0x5f,
	0xe6, 0xee, 0xe3, 0x92, 0xec, 0xd4, 0xe0, 0x8a, 0x28, 0x98, 0x8e, 0xd6, 0x68, 0xff, 0xa1, 0xc1,
	0xd2, 0x89, 0xc9, 0x84, 0xbb, 0xc2, 0x63, 0x74, 0x02, 0x0b, 0x27, 0x26, 0x33, 0xd9, 0x28, 0x95,
	0x63, 0x39, 0xe0, 0x38, 0xf6, 0x3e, 0xbb, 0xc4, 0x0f, 0x24, 0xc1, 0x26, 0x46, 0x61, 0x82, 0xb1,
	0x44, 0xe8, 0x68, 0x0d, 0x74, 0x02, 0xb9, 0x1e, 0xe5, 0xa2, 0xad, 0x53, 0xf1, 0x60, 0x76, 0x29,
	0xf0, 0x8e, 0x44, 0x2b, 0xe3, 0xf5, 0x30, 0xda, 0xc8, 0x07, 0x10, 0x6a, 0x47, 0xb0, 0x72, 0x68,
	0xc8, 0xf6, 0x51, 0x72, 0xcf, 0x20, 0xaf, 0x02, 0x5e, 0x2a, 0xc1, 0x5a, 0xcc, 0x14, 0x9a, 0x62,
	0x0b, 0x51, 0x40, 0x82, 0xe8, 0xcf, 0x39, 0x28, 0xca, 0x1b, 0xf5, 0x92, 0x13, 0x4e, 0x15, 0xd9,
	0x6b, 0xc8, 0xf7, 0x88, 0x77, 0xea, 0x9a, 0x46, 0xfa, 0x09, 0x14, 0x03, 0xb2, 0xa0, 0x32, 0x99,
	0x6b, 0xa4, 0xb2, 0xc2, 0x23, 0x1b, 0x0a, 0xa7, 0x02, 0xc4, 0xb0, 0xad, 0x33, 0xea, 0x7a, 0xa2,
	0xbd, 0xd2, 0xd0, 0xb7, 0xaf, 0xc5, 0x5f, 0x1f, 0x33, 0xfe, 0xac, 0x7d, 0x26, 0x46, 0x01, 0xde,
	0x93, 0x4c, 0x55, 0xbc, 0x15, 0x66, 0x72, 0xa2, 0xd0, 0x82, 0xf0, 0x0c, 0x72, 0x2f, 0xa7, 0xcc,
	0xb8, 0xe9, 0x90, 0xd7, 0x83, 0x6d, 0xa8, 0xc2, 0x63, 0x76, 0x6e, 0x27, 0x9f, 0x8e, 0xe7, 0x17,
	0x08, 0xd3, 0x7e, 0xce, 0xc0, 0x52, 0x68, 0x0c, 0xa1, 0x01, 0xac, 0xf4, 0x28, 0xef, 0x8a, 0x0b,
	0xe6, 0xcf, 0x81, 0x5b, 0xd9, 0xba, 0xb3, 0x3b, 0x8c, 0x1f, 0x4a, 0xb6, 0x1d, 0x7c, 0x3f, 0xd6,
	0x0b, 0x33, 0x3c, 0xb1, 0x97, 0x2f, 0x00, 0x04, 0x07, 0xb1, 0x08, 0x33, 0x28, 0xda, 0x94, 0xbd,
	0x74, 0x7d, 0x14, 0xce, 0x2e, 0x86, 0xaa, 0xc4, 0x35, 0x89, 0xbe, 0x85, 0xef, 0xc5, 0xd1, 0xfd,
	0xbc, 0x80, 0x36, 0xa0, 0x18, 0xc8, 0xef, 0x4e, 0x83, 0xb1, 0x97, 0x46, 0xb0, 0x12, 0xd9, 0x02,
	0x7e, 0x2c, 0xe1, 0x6b, 0x78, 0x3b, 0x49, 0x7c, 0x80, 0x26, 0x48, 0xfa, 0xb0, 0x3a, 0x23, 0x91,
	0xe3, 0xe1, 0xae, 0x14, 0x8f, 0x24, 0xc5, 0x2e, 0xae, 0x24, 0x53, 0x08, 0x2c, 0x71, 0x28, 0x7f,
	0xe7, 0x61, 0x23, 0x71, 0x9c, 0xa2, 0x1f, 0x34, 0xa8, 0xf6, 0x28, 0x8f, 0x4f, 0xeb, 0xee, 0x34,
	0x74, 0x0a, 0x28, 0xe9, 0x68, 0x2a, 0xfe, 0x3b, 0x16, 0xff, 0x21, 0x7e, 0x2e, 0x15, 0x3d, 0xc5,
	0x4f, 0x62, 0x8a, 0x6e, 0x64, 0x10, 0x26, 0x7c, 0xa7, 0xc1, 0x4e, 0xba, 0x12, 0xe9, 0xca, 0x5a,
	0x44, 0x87, 0x08, 0xa5, 0xa9, 0x78, 0x4f, 0xaa, 0x68, 0xe1, 0xc6, 0xdd, 0x54, 0x28, 0x9f, 0xd0,
	0x6f, 0x1a, 0xfc, 0x2f, 0xaa, 0x21, 0x22, 0xf3, 0x90, 0x0d, 0x8f, 0xe5, 0x23, 0x52, 0x8b, 0xb3,
	0x5e, 0x7b, 0xa0, 0x66, 0xed, 0x1c, 0x7e, 0x08, 0x3a, 0x52, 0xd6, 0xbb, 0xb8, 0x95, 0x2e, 0x2b,
	0x91, 0x50, 0x68, 0xfb, 0x55, 0x83, 0x5a, 0xa2, 0x36, 0x21, 0xfe, 0xad, 0x95, 0x1d, 0x48, 0x65,
	0x6d, 0xfc, 0xce, 0xad, 0xca, 0xc2, 0x74, 0x42, 0xd7, 0xef, 0x1a, 0xec, 0xf5, 0x28, 0x8f, 0xbe,
	0x8d, 0x6f, 0x63, 0x9b, 0x63, 0x34, 0xa3, 0x60, 0xf8, 0x43, 0x29, 0xee, 0x39, 0x6e, 0xc7, 0xc4,
	0xdd, 0x81, 0x53, 0x28, 0x64, 0x50, 0x8a, 0x1b, 0x27, 0xdb, 0xa9, 0x14, 0x97, 0x23, 0x3b, 0x2a,
	0xd1, 0x9e, 0x7d, 0xa9, 0xe0, 0x11, 0xae, 0xde, 0x64, 0x4f, 0xd0, 0x45, 0x16, 0x6c, 0x44, 0xf9,
	0x74, 0x6a, 0x50, 0xd3, 0xe1, 0x29, 0x84, 0xff, 0x8d, 0x25, 0x55, 0x86, 0x9f, 0x48, 0xb2, 0x3d,
	0x5c, 0x4b, 0x27, 0x53, 0xa5, 0x82, 0xed, 0x5b, 0x58, 0x4f, 0xb8, 0x36, 0x77, 0xf1, 0x3a, 0xe5,
	0xee, 0x34, 0x24, 0xfd, 0x43, 0xbc, 0x7b, 0xcb, 0xdd, 0xe9, 0x68, 0x8d, 0x6e, 0xee, 0xcb, 0xac,
	0xe1, 0x18, 0xce, 0x60, 0xb0, 0x20, 0xa7, 0xf9, 0xb3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x46,
	0xc5, 0x30, 0xb3, 0x82, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CoinbaseClient is the client API for Coinbase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoinbaseClient interface {
	// Coinbase is the address that mining rewards will be send to
	Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.Address, error)
}

type coinbaseClient struct {
	cc *grpc.ClientConn
}

func NewCoinbaseClient(cc *grpc.ClientConn) CoinbaseClient {
	return &coinbaseClient{cc}
}

func (c *coinbaseClient) Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.Address, error) {
	out := new(commonpb.Address)
	err := c.cc.Invoke(ctx, "/cpc.Coinbase/Coinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoinbaseServer is the server API for Coinbase service.
type CoinbaseServer interface {
	// Coinbase is the address that mining rewards will be send to
	Coinbase(context.Context, *empty.Empty) (*commonpb.Address, error)
}

func RegisterCoinbaseServer(s *grpc.Server, srv CoinbaseServer) {
	s.RegisterService(&_Coinbase_serviceDesc, srv)
}

func _Coinbase_Coinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoinbaseServer).Coinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.Coinbase/Coinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoinbaseServer).Coinbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Coinbase_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.Coinbase",
	HandlerType: (*CoinbaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Coinbase",
			Handler:    _Coinbase_Coinbase_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}

// MinerReaderClient is the client API for MinerReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MinerReaderClient interface {
	// Mining returns an indication if this node is currently mining.
	Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.IsOk, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Works, error)
}

type minerReaderClient struct {
	cc *grpc.ClientConn
}

func NewMinerReaderClient(cc *grpc.ClientConn) MinerReaderClient {
	return &minerReaderClient{cc}
}

func (c *minerReaderClient) Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.IsOk, error) {
	out := new(commonpb.IsOk)
	err := c.cc.Invoke(ctx, "/cpc.MinerReader/Mining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *minerReaderClient) GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Works, error) {
	out := new(Works)
	err := c.cc.Invoke(ctx, "/cpc.MinerReader/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinerReaderServer is the server API for MinerReader service.
type MinerReaderServer interface {
	// Mining returns an indication if this node is currently mining.
	Mining(context.Context, *empty.Empty) (*commonpb.IsOk, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(context.Context, *empty.Empty) (*Works, error)
}

func RegisterMinerReaderServer(s *grpc.Server, srv MinerReaderServer) {
	s.RegisterService(&_MinerReader_serviceDesc, srv)
}

func _MinerReader_Mining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerReaderServer).Mining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.MinerReader/Mining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerReaderServer).Mining(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MinerReader_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinerReaderServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.MinerReader/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinerReaderServer).GetWork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _MinerReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.MinerReader",
	HandlerType: (*MinerReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mining",
			Handler:    _MinerReader_Mining_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _MinerReader_GetWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}

// AccountReaderClient is the client API for AccountReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountReaderClient interface {
	// Accounts returns the collection of accounts this node manages
	Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.Addresses, error)
}

type accountReaderClient struct {
	cc *grpc.ClientConn
}

func NewAccountReaderClient(cc *grpc.ClientConn) AccountReaderClient {
	return &accountReaderClient{cc}
}

func (c *accountReaderClient) Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.Addresses, error) {
	out := new(commonpb.Addresses)
	err := c.cc.Invoke(ctx, "/cpc.AccountReader/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountReaderServer is the server API for AccountReader service.
type AccountReaderServer interface {
	// Accounts returns the collection of accounts this node manages
	Accounts(context.Context, *empty.Empty) (*commonpb.Addresses, error)
}

func RegisterAccountReaderServer(s *grpc.Server, srv AccountReaderServer) {
	s.RegisterService(&_AccountReader_serviceDesc, srv)
}

func _AccountReader_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountReaderServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.AccountReader/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountReaderServer).Accounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.AccountReader",
	HandlerType: (*AccountReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _AccountReader_Accounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}

// ChainStateReaderClient is the client API for ChainStateReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainStateReaderClient interface {
	// GasPrice returns a suggestion for a gas price.
	GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.GasPrice, error)
	// ProtocolVersion returns the current Ethereum protocol version this node supports
	ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.UInt32Value, error)
	// Syncing returns false in case the node is currently not syncing with the network. It can be up to date or has not
	// yet received the latest block headers from its pears. In case it is synchronizing:
	// - startingBlock: block number this node started to synchronise from
	// - currentBlock:  block number this node is currently importing
	// - highestBlock:  block number of the highest block header this node has received from peers
	// - pulledStates:  number of state entries processed until now
	// - knownStates:   number of known state entries that still need to be pulled
	Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.SyncingInfo, error)
}

type chainStateReaderClient struct {
	cc *grpc.ClientConn
}

func NewChainStateReaderClient(cc *grpc.ClientConn) ChainStateReaderClient {
	return &chainStateReaderClient{cc}
}

func (c *chainStateReaderClient) GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.GasPrice, error) {
	out := new(commonpb.GasPrice)
	err := c.cc.Invoke(ctx, "/cpc.ChainStateReader/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainStateReaderClient) ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.UInt32Value, error) {
	out := new(wrappers.UInt32Value)
	err := c.cc.Invoke(ctx, "/cpc.ChainStateReader/ProtocolVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainStateReaderClient) Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.SyncingInfo, error) {
	out := new(commonpb.SyncingInfo)
	err := c.cc.Invoke(ctx, "/cpc.ChainStateReader/Syncing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainStateReaderServer is the server API for ChainStateReader service.
type ChainStateReaderServer interface {
	// GasPrice returns a suggestion for a gas price.
	GasPrice(context.Context, *empty.Empty) (*commonpb.GasPrice, error)
	// ProtocolVersion returns the current Ethereum protocol version this node supports
	ProtocolVersion(context.Context, *empty.Empty) (*wrappers.UInt32Value, error)
	// Syncing returns false in case the node is currently not syncing with the network. It can be up to date or has not
	// yet received the latest block headers from its pears. In case it is synchronizing:
	// - startingBlock: block number this node started to synchronise from
	// - currentBlock:  block number this node is currently importing
	// - highestBlock:  block number of the highest block header this node has received from peers
	// - pulledStates:  number of state entries processed until now
	// - knownStates:   number of known state entries that still need to be pulled
	Syncing(context.Context, *empty.Empty) (*commonpb.SyncingInfo, error)
}

func RegisterChainStateReaderServer(s *grpc.Server, srv ChainStateReaderServer) {
	s.RegisterService(&_ChainStateReader_serviceDesc, srv)
}

func _ChainStateReader_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainStateReaderServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainStateReader/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainStateReaderServer).GasPrice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainStateReader_ProtocolVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainStateReaderServer).ProtocolVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainStateReader/ProtocolVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainStateReaderServer).ProtocolVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainStateReader_Syncing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainStateReaderServer).Syncing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainStateReader/Syncing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainStateReaderServer).Syncing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainStateReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.ChainStateReader",
	HandlerType: (*ChainStateReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GasPrice",
			Handler:    _ChainStateReader_GasPrice_Handler,
		},
		{
			MethodName: "ProtocolVersion",
			Handler:    _ChainStateReader_ProtocolVersion_Handler,
		},
		{
			MethodName: "Syncing",
			Handler:    _ChainStateReader_Syncing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}

// ChainReaderClient is the client API for ChainReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainReaderClient interface {
	// GetBlockCount returns the block number of the chain head.
	GetBlockCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.BlockNumber, error)
	// GetBalance returns the amount of wei for the given address in the state of the
	// given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
	// block numbers are also allowed.
	GetBalance(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Balance, error)
	// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
	// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
	GetBlockByNumber(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Block, error)
	// GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
	// detail, otherwise only the transaction hash is returned.
	GetBlockByHash(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Block, error)
}

type chainReaderClient struct {
	cc *grpc.ClientConn
}

func NewChainReaderClient(cc *grpc.ClientConn) ChainReaderClient {
	return &chainReaderClient{cc}
}

func (c *chainReaderClient) GetBlockCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*commonpb.BlockNumber, error) {
	out := new(commonpb.BlockNumber)
	err := c.cc.Invoke(ctx, "/cpc.ChainReader/GetBlockCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderClient) GetBalance(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Balance, error) {
	out := new(commonpb.Balance)
	err := c.cc.Invoke(ctx, "/cpc.ChainReader/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderClient) GetBlockByNumber(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Block, error) {
	out := new(commonpb.Block)
	err := c.cc.Invoke(ctx, "/cpc.ChainReader/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderClient) GetBlockByHash(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*commonpb.Block, error) {
	out := new(commonpb.Block)
	err := c.cc.Invoke(ctx, "/cpc.ChainReader/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainReaderServer is the server API for ChainReader service.
type ChainReaderServer interface {
	// GetBlockCount returns the block number of the chain head.
	GetBlockCount(context.Context, *empty.Empty) (*commonpb.BlockNumber, error)
	// GetBalance returns the amount of wei for the given address in the state of the
	// given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
	// block numbers are also allowed.
	GetBalance(context.Context, *ChainReaderRequest) (*commonpb.Balance, error)
	// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
	// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
	GetBlockByNumber(context.Context, *ChainReaderRequest) (*commonpb.Block, error)
	// GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
	// detail, otherwise only the transaction hash is returned.
	GetBlockByHash(context.Context, *ChainReaderRequest) (*commonpb.Block, error)
}

func RegisterChainReaderServer(s *grpc.Server, srv ChainReaderServer) {
	s.RegisterService(&_ChainReader_serviceDesc, srv)
}

func _ChainReader_GetBlockCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderServer).GetBlockCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainReader/GetBlockCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderServer).GetBlockCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReader_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainReader/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderServer).GetBalance(ctx, req.(*ChainReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReader_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainReader/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderServer).GetBlockByNumber(ctx, req.(*ChainReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReader_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.ChainReader/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderServer).GetBlockByHash(ctx, req.(*ChainReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.ChainReader",
	HandlerType: (*ChainReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockCount",
			Handler:    _ChainReader_GetBlockCount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _ChainReader_GetBalance_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _ChainReader_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ChainReader_GetBlockByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}

// TransactionPoolReaderClient is the client API for TransactionPoolReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionPoolReaderClient interface {
	GetTransactionCountByBlockNumber(ctx context.Context, in *commonpb.BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error)
	GetTransactionCountByBlockHash(ctx context.Context, in *commonpb.BlockHash, opts ...grpc.CallOption) (*TransactionCount, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*commonpb.Transaction, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*commonpb.Transaction, error)
	GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*RawTransaction, error)
	GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*commonpb.Transaction, error)
	GetTransactionReceipt(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*commonpb.Receipt, error)
	GetTransactionCount(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*TransactionCount, error)
}

type transactionPoolReaderClient struct {
	cc *grpc.ClientConn
}

func NewTransactionPoolReaderClient(cc *grpc.ClientConn) TransactionPoolReaderClient {
	return &transactionPoolReaderClient{cc}
}

func (c *transactionPoolReaderClient) GetTransactionCountByBlockNumber(ctx context.Context, in *commonpb.BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionCountByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionCountByBlockHash(ctx context.Context, in *commonpb.BlockHash, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionCountByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*commonpb.Transaction, error) {
	out := new(commonpb.Transaction)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*commonpb.Transaction, error) {
	out := new(commonpb.Transaction)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*RawTransaction, error) {
	out := new(RawTransaction)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetRawTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*commonpb.Transaction, error) {
	out := new(commonpb.Transaction)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionReceipt(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*commonpb.Receipt, error) {
	out := new(commonpb.Receipt)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionCount(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/cpc.TransactionPoolReader/GetTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionPoolReaderServer is the server API for TransactionPoolReader service.
type TransactionPoolReaderServer interface {
	GetTransactionCountByBlockNumber(context.Context, *commonpb.BlockNumber) (*TransactionCount, error)
	GetTransactionCountByBlockHash(context.Context, *commonpb.BlockHash) (*TransactionCount, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *TransactionPoolReaderRequest) (*commonpb.Transaction, error)
	GetTransactionByBlockHashAndIndex(context.Context, *TransactionPoolReaderRequest) (*commonpb.Transaction, error)
	GetRawTransactionByBlockNumberAndIndex(context.Context, *TransactionPoolReaderRequest) (*RawTransaction, error)
	GetTransactionByHash(context.Context, *TransactionHash) (*commonpb.Transaction, error)
	GetTransactionReceipt(context.Context, *TransactionHash) (*commonpb.Receipt, error)
	GetTransactionCount(context.Context, *TransactionPoolReaderRequest) (*TransactionCount, error)
}

func RegisterTransactionPoolReaderServer(s *grpc.Server, srv TransactionPoolReaderServer) {
	s.RegisterService(&_TransactionPoolReader_serviceDesc, srv)
}

func _TransactionPoolReader_GetTransactionCountByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionCountByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockNumber(ctx, req.(*commonpb.BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionCountByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(commonpb.BlockHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionCountByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockHash(ctx, req.(*commonpb.BlockHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockHashAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetRawTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetRawTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetRawTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetRawTransactionByBlockNumberAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByHash(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionReceipt(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpc.TransactionPoolReader/GetTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCount(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionPoolReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpc.TransactionPoolReader",
	HandlerType: (*TransactionPoolReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionCountByBlockNumber",
			Handler:    _TransactionPoolReader_GetTransactionCountByBlockNumber_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockHash",
			Handler:    _TransactionPoolReader_GetTransactionCountByBlockHash_Handler,
		},
		{
			MethodName: "GetTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPoolReader_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _TransactionPoolReader_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPoolReader_GetRawTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _TransactionPoolReader_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _TransactionPoolReader_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionCount",
			Handler:    _TransactionPoolReader_GetTransactionCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cpc/cpc.proto",
}
