// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cpc.proto

package cpcpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublicInnerEthereumAPIReply struct {
	//    gas limit for trasaction
	GasPrice             []byte              `protobuf:"bytes,1,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Version              uint32              `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	IsOk                 *wrappers.BoolValue `protobuf:"bytes,3,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	SyncInfo             *any.Any            `protobuf:"bytes,4,opt,name=sync_info,json=syncInfo,proto3" json:"sync_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicInnerEthereumAPIReply) Reset()         { *m = PublicInnerEthereumAPIReply{} }
func (m *PublicInnerEthereumAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicInnerEthereumAPIReply) ProtoMessage()    {}
func (*PublicInnerEthereumAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{0}
}

func (m *PublicInnerEthereumAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicInnerEthereumAPIReply.Unmarshal(m, b)
}
func (m *PublicInnerEthereumAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicInnerEthereumAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicInnerEthereumAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicInnerEthereumAPIReply.Merge(m, src)
}
func (m *PublicInnerEthereumAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicInnerEthereumAPIReply.Size(m)
}
func (m *PublicInnerEthereumAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicInnerEthereumAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicInnerEthereumAPIReply proto.InternalMessageInfo

func (m *PublicInnerEthereumAPIReply) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicInnerEthereumAPIReply) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *PublicInnerEthereumAPIReply) GetIsOk() *wrappers.BoolValue {
	if m != nil {
		return m.IsOk
	}
	return nil
}

func (m *PublicInnerEthereumAPIReply) GetSyncInfo() *any.Any {
	if m != nil {
		return m.SyncInfo
	}
	return nil
}

type PublicEthereumAPIReply struct {
	Address              *wrappers.BytesValue  `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Rate                 *wrappers.UInt64Value `protobuf:"bytes,2,opt,name=rate,proto3" json:"rate,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PublicEthereumAPIReply) Reset()         { *m = PublicEthereumAPIReply{} }
func (m *PublicEthereumAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicEthereumAPIReply) ProtoMessage()    {}
func (*PublicEthereumAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{1}
}

func (m *PublicEthereumAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicEthereumAPIReply.Unmarshal(m, b)
}
func (m *PublicEthereumAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicEthereumAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicEthereumAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicEthereumAPIReply.Merge(m, src)
}
func (m *PublicEthereumAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicEthereumAPIReply.Size(m)
}
func (m *PublicEthereumAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicEthereumAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicEthereumAPIReply proto.InternalMessageInfo

func (m *PublicEthereumAPIReply) GetAddress() *wrappers.BytesValue {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicEthereumAPIReply) GetRate() *wrappers.UInt64Value {
	if m != nil {
		return m.Rate
	}
	return nil
}

type PublicAccountAPIReply struct {
	Accounts             *any.Any `protobuf:"bytes,1,opt,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicAccountAPIReply) Reset()         { *m = PublicAccountAPIReply{} }
func (m *PublicAccountAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicAccountAPIReply) ProtoMessage()    {}
func (*PublicAccountAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{2}
}

func (m *PublicAccountAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicAccountAPIReply.Unmarshal(m, b)
}
func (m *PublicAccountAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicAccountAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicAccountAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicAccountAPIReply.Merge(m, src)
}
func (m *PublicAccountAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicAccountAPIReply.Size(m)
}
func (m *PublicAccountAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicAccountAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicAccountAPIReply proto.InternalMessageInfo

func (m *PublicAccountAPIReply) GetAccounts() *any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

// rawWallet is a JSON representation of an accounts.Wallet interface, with its
// data contents extracted into plain fields.
type RawWallet struct {
	Url                  string     `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Status               string     `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Failure              string     `protobuf:"bytes,3,opt,name=failure,proto3" json:"failure,omitempty"`
	Accounts             []*any.Any `protobuf:"bytes,4,rep,name=accounts,proto3" json:"accounts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *RawWallet) Reset()         { *m = RawWallet{} }
func (m *RawWallet) String() string { return proto.CompactTextString(m) }
func (*RawWallet) ProtoMessage()    {}
func (*RawWallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{3}
}

func (m *RawWallet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawWallet.Unmarshal(m, b)
}
func (m *RawWallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawWallet.Marshal(b, m, deterministic)
}
func (m *RawWallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawWallet.Merge(m, src)
}
func (m *RawWallet) XXX_Size() int {
	return xxx_messageInfo_RawWallet.Size(m)
}
func (m *RawWallet) XXX_DiscardUnknown() {
	xxx_messageInfo_RawWallet.DiscardUnknown(m)
}

var xxx_messageInfo_RawWallet proto.InternalMessageInfo

func (m *RawWallet) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *RawWallet) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *RawWallet) GetFailure() string {
	if m != nil {
		return m.Failure
	}
	return ""
}

func (m *RawWallet) GetAccounts() []*any.Any {
	if m != nil {
		return m.Accounts
	}
	return nil
}

type PublicBlockChainAPIRequest struct {
	// CallArgs args = 1;
	Args                 *any.Any `protobuf:"bytes,1,opt,name=args,proto3" json:"args,omitempty"`
	BlockNumber          uint64   `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Address              []byte   `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	FullTx               bool     `protobuf:"varint,4,opt,name=full_tx,json=fullTx,proto3" json:"full_tx,omitempty"`
	Key                  string   `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	BlockHash            []byte   `protobuf:"bytes,6,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Index                uint64   `protobuf:"varint,7,opt,name=index,proto3" json:"index,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIRequest) Reset()         { *m = PublicBlockChainAPIRequest{} }
func (m *PublicBlockChainAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIRequest) ProtoMessage()    {}
func (*PublicBlockChainAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{4}
}

func (m *PublicBlockChainAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIRequest.Merge(m, src)
}
func (m *PublicBlockChainAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIRequest.Size(m)
}
func (m *PublicBlockChainAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIRequest proto.InternalMessageInfo

func (m *PublicBlockChainAPIRequest) GetArgs() *any.Any {
	if m != nil {
		return m.Args
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicBlockChainAPIRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetFullTx() bool {
	if m != nil {
		return m.FullTx
	}
	return false
}

func (m *PublicBlockChainAPIRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *PublicBlockChainAPIRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PublicBlockChainAPIRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type PublicBlockChainAPIRequest_CallArgs struct {
	From                 []byte   `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   []byte   `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Gas                  uint64   `protobuf:"varint,3,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	Value                []byte   `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=data,proto3" json:"data,omitempty"`
	IsPrivate            bool     `protobuf:"varint,7,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIRequest_CallArgs) Reset()         { *m = PublicBlockChainAPIRequest_CallArgs{} }
func (m *PublicBlockChainAPIRequest_CallArgs) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIRequest_CallArgs) ProtoMessage()    {}
func (*PublicBlockChainAPIRequest_CallArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{4, 0}
}

func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Merge(m, src)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.Size(m)
}
func (m *PublicBlockChainAPIRequest_CallArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIRequest_CallArgs proto.InternalMessageInfo

func (m *PublicBlockChainAPIRequest_CallArgs) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetGas() uint64 {
	if m != nil {
		return m.Gas
	}
	return 0
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PublicBlockChainAPIRequest_CallArgs) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

type PublicBlockChainAPIReply struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	EstimateGas          uint64   `protobuf:"varint,3,opt,name=estimate_gas,json=estimateGas,proto3" json:"estimate_gas,omitempty"`
	Balance              []byte   `protobuf:"bytes,4,opt,name=balance,proto3" json:"balance,omitempty"`
	BlockInfo            *any.Any `protobuf:"bytes,5,opt,name=block_info,json=blockInfo,proto3" json:"block_info,omitempty"`
	Code                 []byte   `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
	Storage              []byte   `protobuf:"bytes,7,opt,name=storage,proto3" json:"storage,omitempty"`
	UncleCount           uint64   `protobuf:"varint,8,opt,name=uncle_count,json=uncleCount,proto3" json:"uncle_count,omitempty"`
	Result               []byte   `protobuf:"bytes,9,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicBlockChainAPIReply) Reset()         { *m = PublicBlockChainAPIReply{} }
func (m *PublicBlockChainAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicBlockChainAPIReply) ProtoMessage()    {}
func (*PublicBlockChainAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{5}
}

func (m *PublicBlockChainAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicBlockChainAPIReply.Unmarshal(m, b)
}
func (m *PublicBlockChainAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicBlockChainAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicBlockChainAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicBlockChainAPIReply.Merge(m, src)
}
func (m *PublicBlockChainAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicBlockChainAPIReply.Size(m)
}
func (m *PublicBlockChainAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicBlockChainAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicBlockChainAPIReply proto.InternalMessageInfo

func (m *PublicBlockChainAPIReply) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetEstimateGas() uint64 {
	if m != nil {
		return m.EstimateGas
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetBlockInfo() *any.Any {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetStorage() []byte {
	if m != nil {
		return m.Storage
	}
	return nil
}

func (m *PublicBlockChainAPIReply) GetUncleCount() uint64 {
	if m != nil {
		return m.UncleCount
	}
	return 0
}

func (m *PublicBlockChainAPIReply) GetResult() []byte {
	if m != nil {
		return m.Result
	}
	return nil
}

type PublicTransactionPoolAPIRequest struct {
	BlockHash            []byte                `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber          uint64                `protobuf:"varint,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Index                uint64                `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	TxHash               []byte                `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Address              []byte                `protobuf:"bytes,5,opt,name=address,proto3" json:"address,omitempty"`
	SendTxArgs           *any.Any              `protobuf:"bytes,6,opt,name=send_tx_args,json=sendTxArgs,proto3" json:"send_tx_args,omitempty"`
	GasPrice             []byte                `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"`
	GasLimit             *wrappers.UInt64Value `protobuf:"bytes,8,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	Payload              []byte                `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
	EncodedTx            []byte                `protobuf:"bytes,10,opt,name=encoded_tx,json=encodedTx,proto3" json:"encoded_tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PublicTransactionPoolAPIRequest) Reset()         { *m = PublicTransactionPoolAPIRequest{} }
func (m *PublicTransactionPoolAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicTransactionPoolAPIRequest) ProtoMessage()    {}
func (*PublicTransactionPoolAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{6}
}

func (m *PublicTransactionPoolAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Unmarshal(m, b)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTransactionPoolAPIRequest.Merge(m, src)
}
func (m *PublicTransactionPoolAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicTransactionPoolAPIRequest.Size(m)
}
func (m *PublicTransactionPoolAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTransactionPoolAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTransactionPoolAPIRequest proto.InternalMessageInfo

func (m *PublicTransactionPoolAPIRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *PublicTransactionPoolAPIRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *PublicTransactionPoolAPIRequest) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetSendTxArgs() *any.Any {
	if m != nil {
		return m.SendTxArgs
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetGasLimit() *wrappers.UInt64Value {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicTransactionPoolAPIRequest) GetEncodedTx() []byte {
	if m != nil {
		return m.EncodedTx
	}
	return nil
}

type PublicTransactionPoolAPIReply struct {
	Count          uint64   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Payload        []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	RpcTransaction *any.Any `protobuf:"bytes,3,opt,name=rpc_transaction,json=rpcTransaction,proto3" json:"rpc_transaction,omitempty"`
	// RPCTransaction rpc_transaction = 3;
	TxReceipt    []byte   `protobuf:"bytes,4,opt,name=tx_receipt,json=txReceipt,proto3" json:"tx_receipt,omitempty"`
	TxHash       []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	SignTxResult *any.Any `protobuf:"bytes,6,opt,name=sign_tx_result,json=signTxResult,proto3" json:"sign_tx_result,omitempty"`
	TxBytes      []byte   `protobuf:"bytes,7,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Fields       *any.Any `protobuf:"bytes,8,opt,name=fields,proto3" json:"fields,omitempty"`
	Signature    []byte   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	// repeated RPCTransaction pending_txs = 10;
	PendingTxs           *any.Any `protobuf:"bytes,10,opt,name=pending_txs,json=pendingTxs,proto3" json:"pending_txs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicTransactionPoolAPIReply) Reset()         { *m = PublicTransactionPoolAPIReply{} }
func (m *PublicTransactionPoolAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicTransactionPoolAPIReply) ProtoMessage()    {}
func (*PublicTransactionPoolAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{7}
}

func (m *PublicTransactionPoolAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Unmarshal(m, b)
}
func (m *PublicTransactionPoolAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicTransactionPoolAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicTransactionPoolAPIReply.Merge(m, src)
}
func (m *PublicTransactionPoolAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicTransactionPoolAPIReply.Size(m)
}
func (m *PublicTransactionPoolAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicTransactionPoolAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicTransactionPoolAPIReply proto.InternalMessageInfo

func (m *PublicTransactionPoolAPIReply) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PublicTransactionPoolAPIReply) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetRpcTransaction() *any.Any {
	if m != nil {
		return m.RpcTransaction
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxReceipt() []byte {
	if m != nil {
		return m.TxReceipt
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetSignTxResult() *any.Any {
	if m != nil {
		return m.SignTxResult
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetTxBytes() []byte {
	if m != nil {
		return m.TxBytes
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetFields() *any.Any {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PublicTransactionPoolAPIReply) GetPendingTxs() *any.Any {
	if m != nil {
		return m.PendingTxs
	}
	return nil
}

type SignTransactionResult struct {
	Raw                  []byte   `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Tx                   *any.Any `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignTransactionResult) Reset()         { *m = SignTransactionResult{} }
func (m *SignTransactionResult) String() string { return proto.CompactTextString(m) }
func (*SignTransactionResult) ProtoMessage()    {}
func (*SignTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{8}
}

func (m *SignTransactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionResult.Unmarshal(m, b)
}
func (m *SignTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionResult.Marshal(b, m, deterministic)
}
func (m *SignTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionResult.Merge(m, src)
}
func (m *SignTransactionResult) XXX_Size() int {
	return xxx_messageInfo_SignTransactionResult.Size(m)
}
func (m *SignTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionResult proto.InternalMessageInfo

func (m *SignTransactionResult) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *SignTransactionResult) GetTx() *any.Any {
	if m != nil {
		return m.Tx
	}
	return nil
}

type PublicMinerAPIRequest struct {
	BlockNonce           *wrappers.BytesValue `protobuf:"bytes,1,opt,name=block_nonce,json=blockNonce,proto3" json:"block_nonce,omitempty"`
	Solution             *wrappers.BytesValue `protobuf:"bytes,2,opt,name=solution,proto3" json:"solution,omitempty"`
	Digest               *wrappers.BytesValue `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Hashrate             uint64               `protobuf:"varint,4,opt,name=hashrate,proto3" json:"hashrate,omitempty"`
	Id                   []byte               `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *PublicMinerAPIRequest) Reset()         { *m = PublicMinerAPIRequest{} }
func (m *PublicMinerAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIRequest) ProtoMessage()    {}
func (*PublicMinerAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{9}
}

func (m *PublicMinerAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIRequest.Unmarshal(m, b)
}
func (m *PublicMinerAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIRequest.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIRequest.Merge(m, src)
}
func (m *PublicMinerAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIRequest.Size(m)
}
func (m *PublicMinerAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIRequest proto.InternalMessageInfo

func (m *PublicMinerAPIRequest) GetBlockNonce() *wrappers.BytesValue {
	if m != nil {
		return m.BlockNonce
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetSolution() *wrappers.BytesValue {
	if m != nil {
		return m.Solution
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetDigest() *wrappers.BytesValue {
	if m != nil {
		return m.Digest
	}
	return nil
}

func (m *PublicMinerAPIRequest) GetHashrate() uint64 {
	if m != nil {
		return m.Hashrate
	}
	return 0
}

func (m *PublicMinerAPIRequest) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

type PublicMinerAPIReply struct {
	Mining               *wrappers.BoolValue `protobuf:"bytes,1,opt,name=mining,proto3" json:"mining,omitempty"`
	IsAccepting          bool                `protobuf:"varint,2,opt,name=is_accepting,json=isAccepting,proto3" json:"is_accepting,omitempty"`
	Works                []string            `protobuf:"bytes,3,rep,name=works,proto3" json:"works,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PublicMinerAPIReply) Reset()         { *m = PublicMinerAPIReply{} }
func (m *PublicMinerAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicMinerAPIReply) ProtoMessage()    {}
func (*PublicMinerAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{10}
}

func (m *PublicMinerAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicMinerAPIReply.Unmarshal(m, b)
}
func (m *PublicMinerAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicMinerAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicMinerAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicMinerAPIReply.Merge(m, src)
}
func (m *PublicMinerAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicMinerAPIReply.Size(m)
}
func (m *PublicMinerAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicMinerAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicMinerAPIReply proto.InternalMessageInfo

func (m *PublicMinerAPIReply) GetMining() *wrappers.BoolValue {
	if m != nil {
		return m.Mining
	}
	return nil
}

func (m *PublicMinerAPIReply) GetIsAccepting() bool {
	if m != nil {
		return m.IsAccepting
	}
	return false
}

func (m *PublicMinerAPIReply) GetWorks() []string {
	if m != nil {
		return m.Works
	}
	return nil
}

func init() {
	proto.RegisterType((*PublicInnerEthereumAPIReply)(nil), "cpcpb.PublicInnerEthereumAPIReply")
	proto.RegisterType((*PublicEthereumAPIReply)(nil), "cpcpb.PublicEthereumAPIReply")
	proto.RegisterType((*PublicAccountAPIReply)(nil), "cpcpb.PublicAccountAPIReply")
	proto.RegisterType((*RawWallet)(nil), "cpcpb.RawWallet")
	proto.RegisterType((*PublicBlockChainAPIRequest)(nil), "cpcpb.PublicBlockChainAPIRequest")
	proto.RegisterType((*PublicBlockChainAPIRequest_CallArgs)(nil), "cpcpb.PublicBlockChainAPIRequest.CallArgs")
	proto.RegisterType((*PublicBlockChainAPIReply)(nil), "cpcpb.PublicBlockChainAPIReply")
	proto.RegisterType((*PublicTransactionPoolAPIRequest)(nil), "cpcpb.PublicTransactionPoolAPIRequest")
	proto.RegisterType((*PublicTransactionPoolAPIReply)(nil), "cpcpb.PublicTransactionPoolAPIReply")
	proto.RegisterType((*SignTransactionResult)(nil), "cpcpb.SignTransactionResult")
	proto.RegisterType((*PublicMinerAPIRequest)(nil), "cpcpb.PublicMinerAPIRequest")
	proto.RegisterType((*PublicMinerAPIReply)(nil), "cpcpb.PublicMinerAPIReply")
}

func init() { proto.RegisterFile("cpc.proto", fileDescriptor_423c627df4983bea) }

var fileDescriptor_423c627df4983bea = []byte{
	// 2104 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x99, 0xcf, 0x6f, 0x1b, 0xc7,
	0x15, 0xc7, 0xb1, 0x24, 0x45, 0x91, 0x8f, 0xaa, 0xe2, 0xae, 0x65, 0x9b, 0xa6, 0x24, 0x5b, 0x1a,
	0xcb, 0xb2, 0xac, 0x38, 0xa2, 0x4d, 0x5b, 0xb6, 0xab, 0xd4, 0x45, 0x25, 0xc1, 0x90, 0x05, 0x34,
	0x89, 0xb0, 0x52, 0x12, 0xa0, 0x28, 0x4a, 0x0c, 0x97, 0x23, 0x6a, 0xa3, 0xd5, 0xee, 0x76, 0x77,
	0x28, 0x91, 0x28, 0x0a, 0x34, 0x01, 0x7a, 0x6b, 0x4f, 0x41, 0x50, 0x14, 0x45, 0xd1, 0x9e, 0x7a,
	0x29, 0xd0, 0x1f, 0x87, 0xa2, 0x05, 0xfa, 0x67, 0xe4, 0x3f, 0x08, 0x7a, 0xef, 0xa9, 0xf7, 0xe2,
	0xbd, 0x9d, 0x25, 0xb9, 0xfc, 0xa9, 0xc6, 0xeb, 0x5c, 0x84, 0x9d, 0xe1, 0xcc, 0xfb, 0x7e, 0xde,
	0x9b, 0x37, 0xb3, 0x6f, 0x47, 0x90, 0x37, 0x3d, 0x73, 0xc3, 0xf3, 0x5d, 0xe9, 0xea, 0x53, 0xa6,
	0x67, 0x7a, 0xb5, 0xd2, 0x7c, 0xc3, 0x75, 0x1b, 0xb6, 0x28, 0x53, 0x67, 0xad, 0x79, 0x5c, 0x16,
	0x67, 0x9e, 0x6c, 0x87, 0x63, 0x4a, 0x0b, 0xea, 0x47, 0xee, 0x59, 0x65, 0xee, 0x38, 0xae, 0xe4,
	0xd2, 0x72, 0x9d, 0x40, 0xfd, 0x7a, 0xb3, 0x7f, 0x2a, 0x77, 0xa2, 0x89, 0xb7, 0xfa, 0x7f, 0xba,
	0xf0, 0xb9, 0xe7, 0x09, 0x5f, 0x4d, 0x65, 0xff, 0xd4, 0x60, 0xfe, 0xa0, 0x59, 0xb3, 0x2d, 0x73,
	0xdf, 0x71, 0x84, 0xff, 0x52, 0x9e, 0x08, 0x5f, 0x34, 0xcf, 0xb6, 0x0f, 0xf6, 0x0d, 0xe1, 0xd9,
	0x6d, 0x7d, 0x1e, 0xf2, 0x0d, 0x1e, 0x54, 0x3d, 0xdf, 0x32, 0x45, 0x51, 0x5b, 0xd2, 0xd6, 0x66,
	0x8c, 0x5c, 0x83, 0x07, 0x07, 0xd8, 0xd6, 0x8b, 0x30, 0x7d, 0x2e, 0xfc, 0xc0, 0x72, 0x9d, 0x62,
	0x6a, 0x49, 0x5b, 0xfb, 0x96, 0x11, 0x35, 0xf5, 0x32, 0x4c, 0x59, 0x41, 0xd5, 0x3d, 0x2d, 0xa6,
	0x97, 0xb4, 0xb5, 0x42, 0xa5, 0xb4, 0x11, 0x62, 0x6c, 0x44, 0x18, 0x1b, 0x3b, 0xae, 0x6b, 0x7f,
	0xc4, 0xed, 0xa6, 0x30, 0x32, 0x56, 0xf0, 0xc1, 0xa9, 0xfe, 0x08, 0xf2, 0x41, 0xdb, 0x31, 0xab,
	0x96, 0x73, 0xec, 0x16, 0x33, 0x34, 0x69, 0x6e, 0x60, 0xd2, 0xb6, 0xd3, 0x36, 0x72, 0x38, 0x6c,
	0xdf, 0x39, 0x76, 0xd9, 0xa7, 0x1a, 0x5c, 0x0f, 0xd1, 0x07, 0xa8, 0x37, 0x61, 0x9a, 0xd7, 0xeb,
	0xbe, 0x08, 0x02, 0x62, 0x2e, 0x54, 0xe6, 0x07, 0x01, 0xda, 0x52, 0x04, 0x21, 0x41, 0x34, 0x56,
	0x7f, 0x08, 0x19, 0x9f, 0x4b, 0x41, 0xce, 0x14, 0x2a, 0x0b, 0x03, 0x73, 0x3e, 0xdc, 0x77, 0xe4,
	0xd3, 0x27, 0x0a, 0x1b, 0x47, 0xb2, 0x7d, 0xb8, 0x16, 0x22, 0x6c, 0x9b, 0xa6, 0xdb, 0x74, 0x64,
	0x87, 0xe0, 0x21, 0xe4, 0x78, 0xd8, 0x15, 0x21, 0x8c, 0x70, 0x27, 0x1a, 0x85, 0xee, 0xe4, 0x0d,
	0x7e, 0xf1, 0x31, 0xb7, 0x6d, 0x21, 0xf5, 0x2b, 0x90, 0x6e, 0xfa, 0x36, 0x4d, 0xcd, 0x1b, 0xf8,
	0xa8, 0x5f, 0x87, 0x6c, 0x20, 0xb9, 0x6c, 0x06, 0x84, 0x97, 0x37, 0x54, 0x0b, 0x17, 0xe1, 0x98,
	0x5b, 0x76, 0xd3, 0x17, 0x14, 0xec, 0xbc, 0x11, 0x35, 0x63, 0x0c, 0x99, 0xa5, 0xf4, 0x25, 0x18,
	0x7e, 0x99, 0x86, 0x52, 0xe8, 0xcf, 0x8e, 0xed, 0x9a, 0xa7, 0xbb, 0x27, 0xdc, 0x72, 0xc8, 0xa5,
	0x9f, 0x34, 0x45, 0x20, 0xf5, 0x35, 0xc8, 0x70, 0xbf, 0x31, 0xde, 0x21, 0x1a, 0xa1, 0x2f, 0xc3,
	0x4c, 0x0d, 0x2d, 0x54, 0x9d, 0xe6, 0x59, 0x4d, 0xf8, 0x84, 0x9c, 0x31, 0x0a, 0xd4, 0xf7, 0x3e,
	0x75, 0x21, 0x77, 0xb4, 0x46, 0x69, 0xca, 0xab, 0xce, 0x32, 0xdc, 0x80, 0xe9, 0xe3, 0xa6, 0x6d,
	0x57, 0x65, 0x8b, 0x32, 0x21, 0x67, 0x64, 0xb1, 0x79, 0xd4, 0xc2, 0xa0, 0x9c, 0x8a, 0x76, 0x71,
	0x2a, 0x0c, 0xca, 0xa9, 0x68, 0xeb, 0x8b, 0x00, 0xa1, 0xce, 0x09, 0x0f, 0x4e, 0x8a, 0x59, 0xb2,
	0x93, 0xa7, 0x9e, 0x57, 0x3c, 0x38, 0xd1, 0xe7, 0x60, 0xca, 0x72, 0xea, 0xa2, 0x55, 0x9c, 0x26,
	0xfd, 0xb0, 0x51, 0xfa, 0xa3, 0x06, 0xb9, 0x5d, 0x6e, 0xdb, 0xdb, 0x48, 0xaa, 0x43, 0xe6, 0xd8,
	0x77, 0xcf, 0x54, 0x6e, 0xd3, 0xb3, 0x3e, 0x0b, 0x29, 0xe9, 0x12, 0xf3, 0x8c, 0x91, 0x92, 0x2e,
	0xea, 0x36, 0x78, 0x88, 0x99, 0x31, 0xf0, 0x31, 0xbe, 0x2d, 0x32, 0x7d, 0xdb, 0x62, 0x0e, 0xa6,
	0xce, 0x31, 0x47, 0x08, 0x74, 0xc6, 0x08, 0x1b, 0x28, 0x54, 0xe7, 0x92, 0x2b, 0x48, 0x7a, 0x46,
	0x7c, 0x8b, 0xac, 0x9c, 0x63, 0xda, 0x4d, 0x93, 0xb3, 0x79, 0x0b, 0xcd, 0x60, 0x07, 0xfb, 0x6b,
	0x0a, 0x8a, 0x43, 0x97, 0x03, 0x33, 0xac, 0x3f, 0xc4, 0xda, 0xd0, 0x10, 0x7b, 0xbc, 0x6d, 0xbb,
	0xbc, 0xae, 0x9c, 0x89, 0x9a, 0x38, 0x59, 0x04, 0xd2, 0x3a, 0xe3, 0x52, 0x54, 0xbb, 0xae, 0x15,
	0xa2, 0xbe, 0x3d, 0x4e, 0x79, 0x55, 0xe3, 0x36, 0x77, 0x3a, 0x0e, 0x46, 0x4d, 0xfd, 0x71, 0x14,
	0x74, 0xda, 0xac, 0x53, 0x63, 0x92, 0x21, 0x5c, 0x0a, 0xdc, 0xad, 0xe8, 0xbe, 0xe9, 0xd6, 0x45,
	0xe4, 0x3e, 0x3e, 0xa3, 0x44, 0x20, 0x5d, 0x9f, 0x37, 0x42, 0xdf, 0x67, 0x8c, 0xa8, 0xa9, 0xdf,
	0x86, 0x42, 0xd3, 0x31, 0x6d, 0x51, 0xa5, 0xc4, 0x2c, 0xe6, 0x08, 0x0f, 0xa8, 0x6b, 0x17, 0x7b,
	0x70, 0x37, 0xf8, 0x22, 0x68, 0xda, 0xb2, 0x98, 0xa7, 0x99, 0xaa, 0xc5, 0xfe, 0x9b, 0x82, 0xdb,
	0x61, 0xc8, 0x8e, 0x7c, 0xee, 0x04, 0xdc, 0xc4, 0x73, 0xf2, 0xc0, 0x75, 0xed, 0x9e, 0x34, 0x8e,
	0x27, 0x8d, 0xd6, 0x9f, 0x34, 0x97, 0xc8, 0xdd, 0x4e, 0x5e, 0xa5, 0x7b, 0xf2, 0x0a, 0xf3, 0x56,
	0xb6, 0x42, 0xa3, 0x61, 0xc4, 0xb2, 0xb2, 0x45, 0x16, 0x7b, 0x52, 0x7d, 0x2a, 0x9e, 0xea, 0x4f,
	0x61, 0x26, 0x10, 0x4e, 0xbd, 0x2a, 0x5b, 0x55, 0xda, 0x59, 0xd9, 0x31, 0xc1, 0x04, 0x1c, 0x79,
	0xd4, 0xa2, 0xac, 0x8d, 0xe5, 0xdf, 0x74, 0x5f, 0xfe, 0x7d, 0x27, 0xfc, 0xd1, 0xb6, 0xce, 0xac,
	0x30, 0x74, 0x93, 0xce, 0x32, 0x9c, 0xfa, 0x03, 0x1c, 0xdd, 0x9b, 0x31, 0xf9, 0x78, 0xc6, 0x2c,
	0x02, 0x08, 0x07, 0x57, 0x0d, 0x61, 0x8b, 0x10, 0x06, 0x4d, 0xf5, 0x1c, 0xb5, 0xd8, 0x1f, 0xd2,
	0xb0, 0x38, 0x3a, 0xee, 0x98, 0xaf, 0x73, 0x30, 0x15, 0x2e, 0x66, 0x98, 0xa8, 0x61, 0x63, 0x4c,
	0x8a, 0xbe, 0x80, 0xb7, 0x7c, 0xcf, 0xac, 0xca, 0xae, 0x39, 0xf5, 0x32, 0x19, 0x1e, 0x9d, 0x59,
	0xdf, 0xeb, 0x95, 0x46, 0x5e, 0xd9, 0xaa, 0xfa, 0xc2, 0x14, 0x96, 0x27, 0xd5, 0x7a, 0xe4, 0x65,
	0xcb, 0x08, 0x3b, 0x7a, 0xd7, 0x6a, 0x2a, 0xb6, 0x56, 0x5b, 0x30, 0x1b, 0x58, 0x0d, 0xa7, 0x4a,
	0x93, 0x29, 0xc1, 0xc6, 0xad, 0xc9, 0x0c, 0x8e, 0x3d, 0x6a, 0x19, 0x34, 0x52, 0xbf, 0x09, 0x39,
	0xd9, 0xaa, 0xd6, 0xf0, 0xcd, 0x12, 0x25, 0xb4, 0x6c, 0xd1, 0x8b, 0x46, 0x7f, 0x00, 0xd9, 0x63,
	0x4b, 0xd8, 0xf5, 0x40, 0x2d, 0xc8, 0x70, 0x73, 0x6a, 0x8c, 0xbe, 0x00, 0x79, 0x34, 0xcc, 0x25,
	0x9e, 0xea, 0xe1, 0x42, 0x74, 0x3b, 0xf4, 0x4d, 0x28, 0x78, 0xc2, 0xa9, 0x5b, 0x4e, 0xa3, 0x2a,
	0x5b, 0x01, 0xad, 0xc5, 0xc8, 0x9c, 0x51, 0x03, 0x8f, 0x5a, 0x01, 0xfb, 0x00, 0xae, 0x1d, 0x22,
	0x6d, 0x37, 0x48, 0x0a, 0xfb, 0x0a, 0xa4, 0x7d, 0x7e, 0xa1, 0x36, 0x02, 0x3e, 0xea, 0x2b, 0x90,
	0x92, 0x2d, 0xf5, 0x1a, 0x1c, 0x6e, 0x38, 0x25, 0x5b, 0xec, 0x3f, 0x5a, 0xf4, 0xf6, 0x7b, 0xcf,
	0x72, 0x84, 0xdf, 0xb3, 0xc3, 0xbe, 0x0b, 0x05, 0xb5, 0x85, 0x5c, 0x47, 0xd5, 0x0d, 0x13, 0xde,
	0xc1, 0xe1, 0x8e, 0x7c, 0x1f, 0x87, 0xeb, 0xcf, 0x20, 0x17, 0xb8, 0x76, 0x53, 0x46, 0x75, 0xc5,
	0x84, 0xa9, 0x9d, 0xc1, 0xfa, 0x63, 0xc8, 0xd6, 0xad, 0x86, 0x08, 0xa4, 0xca, 0x94, 0xb1, 0xd3,
	0xd4, 0x50, 0xbd, 0x04, 0x39, 0x4c, 0x03, 0x7a, 0xf1, 0x67, 0x28, 0x35, 0x3b, 0x6d, 0x7c, 0x11,
	0x58, 0x75, 0x95, 0x20, 0x29, 0xab, 0xce, 0x3e, 0xd3, 0xe0, 0x6a, 0xbf, 0xc7, 0x98, 0xdb, 0x15,
	0xc8, 0x9e, 0x59, 0x8e, 0xe5, 0x34, 0x94, 0xab, 0xe3, 0xea, 0x1d, 0x35, 0x12, 0x8f, 0x19, 0x2b,
	0xa8, 0x72, 0xd3, 0x14, 0x9e, 0xc4, 0x99, 0x29, 0x3a, 0xfd, 0x0b, 0x56, 0xb0, 0x1d, 0x75, 0xe1,
	0x96, 0xb9, 0x70, 0xfd, 0x53, 0x3c, 0x9e, 0xd3, 0x6b, 0x79, 0x23, 0x6c, 0x54, 0xbe, 0x4a, 0x45,
	0x75, 0x4f, 0x7f, 0xc9, 0xa6, 0x9f, 0x40, 0x6e, 0x2f, 0x3a, 0x05, 0xae, 0x0f, 0x30, 0xbc, 0xc4,
	0x82, 0xb2, 0xc4, 0x36, 0xa8, 0xde, 0xdc, 0x18, 0x53, 0xf5, 0xb1, 0xa5, 0xcf, 0xbe, 0xfc, 0xf7,
	0xe7, 0xa9, 0x12, 0xbb, 0x86, 0x05, 0x67, 0x50, 0x3e, 0x7f, 0x54, 0x36, 0x3d, 0xb3, 0x1c, 0x1d,
	0x30, 0x5b, 0xda, 0xba, 0x7e, 0x0e, 0x6f, 0x1d, 0xa0, 0x5d, 0xd3, 0xb5, 0x3f, 0x52, 0x35, 0xdf,
	0xeb, 0x08, 0xde, 0x23, 0xc1, 0x65, 0xb6, 0x10, 0x13, 0xf4, 0xe2, 0x0a, 0xa8, 0x7b, 0x0c, 0xd3,
	0x87, 0x6d, 0xc7, 0xc4, 0xe8, 0xbc, 0x8e, 0xde, 0x6d, 0xd2, 0xbb, 0xc9, 0xe6, 0x62, 0x7a, 0x41,
	0x68, 0x79, 0x4b, 0x5b, 0xaf, 0x7c, 0x99, 0x82, 0x6f, 0x0f, 0x14, 0x97, 0xfa, 0x27, 0x90, 0xa7,
	0x66, 0x8d, 0x07, 0xa3, 0x03, 0xbc, 0x18, 0xd3, 0x1f, 0x90, 0x5e, 0x25, 0xe9, 0x25, 0x36, 0xdf,
	0x91, 0xc6, 0x72, 0xdc, 0x75, 0xb8, 0x5d, 0x16, 0x91, 0x6d, 0xf4, 0xf4, 0x04, 0x72, 0xbb, 0xae,
	0xe5, 0xbc, 0x8e, 0xd4, 0x5d, 0x92, 0xba, 0xcd, 0x4a, 0x83, 0x52, 0xa6, 0x32, 0xad, 0x94, 0x5e,
	0x45, 0x19, 0x9f, 0xbc, 0x52, 0xb4, 0x99, 0x30, 0xaa, 0xe7, 0x70, 0xa5, 0xbf, 0x5c, 0xd6, 0x6b,
	0x90, 0x53, 0xad, 0x60, 0xa4, 0xfa, 0x42, 0x4c, 0xbd, 0xaf, 0xd6, 0x1e, 0x91, 0xad, 0x51, 0x51,
	0x8b, 0xba, 0x5f, 0xcd, 0x44, 0xfb, 0x36, 0x56, 0x48, 0xe9, 0x1e, 0x14, 0x76, 0x7a, 0x5e, 0xeb,
	0xa3, 0xe4, 0x6f, 0xc7, 0xe4, 0x07, 0x6b, 0x31, 0xb6, 0x46, 0x04, 0x8c, 0x2d, 0x0e, 0xba, 0xdf,
	0x53, 0x36, 0x60, 0xac, 0xcf, 0x20, 0x83, 0xa5, 0xa7, 0xbe, 0x3c, 0xce, 0x24, 0x1d, 0xa2, 0x93,
	0x55, 0x97, 0x49, 0x75, 0x9e, 0x5d, 0x1f, 0xb2, 0xbc, 0xdc, 0xb6, 0x51, 0xee, 0xa7, 0x50, 0x78,
	0xd9, 0x53, 0xd3, 0x25, 0xa1, 0x3a, 0xc6, 0xd7, 0x9e, 0xf2, 0x11, 0xc5, 0xdb, 0x00, 0x7b, 0x42,
	0xee, 0xa8, 0xaa, 0x31, 0x09, 0xed, 0xc1, 0x63, 0xa2, 0xa3, 0xdd, 0xe8, 0x28, 0xa1, 0xf4, 0xa7,
	0x1a, 0xcc, 0xa2, 0x36, 0x9a, 0xd8, 0x69, 0x87, 0x65, 0x5d, 0x02, 0xfa, 0x6f, 0x93, 0xfe, 0x5d,
	0xb6, 0x34, 0x5c, 0xbf, 0xab, 0x86, 0x0c, 0xbf, 0xd0, 0xe0, 0x4a, 0x97, 0x41, 0xa5, 0x58, 0x12,
	0x14, 0xef, 0x10, 0xc5, 0x3d, 0xc6, 0xc6, 0x51, 0x74, 0x53, 0x2e, 0x80, 0xe9, 0x3d, 0x21, 0x77,
	0xb1, 0xe0, 0x4e, 0x42, 0x7d, 0x85, 0xd4, 0x6f, 0xb1, 0x9b, 0x43, 0xd5, 0x51, 0x06, 0x45, 0x7f,
	0x06, 0x33, 0x7b, 0x42, 0x1e, 0x86, 0xe5, 0xfc, 0xb6, 0x4c, 0x44, 0xf9, 0x3e, 0x29, 0xdf, 0x61,
	0xb7, 0x86, 0x2a, 0x77, 0xb4, 0x50, 0xfe, 0xb7, 0x1a, 0xcc, 0xef, 0x09, 0xf9, 0x21, 0x7e, 0x30,
	0xec, 0xb4, 0x77, 0xa2, 0xda, 0x7e, 0xdb, 0xa9, 0xef, 0x53, 0xa9, 0x9e, 0x04, 0xce, 0x73, 0xc2,
	0xa9, 0xb0, 0x77, 0x86, 0xe2, 0x8c, 0x92, 0x46, 0xba, 0xdf, 0x6b, 0xb0, 0xd8, 0x47, 0x17, 0x2e,
	0x57, 0xa2, 0x7c, 0x5b, 0xc4, 0xf7, 0x84, 0x95, 0x27, 0xf2, 0xc5, 0xc5, 0x91, 0xf0, 0x0b, 0x0d,
	0x8a, 0x11, 0x21, 0x7d, 0x70, 0xf5, 0x78, 0x92, 0x08, 0xdc, 0x26, 0xc1, 0x95, 0xd9, 0xfa, 0x68,
	0xb8, 0x7e, 0x5d, 0xe4, 0xfa, 0x8d, 0x06, 0xa5, 0x61, 0x5c, 0x09, 0xee, 0xae, 0x67, 0x44, 0xf6,
	0x88, 0x3d, 0xb8, 0x1c, 0x59, 0x67, 0x9f, 0x55, 0x7e, 0x3e, 0x17, 0x7d, 0xad, 0x0f, 0x7e, 0x02,
	0xe9, 0x7f, 0xd2, 0xe0, 0x56, 0x74, 0x18, 0xf4, 0xfc, 0xac, 0x2c, 0x51, 0x58, 0x57, 0x63, 0x64,
	0x23, 0x3f, 0x5f, 0x4b, 0x2b, 0x13, 0xc7, 0xa1, 0x1b, 0xef, 0x92, 0x1b, 0x9b, 0xec, 0xe1, 0xe8,
	0x43, 0x62, 0x38, 0x07, 0x86, 0xf9, 0x2f, 0x1a, 0x2c, 0x8d, 0xa6, 0x55, 0xc1, 0x4e, 0x96, 0xf7,
	0x05, 0xf1, 0x3e, 0x63, 0x95, 0xff, 0x87, 0xb7, 0x7b, 0xc8, 0xfd, 0x43, 0x83, 0x95, 0x3d, 0x21,
	0x0d, 0x7e, 0xd1, 0x33, 0x6a, 0xd8, 0xce, 0x4f, 0x96, 0x7a, 0x9b, 0xa8, 0xdf, 0x65, 0x4f, 0x87,
	0x52, 0x4f, 0xa4, 0x41, 0xf2, 0x7f, 0x69, 0xb0, 0x3a, 0x8a, 0xbc, 0xef, 0x54, 0x48, 0x96, 0x7d,
	0x97, 0xd8, 0x5f, 0xb0, 0xe7, 0x97, 0x67, 0x1f, 0x3c, 0x28, 0x7e, 0xa7, 0xc1, 0x8d, 0x21, 0xf4,
	0x6f, 0x20, 0xa1, 0x9f, 0x10, 0xee, 0x06, 0xbb, 0x7f, 0x29, 0xdc, 0x28, 0x93, 0xff, 0xa6, 0xc1,
	0xf2, 0x9e, 0x90, 0xdf, 0x68, 0x52, 0x7c, 0x8f, 0x48, 0x9f, 0xb3, 0xc7, 0x43, 0x49, 0x27, 0x67,
	0xc4, 0xdf, 0x35, 0xb8, 0x33, 0x94, 0xf9, 0x8d, 0xa6, 0xc3, 0xf7, 0x89, 0x7a, 0x8b, 0x6d, 0x5e,
	0x92, 0x7a, 0x30, 0x17, 0x7e, 0xad, 0xc1, 0x5c, 0x3f, 0xf7, 0x1b, 0x48, 0x84, 0x47, 0x04, 0xfa,
	0x36, 0x5b, 0x9d, 0x0c, 0x1a, 0x65, 0xc1, 0x17, 0x1a, 0x5c, 0x8d, 0x93, 0x85, 0xb7, 0x88, 0xc9,
	0x82, 0x3d, 0x24, 0xb0, 0x75, 0x76, 0x77, 0x12, 0x18, 0x89, 0xab, 0xd7, 0xd9, 0xb5, 0x38, 0x57,
	0x74, 0x3f, 0x95, 0x2c, 0x59, 0x85, 0xc8, 0x1e, 0xb0, 0x7b, 0x93, 0xc8, 0x94, 0xbc, 0x2a, 0x5f,
	0xaf, 0x1e, 0xa8, 0xdb, 0xa3, 0xee, 0x80, 0xd1, 0xdf, 0x68, 0xaf, 0x1d, 0x23, 0x6f, 0x50, 0x2c,
	0xfc, 0x84, 0xc9, 0x1a, 0x22, 0x10, 0x4e, 0x3d, 0xe1, 0x98, 0xdc, 0x21, 0x92, 0x45, 0x56, 0x1c,
	0x24, 0xf1, 0x49, 0x0f, 0xc5, 0x3f, 0xd7, 0x40, 0x3f, 0x14, 0x4e, 0x3d, 0x7e, 0xbc, 0x24, 0x4c,
	0x52, 0x26, 0x92, 0xfb, 0x6c, 0x65, 0x90, 0x24, 0x18, 0xd0, 0x46, 0xaa, 0x5f, 0x69, 0xf0, 0x16,
	0x52, 0xbd, 0x39, 0xa4, 0x07, 0x84, 0xb4, 0xca, 0x96, 0x87, 0x23, 0xf5, 0xf1, 0x5c, 0x40, 0xe6,
	0xd0, 0x6a, 0x24, 0xcd, 0x30, 0xe6, 0xf3, 0x36, 0xb0, 0x1a, 0xdd, 0x40, 0xc4, 0xef, 0x34, 0xbf,
	0xc1, 0x40, 0xc4, 0x85, 0xb1, 0x04, 0xfc, 0x73, 0x1a, 0x66, 0xe3, 0xf7, 0x83, 0xfa, 0x8f, 0x20,
	0xfb, 0x5e, 0x78, 0xe1, 0x37, 0x6a, 0xe3, 0x94, 0x62, 0x20, 0xb1, 0x8b, 0x45, 0x76, 0x8b, 0xe4,
	0x8b, 0xec, 0x6a, 0xec, 0x6a, 0x23, 0xbc, 0x41, 0xc4, 0x00, 0x7c, 0x02, 0x70, 0xd8, 0xac, 0x9d,
	0x59, 0xf2, 0x63, 0xd7, 0x3f, 0xd5, 0x17, 0x46, 0x58, 0x0a, 0x1d, 0x1e, 0xa7, 0xc3, 0x48, 0x67,
	0x81, 0xdd, 0x88, 0xdf, 0x87, 0x75, 0x4c, 0xa3, 0xd6, 0x8f, 0xe9, 0x3b, 0x92, 0x84, 0xbe, 0x8e,
	0x2b, 0xc3, 0xaf, 0xdc, 0x1a, 0xa2, 0x63, 0xdf, 0x87, 0xd9, 0xd0, 0x97, 0xce, 0x65, 0xd4, 0xd7,
	0xf7, 0x67, 0xf0, 0x92, 0xad, 0xeb, 0xcf, 0xab, 0xee, 0x85, 0xd4, 0xce, 0x3a, 0x2c, 0xbb, 0x7e,
	0x63, 0xa3, 0x66, 0xc9, 0x5a, 0xd3, 0x3c, 0x15, 0x12, 0x4d, 0xe2, 0xd7, 0xc0, 0x86, 0xfa, 0x8b,
	0x02, 0x3f, 0x0c, 0xff, 0x41, 0x5f, 0xcb, 0x92, 0xb3, 0x8f, 0xff, 0x17, 0x00, 0x00, 0xff, 0xff,
	0xc9, 0x8c, 0x61, 0xfe, 0xbb, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicInnerEthereumAPIClient is the client API for PublicInnerEthereumAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicInnerEthereumAPIClient interface {
	GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error)
	ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error)
	Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error)
}

type publicInnerEthereumAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicInnerEthereumAPIClient(cc *grpc.ClientConn) PublicInnerEthereumAPIClient {
	return &publicInnerEthereumAPIClient{cc}
}

func (c *publicInnerEthereumAPIClient) GasPrice(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error) {
	out := new(PublicInnerEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicInnerEthereumAPI/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicInnerEthereumAPIClient) ProtocolVersion(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error) {
	out := new(PublicInnerEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicInnerEthereumAPI/ProtocolVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicInnerEthereumAPIClient) Syncing(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicInnerEthereumAPIReply, error) {
	out := new(PublicInnerEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicInnerEthereumAPI/Syncing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicInnerEthereumAPIServer is the server API for PublicInnerEthereumAPI service.
type PublicInnerEthereumAPIServer interface {
	GasPrice(context.Context, *empty.Empty) (*PublicInnerEthereumAPIReply, error)
	ProtocolVersion(context.Context, *empty.Empty) (*PublicInnerEthereumAPIReply, error)
	Syncing(context.Context, *empty.Empty) (*PublicInnerEthereumAPIReply, error)
}

func RegisterPublicInnerEthereumAPIServer(s *grpc.Server, srv PublicInnerEthereumAPIServer) {
	s.RegisterService(&_PublicInnerEthereumAPI_serviceDesc, srv)
}

func _PublicInnerEthereumAPI_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerEthereumAPIServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicInnerEthereumAPI/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerEthereumAPIServer).GasPrice(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicInnerEthereumAPI_ProtocolVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerEthereumAPIServer).ProtocolVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicInnerEthereumAPI/ProtocolVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerEthereumAPIServer).ProtocolVersion(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicInnerEthereumAPI_Syncing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicInnerEthereumAPIServer).Syncing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicInnerEthereumAPI/Syncing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicInnerEthereumAPIServer).Syncing(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicInnerEthereumAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicInnerEthereumAPI",
	HandlerType: (*PublicInnerEthereumAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GasPrice",
			Handler:    _PublicInnerEthereumAPI_GasPrice_Handler,
		},
		{
			MethodName: "ProtocolVersion",
			Handler:    _PublicInnerEthereumAPI_ProtocolVersion_Handler,
		},
		{
			MethodName: "Syncing",
			Handler:    _PublicInnerEthereumAPI_Syncing_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicEthereumAPIClient is the client API for PublicEthereumAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicEthereumAPIClient interface {
	// Etherbase is the address that mining rewards will be send to
	Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	// Coinbase is the address that mining rewards will be send to (alias for Etherbase)
	Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
	// Hashrate returns the POW hashrate
	Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error)
}

type publicEthereumAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicEthereumAPIClient(cc *grpc.ClientConn) PublicEthereumAPIClient {
	return &publicEthereumAPIClient{cc}
}

func (c *publicEthereumAPIClient) Etherbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicEthereumAPI/Etherbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) Coinbase(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicEthereumAPI/Coinbase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicEthereumAPIClient) Hashrate(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicEthereumAPIReply, error) {
	out := new(PublicEthereumAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicEthereumAPI/Hashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicEthereumAPIServer is the server API for PublicEthereumAPI service.
type PublicEthereumAPIServer interface {
	// Etherbase is the address that mining rewards will be send to
	Etherbase(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	// Coinbase is the address that mining rewards will be send to (alias for Etherbase)
	Coinbase(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
	// Hashrate returns the POW hashrate
	Hashrate(context.Context, *empty.Empty) (*PublicEthereumAPIReply, error)
}

func RegisterPublicEthereumAPIServer(s *grpc.Server, srv PublicEthereumAPIServer) {
	s.RegisterService(&_PublicEthereumAPI_serviceDesc, srv)
}

func _PublicEthereumAPI_Etherbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Etherbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicEthereumAPI/Etherbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Etherbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_Coinbase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Coinbase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicEthereumAPI/Coinbase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Coinbase(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicEthereumAPI_Hashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicEthereumAPIServer).Hashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicEthereumAPI/Hashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicEthereumAPIServer).Hashrate(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicEthereumAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicEthereumAPI",
	HandlerType: (*PublicEthereumAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Etherbase",
			Handler:    _PublicEthereumAPI_Etherbase_Handler,
		},
		{
			MethodName: "Coinbase",
			Handler:    _PublicEthereumAPI_Coinbase_Handler,
		},
		{
			MethodName: "Hashrate",
			Handler:    _PublicEthereumAPI_Hashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicAccountAPIClient is the client API for PublicAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicAccountAPIClient interface {
	Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicAccountAPIReply, error)
}

type publicAccountAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicAccountAPIClient(cc *grpc.ClientConn) PublicAccountAPIClient {
	return &publicAccountAPIClient{cc}
}

func (c *publicAccountAPIClient) Accounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicAccountAPIReply, error) {
	out := new(PublicAccountAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicAccountAPI/Accounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicAccountAPIServer is the server API for PublicAccountAPI service.
type PublicAccountAPIServer interface {
	Accounts(context.Context, *empty.Empty) (*PublicAccountAPIReply, error)
}

func RegisterPublicAccountAPIServer(s *grpc.Server, srv PublicAccountAPIServer) {
	s.RegisterService(&_PublicAccountAPI_serviceDesc, srv)
}

func _PublicAccountAPI_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAccountAPIServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicAccountAPI/Accounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAccountAPIServer).Accounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicAccountAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicAccountAPI",
	HandlerType: (*PublicAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _PublicAccountAPI_Accounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicBlockChainAPIClient is the client API for PublicBlockChainAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicBlockChainAPIClient interface {
	BlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	Call(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	EstimateGas(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBalance(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBlockByHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetBlockByNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetCode(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetStorageAt(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockHashAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockNumberAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error)
}

type publicBlockChainAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicBlockChainAPIClient(cc *grpc.ClientConn) PublicBlockChainAPIClient {
	return &publicBlockChainAPIClient{cc}
}

func (c *publicBlockChainAPIClient) BlockNumber(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/BlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) Call(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/Call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) EstimateGas(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/EstimateGas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBalance(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBlockByHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetBlockByNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetCode(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetStorageAt(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetStorageAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleByBlockHashAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetUncleByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleByBlockNumberAndIndex(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetUncleByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleCountByBlockHash(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetUncleCountByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicBlockChainAPIClient) GetUncleCountByBlockNumber(ctx context.Context, in *PublicBlockChainAPIRequest, opts ...grpc.CallOption) (*PublicBlockChainAPIReply, error) {
	out := new(PublicBlockChainAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicBlockChainAPI/GetUncleCountByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicBlockChainAPIServer is the server API for PublicBlockChainAPI service.
type PublicBlockChainAPIServer interface {
	BlockNumber(context.Context, *empty.Empty) (*PublicBlockChainAPIReply, error)
	Call(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	EstimateGas(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBalance(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBlockByHash(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetBlockByNumber(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetCode(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetStorageAt(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockHashAndIndex(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleByBlockNumberAndIndex(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockHash(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
	GetUncleCountByBlockNumber(context.Context, *PublicBlockChainAPIRequest) (*PublicBlockChainAPIReply, error)
}

func RegisterPublicBlockChainAPIServer(s *grpc.Server, srv PublicBlockChainAPIServer) {
	s.RegisterService(&_PublicBlockChainAPI_serviceDesc, srv)
}

func _PublicBlockChainAPI_BlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).BlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/BlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).BlockNumber(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/Call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).Call(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/EstimateGas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).EstimateGas(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBalance(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBlockByHash(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetBlockByNumber(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetCode(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetStorageAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetStorageAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetStorageAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetStorageAt(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetUncleByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockHashAndIndex(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetUncleByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleByBlockNumberAndIndex(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleCountByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetUncleCountByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockHash(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicBlockChainAPI_GetUncleCountByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicBlockChainAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicBlockChainAPI/GetUncleCountByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicBlockChainAPIServer).GetUncleCountByBlockNumber(ctx, req.(*PublicBlockChainAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicBlockChainAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicBlockChainAPI",
	HandlerType: (*PublicBlockChainAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BlockNumber",
			Handler:    _PublicBlockChainAPI_BlockNumber_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _PublicBlockChainAPI_Call_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _PublicBlockChainAPI_EstimateGas_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _PublicBlockChainAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _PublicBlockChainAPI_GetBlockByHash_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _PublicBlockChainAPI_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetCode",
			Handler:    _PublicBlockChainAPI_GetCode_Handler,
		},
		{
			MethodName: "GetStorageAt",
			Handler:    _PublicBlockChainAPI_GetStorageAt_Handler,
		},
		{
			MethodName: "GetUncleByBlockHashAndIndex",
			Handler:    _PublicBlockChainAPI_GetUncleByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetUncleByBlockNumberAndIndex",
			Handler:    _PublicBlockChainAPI_GetUncleByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetUncleCountByBlockHash",
			Handler:    _PublicBlockChainAPI_GetUncleCountByBlockHash_Handler,
		},
		{
			MethodName: "GetUncleCountByBlockNumber",
			Handler:    _PublicBlockChainAPI_GetUncleCountByBlockNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicTransactionPoolAPIClient is the client API for PublicTransactionPoolAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicTransactionPoolAPIClient interface {
	GetBlockTransactionCountByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetBlockTransactionCountByNumber(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionCount(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	GetTransactionReceipt(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	PendingTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	Resend(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SendRawTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SendTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	Sign(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
	SignTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error)
}

type publicTransactionPoolAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicTransactionPoolAPIClient(cc *grpc.ClientConn) PublicTransactionPoolAPIClient {
	return &publicTransactionPoolAPIClient{cc}
}

func (c *publicTransactionPoolAPIClient) GetBlockTransactionCountByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetBlockTransactionCountByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetBlockTransactionCountByNumber(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetBlockTransactionCountByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetRawTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionByHash(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionCount(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) GetTransactionReceipt(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) PendingTransactions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/PendingTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) Resend(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/Resend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SendRawTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/SendRawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SendTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) Sign(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicTransactionPoolAPIClient) SignTransaction(ctx context.Context, in *PublicTransactionPoolAPIRequest, opts ...grpc.CallOption) (*PublicTransactionPoolAPIReply, error) {
	out := new(PublicTransactionPoolAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicTransactionPoolAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicTransactionPoolAPIServer is the server API for PublicTransactionPoolAPI service.
type PublicTransactionPoolAPIServer interface {
	GetBlockTransactionCountByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetBlockTransactionCountByNumber(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockHashAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByBlockNumberAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetRawTransactionByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockHashAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionByHash(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionCount(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	GetTransactionReceipt(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	PendingTransactions(context.Context, *empty.Empty) (*PublicTransactionPoolAPIReply, error)
	Resend(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SendRawTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SendTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	Sign(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
	SignTransaction(context.Context, *PublicTransactionPoolAPIRequest) (*PublicTransactionPoolAPIReply, error)
}

func RegisterPublicTransactionPoolAPIServer(s *grpc.Server, srv PublicTransactionPoolAPIServer) {
	s.RegisterService(&_PublicTransactionPoolAPI_serviceDesc, srv)
}

func _PublicTransactionPoolAPI_GetBlockTransactionCountByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetBlockTransactionCountByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetBlockTransactionCountByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetBlockTransactionCountByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetBlockTransactionCountByNumber(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockHashAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByBlockNumberAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetRawTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetRawTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetRawTransactionByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockHashAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionByHash(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionCount(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).GetTransactionReceipt(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_PendingTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).PendingTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/PendingTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).PendingTransactions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_Resend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).Resend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/Resend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).Resend(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SendRawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SendRawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/SendRawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SendRawTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SendTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).Sign(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicTransactionPoolAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicTransactionPoolAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicTransactionPoolAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicTransactionPoolAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicTransactionPoolAPIServer).SignTransaction(ctx, req.(*PublicTransactionPoolAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicTransactionPoolAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicTransactionPoolAPI",
	HandlerType: (*PublicTransactionPoolAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockTransactionCountByHash",
			Handler:    _PublicTransactionPoolAPI_GetBlockTransactionCountByHash_Handler,
		},
		{
			MethodName: "GetBlockTransactionCountByNumber",
			Handler:    _PublicTransactionPoolAPI_GetBlockTransactionCountByNumber_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockHashAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockNumberAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByHash",
			Handler:    _PublicTransactionPoolAPI_GetRawTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockNumberAndIndex",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _PublicTransactionPoolAPI_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionCount",
			Handler:    _PublicTransactionPoolAPI_GetTransactionCount_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _PublicTransactionPoolAPI_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "PendingTransactions",
			Handler:    _PublicTransactionPoolAPI_PendingTransactions_Handler,
		},
		{
			MethodName: "Resend",
			Handler:    _PublicTransactionPoolAPI_Resend_Handler,
		},
		{
			MethodName: "SendRawTransaction",
			Handler:    _PublicTransactionPoolAPI_SendRawTransaction_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _PublicTransactionPoolAPI_SendTransaction_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _PublicTransactionPoolAPI_Sign_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _PublicTransactionPoolAPI_SignTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// PublicMinerAPIClient is the client API for PublicMinerAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicMinerAPIClient interface {
	// Mining returns an indication if this node is currently mining.
	Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error)
}

type publicMinerAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicMinerAPIClient(cc *grpc.ClientConn) PublicMinerAPIClient {
	return &publicMinerAPIClient{cc}
}

func (c *publicMinerAPIClient) Mining(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicMinerAPI/Mining", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitWork(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicMinerAPI/SubmitWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) GetWork(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicMinerAPI/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicMinerAPIClient) SubmitHashrate(ctx context.Context, in *PublicMinerAPIRequest, opts ...grpc.CallOption) (*PublicMinerAPIReply, error) {
	out := new(PublicMinerAPIReply)
	err := c.cc.Invoke(ctx, "/cpcpb.PublicMinerAPI/SubmitHashrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicMinerAPIServer is the server API for PublicMinerAPI service.
type PublicMinerAPIServer interface {
	// Mining returns an indication if this node is currently mining.
	Mining(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
	// accepted. Note, this is not an indication if the provided work was valid!
	SubmitWork(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
	// GetWork returns a work package for external miner. The work package consists of 3 strings
	// result[0], 32 bytes hex encoded current block header pow-hash
	// result[1], 32 bytes hex encoded seed hash used for DAG
	// result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
	GetWork(context.Context, *empty.Empty) (*PublicMinerAPIReply, error)
	// SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
	// hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
	// must be unique between nodes.
	SubmitHashrate(context.Context, *PublicMinerAPIRequest) (*PublicMinerAPIReply, error)
}

func RegisterPublicMinerAPIServer(s *grpc.Server, srv PublicMinerAPIServer) {
	s.RegisterService(&_PublicMinerAPI_serviceDesc, srv)
}

func _PublicMinerAPI_Mining_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).Mining(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicMinerAPI/Mining",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).Mining(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicMinerAPI/SubmitWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitWork(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicMinerAPI/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).GetWork(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicMinerAPI_SubmitHashrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublicMinerAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cpcpb.PublicMinerAPI/SubmitHashrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicMinerAPIServer).SubmitHashrate(ctx, req.(*PublicMinerAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicMinerAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cpcpb.PublicMinerAPI",
	HandlerType: (*PublicMinerAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Mining",
			Handler:    _PublicMinerAPI_Mining_Handler,
		},
		{
			MethodName: "SubmitWork",
			Handler:    _PublicMinerAPI_SubmitWork_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _PublicMinerAPI_GetWork_Handler,
		},
		{
			MethodName: "SubmitHashrate",
			Handler:    _PublicMinerAPI_SubmitHashrate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}
