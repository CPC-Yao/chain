// Code generated by protoc-gen-go. DO NOT EDIT.
// source: personal.proto

package personalpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PrivateAccountAPIRequest struct {
	Url                  *wrappers.StringValue `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 *wrappers.StringValue `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Pin                  *wrappers.BoolValue   `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"`
	Data                 []byte                `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	Sig                  []byte                `protobuf:"bytes,5,opt,name=sig,proto3" json:"sig,omitempty"`
	PrivKey              *wrappers.StringValue `protobuf:"bytes,6,opt,name=priv_key,json=privKey,proto3" json:"priv_key,omitempty"`
	Password             *wrappers.StringValue `protobuf:"bytes,7,opt,name=password,proto3" json:"password,omitempty"`
	Addr                 []byte                `protobuf:"bytes,8,opt,name=addr,proto3" json:"addr,omitempty"`
	Duration             *wrappers.UInt64Value `protobuf:"bytes,9,opt,name=duration,proto3" json:"duration,omitempty"`
	SendTxArgs           *any.Any              `protobuf:"bytes,10,opt,name=send_tx_args,json=sendTxArgs,proto3" json:"send_tx_args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PrivateAccountAPIRequest) Reset()         { *m = PrivateAccountAPIRequest{} }
func (m *PrivateAccountAPIRequest) String() string { return proto.CompactTextString(m) }
func (*PrivateAccountAPIRequest) ProtoMessage()    {}
func (*PrivateAccountAPIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3e04fdf12c9844f, []int{0}
}

func (m *PrivateAccountAPIRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAccountAPIRequest.Unmarshal(m, b)
}
func (m *PrivateAccountAPIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAccountAPIRequest.Marshal(b, m, deterministic)
}
func (m *PrivateAccountAPIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAccountAPIRequest.Merge(m, src)
}
func (m *PrivateAccountAPIRequest) XXX_Size() int {
	return xxx_messageInfo_PrivateAccountAPIRequest.Size(m)
}
func (m *PrivateAccountAPIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAccountAPIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAccountAPIRequest proto.InternalMessageInfo

func (m *PrivateAccountAPIRequest) GetUrl() *wrappers.StringValue {
	if m != nil {
		return m.Url
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPath() *wrappers.StringValue {
	if m != nil {
		return m.Path
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPin() *wrappers.BoolValue {
	if m != nil {
		return m.Pin
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPrivKey() *wrappers.StringValue {
	if m != nil {
		return m.PrivKey
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetPassword() *wrappers.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetDuration() *wrappers.UInt64Value {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *PrivateAccountAPIRequest) GetSendTxArgs() *any.Any {
	if m != nil {
		return m.SendTxArgs
	}
	return nil
}

type PrivateAccountAPIReply struct {
	Account              *any.Any `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	AccountAddresses     *any.Any `protobuf:"bytes,2,opt,name=account_addresses,json=accountAddresses,proto3" json:"account_addresses,omitempty"`
	RawWallets           *any.Any `protobuf:"bytes,3,opt,name=raw_wallets,json=rawWallets,proto3" json:"raw_wallets,omitempty"`
	IsOk                 bool     `protobuf:"varint,4,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	TxHash               []byte   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	SignTxResult         *any.Any `protobuf:"bytes,6,opt,name=sign_tx_result,json=signTxResult,proto3" json:"sign_tx_result,omitempty"`
	Signature            []byte   `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature,omitempty"`
	Address              []byte   `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateAccountAPIReply) Reset()         { *m = PrivateAccountAPIReply{} }
func (m *PrivateAccountAPIReply) String() string { return proto.CompactTextString(m) }
func (*PrivateAccountAPIReply) ProtoMessage()    {}
func (*PrivateAccountAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_f3e04fdf12c9844f, []int{1}
}

func (m *PrivateAccountAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivateAccountAPIReply.Unmarshal(m, b)
}
func (m *PrivateAccountAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivateAccountAPIReply.Marshal(b, m, deterministic)
}
func (m *PrivateAccountAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateAccountAPIReply.Merge(m, src)
}
func (m *PrivateAccountAPIReply) XXX_Size() int {
	return xxx_messageInfo_PrivateAccountAPIReply.Size(m)
}
func (m *PrivateAccountAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateAccountAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateAccountAPIReply proto.InternalMessageInfo

func (m *PrivateAccountAPIReply) GetAccount() *any.Any {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetAccountAddresses() *any.Any {
	if m != nil {
		return m.AccountAddresses
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetRawWallets() *any.Any {
	if m != nil {
		return m.RawWallets
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *PrivateAccountAPIReply) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetSignTxResult() *any.Any {
	if m != nil {
		return m.SignTxResult
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *PrivateAccountAPIReply) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateAccountAPIRequest)(nil), "personalpb.PrivateAccountAPIRequest")
	proto.RegisterType((*PrivateAccountAPIReply)(nil), "personalpb.PrivateAccountAPIReply")
}

func init() { proto.RegisterFile("personal.proto", fileDescriptor_f3e04fdf12c9844f) }

var fileDescriptor_f3e04fdf12c9844f = []byte{
	// 824 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0xcf, 0x8f, 0x1b, 0x35,
	0x14, 0xc7, 0x35, 0x9b, 0x74, 0xb3, 0xfb, 0x36, 0x2d, 0xad, 0x41, 0x61, 0xc8, 0x86, 0xb2, 0x3b,
	0x54, 0x4b, 0xa8, 0xca, 0x04, 0xda, 0x52, 0x50, 0x6f, 0xa9, 0xa8, 0xc4, 0x8a, 0x8a, 0x56, 0xb3,
	0x2d, 0x48, 0x5c, 0x22, 0x67, 0xc6, 0x4c, 0xac, 0x4c, 0x6d, 0x63, 0x7b, 0xf2, 0xe3, 0x80, 0x10,
	0x20, 0x0e, 0x9c, 0x39, 0xf0, 0xf7, 0x70, 0xe4, 0xcc, 0xbf, 0xd0, 0x3f, 0x04, 0xd9, 0xe3, 0x49,
	0xb2, 0x9d, 0x6c, 0xbb, 0x52, 0xd3, 0x5e, 0x22, 0x8f, 0xfd, 0x7d, 0xef, 0xf3, 0x1d, 0x3f, 0x3f,
	0x4f, 0xe0, 0x92, 0x20, 0x52, 0x71, 0x86, 0xb3, 0x50, 0x48, 0xae, 0x39, 0x82, 0xf2, 0x59, 0x0c,
	0xdb, 0xfb, 0x29, 0xe7, 0x69, 0x46, 0x7a, 0x76, 0x65, 0x98, 0xff, 0xd8, 0x23, 0x4f, 0x85, 0x9e,
	0x17, 0xc2, 0x76, 0xc7, 0x2d, 0x62, 0x41, 0x7b, 0x98, 0x31, 0xae, 0xb1, 0xa6, 0x9c, 0x29, 0xb7,
	0xfa, 0xde, 0xf3, 0xa1, 0x98, 0x95, 0x81, 0x57, 0x9f, 0x5f, 0x9a, 0x4a, 0x2c, 0x0c, 0xb5, 0x58,
	0x0f, 0xfe, 0xad, 0x81, 0xff, 0x48, 0xd2, 0x09, 0xd6, 0xa4, 0x1f, 0xc7, 0x3c, 0x67, 0xba, 0xff,
	0xe8, 0x38, 0x22, 0x3f, 0xe5, 0x44, 0x69, 0x14, 0x42, 0x2d, 0x97, 0x99, 0xef, 0x1d, 0x78, 0xdd,
	0xbd, 0x9b, 0x9d, 0xb0, 0x48, 0x15, 0x96, 0xa9, 0xc2, 0x13, 0x2d, 0x29, 0x4b, 0xbf, 0xc3, 0x59,
	0x4e, 0x22, 0x23, 0x44, 0x9f, 0x42, 0x5d, 0x60, 0x3d, 0xf2, 0xb7, 0xce, 0x11, 0x60, 0x95, 0xe8,
	0x06, 0xd4, 0x04, 0x65, 0x7e, 0xcd, 0x06, 0xb4, 0x2b, 0x01, 0xf7, 0x38, 0xcf, 0x5c, 0x7e, 0x41,
	0x19, 0x42, 0x50, 0x4f, 0xb0, 0xc6, 0x7e, 0xfd, 0xc0, 0xeb, 0x36, 0x23, 0x3b, 0x46, 0x97, 0xa1,
	0xa6, 0x68, 0xea, 0x5f, 0xb0, 0x53, 0x66, 0x88, 0xbe, 0x80, 0x1d, 0x21, 0xe9, 0x64, 0x30, 0x26,
	0x73, 0x7f, 0xfb, 0x1c, 0x4e, 0x1a, 0x46, 0xfd, 0x0d, 0x99, 0xa3, 0x2f, 0x61, 0x47, 0x60, 0xa5,
	0xa6, 0x5c, 0x26, 0x7e, 0xe3, 0x1c, 0x81, 0x0b, 0xb5, 0x31, 0x86, 0x93, 0x44, 0xfa, 0x3b, 0x85,
	0x31, 0x33, 0x36, 0xd9, 0x92, 0x5c, 0xda, 0x3a, 0xf9, 0xbb, 0x67, 0x64, 0x7b, 0x72, 0xcc, 0xf4,
	0x9d, 0xdb, 0x2e, 0x5b, 0xa9, 0x46, 0x77, 0xa0, 0xa9, 0x08, 0x4b, 0x06, 0x7a, 0x36, 0xc0, 0x32,
	0x55, 0x3e, 0xd8, 0xe8, 0x77, 0x2a, 0xd1, 0x7d, 0x36, 0x8f, 0xc0, 0x28, 0x1f, 0xcf, 0xfa, 0x32,
	0x55, 0xc1, 0xb3, 0x2d, 0x68, 0xad, 0xa9, 0xa5, 0xc8, 0xe6, 0x28, 0x84, 0x06, 0x2e, 0xa6, 0x5c,
	0x35, 0xd7, 0x67, 0x2b, 0x45, 0xa8, 0x0f, 0x57, 0xdc, 0x70, 0x60, 0x5e, 0x86, 0x28, 0x45, 0x94,
	0x2b, 0xeb, 0xfa, 0xc8, 0xcb, 0x4e, 0xde, 0x2f, 0xd5, 0xe8, 0x73, 0xd8, 0x93, 0x78, 0x3a, 0x98,
	0xe2, 0x2c, 0x23, 0x5a, 0xb9, 0x12, 0x9f, 0xf1, 0x12, 0x12, 0x4f, 0xbf, 0x2f, 0x74, 0xe8, 0x6d,
	0xb8, 0x40, 0xd5, 0x80, 0x8f, 0x6d, 0x91, 0x77, 0xa2, 0x3a, 0x55, 0x0f, 0xc7, 0xe8, 0x5d, 0x68,
	0xe8, 0xd9, 0x60, 0x84, 0xd5, 0xc8, 0x15, 0x7a, 0x5b, 0xcf, 0xbe, 0xc6, 0x6a, 0x84, 0xee, 0xc2,
	0x25, 0x45, 0x53, 0x66, 0xb6, 0x4a, 0x12, 0x95, 0x67, 0xda, 0x55, 0x7c, 0x3d, 0xa7, 0x69, 0xb4,
	0x8f, 0x67, 0x91, 0x55, 0xa2, 0x0e, 0xec, 0x9a, 0x67, 0xac, 0x73, 0x49, 0x6c, 0xbd, 0x9b, 0xd1,
	0x72, 0x02, 0xf9, 0xd0, 0x70, 0x6f, 0xee, 0xaa, 0x5a, 0x3e, 0xde, 0xfc, 0xe7, 0x22, 0x5c, 0xa9,
	0x6c, 0x33, 0xfa, 0xc3, 0x83, 0x8b, 0x5f, 0x11, 0x49, 0x27, 0xe5, 0x24, 0xba, 0x16, 0x2e, 0xbb,
	0x3b, 0x3c, 0xab, 0xc7, 0xda, 0xc1, 0x4b, 0x54, 0x22, 0x9b, 0x07, 0xd7, 0x7f, 0xfb, 0xef, 0xd9,
	0x5f, 0x5b, 0xd7, 0x82, 0x0f, 0x4c, 0xff, 0xab, 0xde, 0xe4, 0xb3, 0x5e, 0x19, 0xd3, 0x4b, 0x56,
	0x91, 0x77, 0xbd, 0xeb, 0xe8, 0x67, 0xd8, 0xbd, 0x1f, 0x47, 0x24, 0xe6, 0x13, 0x22, 0x37, 0x68,
	0xe1, 0xc8, 0x5a, 0x38, 0x08, 0xf6, 0xab, 0x16, 0x48, 0x89, 0x33, 0xf8, 0xdf, 0x3d, 0x68, 0x1e,
	0x3f, 0x15, 0x5c, 0xea, 0x08, 0x4f, 0x4d, 0x53, 0x6d, 0xce, 0xc2, 0xc7, 0xd6, 0xc2, 0x87, 0xc1,
	0xd5, 0xaa, 0x05, 0xba, 0x42, 0x34, 0x2e, 0x72, 0x68, 0x3e, 0xa0, 0x4a, 0xbb, 0x0c, 0x0a, 0xb5,
	0x2a, 0xc7, 0xe1, 0xbe, 0xb9, 0x5c, 0x5f, 0x15, 0x9b, 0xad, 0x30, 0x0c, 0x56, 0xc1, 0x9e, 0xc1,
	0x96, 0x47, 0xf9, 0x55, 0xa8, 0x5d, 0x4b, 0x0d, 0x82, 0xf7, 0xd7, 0x53, 0x1d, 0xc2, 0x40, 0x7f,
	0xf5, 0x60, 0xef, 0x01, 0x8f, 0xc7, 0x9b, 0x3f, 0x76, 0x2f, 0xf2, 0xb0, 0x04, 0x1a, 0x0f, 0xbf,
	0x00, 0x7c, 0x4b, 0xa6, 0x9b, 0x77, 0xf0, 0x91, 0x75, 0x70, 0x18, 0x74, 0xaa, 0x0e, 0xd8, 0x82,
	0xe7, 0x0c, 0x3c, 0x14, 0x84, 0x15, 0xdb, 0xf2, 0x66, 0x0c, 0xf0, 0x05, 0xcf, 0x18, 0xf8, 0xd3,
	0x83, 0xb7, 0x4e, 0xcc, 0x55, 0x2c, 0x31, 0x53, 0x38, 0xb6, 0xf7, 0xf8, 0xe6, 0x6c, 0xdc, 0xb0,
	0x36, 0x8e, 0x82, 0xc3, 0xaa, 0x0d, 0x75, 0x1a, 0x5a, 0x1c, 0xc3, 0xfa, 0x09, 0x4d, 0x37, 0xc9,
	0x3f, 0xb4, 0xfc, 0xfd, 0xa0, 0xb5, 0x86, 0x4f, 0x53, 0x0b, 0xfd, 0xdb, 0x83, 0x96, 0xa1, 0xf6,
	0x59, 0xf2, 0xfa, 0xf6, 0xe1, 0x96, 0xf5, 0xf1, 0x49, 0xd0, 0x5d, 0xef, 0xa3, 0xca, 0x5e, 0x94,
	0xc6, 0x5c, 0xfc, 0x6f, 0xbc, 0x34, 0xa7, 0xa1, 0xc6, 0x8b, 0xf9, 0x4a, 0x3c, 0x61, 0xd9, 0x6b,
	0x69, 0xd7, 0x17, 0x7c, 0x25, 0x72, 0x76, 0xba, 0x61, 0xef, 0xdd, 0x86, 0x23, 0x2e, 0xd3, 0x70,
	0x48, 0xf5, 0x30, 0x8f, 0xc7, 0x44, 0x87, 0xb1, 0x88, 0x47, 0x98, 0xb2, 0xb0, 0xf8, 0x5d, 0xc2,
	0x7e, 0x58, 0xf9, 0x8b, 0x3a, 0xdc, 0xb6, 0x17, 0xd9, 0xad, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0x60, 0xe7, 0x74, 0xc7, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PrivateAccountAPIClient is the client API for PrivateAccountAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PrivateAccountAPIClient interface {
	DeriveAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	EcRecover(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ImportRawKey(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	LockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	NewAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	OpenWallet(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	Sign(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SignAndSendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	SignTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
	UnlockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error)
}

type privateAccountAPIClient struct {
	cc *grpc.ClientConn
}

func NewPrivateAccountAPIClient(cc *grpc.ClientConn) PrivateAccountAPIClient {
	return &privateAccountAPIClient{cc}
}

func (c *privateAccountAPIClient) DeriveAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/DeriveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) EcRecover(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/EcRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ImportRawKey(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/ImportRawKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) LockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) NewAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) OpenWallet(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/OpenWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) Sign(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SignAndSendTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/SignAndSendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) SignTransaction(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *privateAccountAPIClient) UnlockAccount(ctx context.Context, in *PrivateAccountAPIRequest, opts ...grpc.CallOption) (*PrivateAccountAPIReply, error) {
	out := new(PrivateAccountAPIReply)
	err := c.cc.Invoke(ctx, "/personalpb.PrivateAccountAPI/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrivateAccountAPIServer is the server API for PrivateAccountAPI service.
type PrivateAccountAPIServer interface {
	DeriveAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	EcRecover(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	ImportRawKey(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	ListAccounts(context.Context, *empty.Empty) (*PrivateAccountAPIReply, error)
	ListWallets(context.Context, *empty.Empty) (*PrivateAccountAPIReply, error)
	LockAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	NewAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	OpenWallet(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SendTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	Sign(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SignAndSendTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	SignTransaction(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
	UnlockAccount(context.Context, *PrivateAccountAPIRequest) (*PrivateAccountAPIReply, error)
}

func RegisterPrivateAccountAPIServer(s *grpc.Server, srv PrivateAccountAPIServer) {
	s.RegisterService(&_PrivateAccountAPI_serviceDesc, srv)
}

func _PrivateAccountAPI_DeriveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).DeriveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/DeriveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).DeriveAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_EcRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).EcRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/EcRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).EcRecover(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ImportRawKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ImportRawKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/ImportRawKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ImportRawKey(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ListAccounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).ListWallets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).LockAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).NewAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).OpenWallet(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SendTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).Sign(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SignAndSendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SignAndSendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/SignAndSendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SignAndSendTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).SignTransaction(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PrivateAccountAPI_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateAccountAPIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrivateAccountAPIServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personalpb.PrivateAccountAPI/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrivateAccountAPIServer).UnlockAccount(ctx, req.(*PrivateAccountAPIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PrivateAccountAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personalpb.PrivateAccountAPI",
	HandlerType: (*PrivateAccountAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeriveAccount",
			Handler:    _PrivateAccountAPI_DeriveAccount_Handler,
		},
		{
			MethodName: "EcRecover",
			Handler:    _PrivateAccountAPI_EcRecover_Handler,
		},
		{
			MethodName: "ImportRawKey",
			Handler:    _PrivateAccountAPI_ImportRawKey_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _PrivateAccountAPI_ListAccounts_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _PrivateAccountAPI_ListWallets_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _PrivateAccountAPI_LockAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _PrivateAccountAPI_NewAccount_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _PrivateAccountAPI_OpenWallet_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _PrivateAccountAPI_SendTransaction_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _PrivateAccountAPI_Sign_Handler,
		},
		{
			MethodName: "SignAndSendTransaction",
			Handler:    _PrivateAccountAPI_SignAndSendTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _PrivateAccountAPI_SignTransaction_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _PrivateAccountAPI_UnlockAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "personal.proto",
}
