// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/personal/personal.proto

package personal

import (
	common "bitbucket.org/cpchain/chain/api/v1/common"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// OpenWalletRequest interface OpenWallet request parameters
type OpenWalletRequest struct {
	Url                  string                `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Passphrase           *wrappers.StringValue `protobuf:"bytes,2,opt,name=passphrase,proto3" json:"passphrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *OpenWalletRequest) Reset()         { *m = OpenWalletRequest{} }
func (m *OpenWalletRequest) String() string { return proto.CompactTextString(m) }
func (*OpenWalletRequest) ProtoMessage()    {}
func (*OpenWalletRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{0}
}

func (m *OpenWalletRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OpenWalletRequest.Unmarshal(m, b)
}
func (m *OpenWalletRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OpenWalletRequest.Marshal(b, m, deterministic)
}
func (m *OpenWalletRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OpenWalletRequest.Merge(m, src)
}
func (m *OpenWalletRequest) XXX_Size() int {
	return xxx_messageInfo_OpenWalletRequest.Size(m)
}
func (m *OpenWalletRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_OpenWalletRequest.DiscardUnknown(m)
}

var xxx_messageInfo_OpenWalletRequest proto.InternalMessageInfo

func (m *OpenWalletRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *OpenWalletRequest) GetPassphrase() *wrappers.StringValue {
	if m != nil {
		return m.Passphrase
	}
	return nil
}

type DeriveAccountRequest struct {
	Url                  string              `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Path                 string              `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Pin                  *wrappers.BoolValue `protobuf:"bytes,3,opt,name=pin,proto3" json:"pin,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *DeriveAccountRequest) Reset()         { *m = DeriveAccountRequest{} }
func (m *DeriveAccountRequest) String() string { return proto.CompactTextString(m) }
func (*DeriveAccountRequest) ProtoMessage()    {}
func (*DeriveAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{1}
}

func (m *DeriveAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeriveAccountRequest.Unmarshal(m, b)
}
func (m *DeriveAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeriveAccountRequest.Marshal(b, m, deterministic)
}
func (m *DeriveAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeriveAccountRequest.Merge(m, src)
}
func (m *DeriveAccountRequest) XXX_Size() int {
	return xxx_messageInfo_DeriveAccountRequest.Size(m)
}
func (m *DeriveAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeriveAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeriveAccountRequest proto.InternalMessageInfo

func (m *DeriveAccountRequest) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *DeriveAccountRequest) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DeriveAccountRequest) GetPin() *wrappers.BoolValue {
	if m != nil {
		return m.Pin
	}
	return nil
}

type NewAccountRequest struct {
	Password             string   `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewAccountRequest) Reset()         { *m = NewAccountRequest{} }
func (m *NewAccountRequest) String() string { return proto.CompactTextString(m) }
func (*NewAccountRequest) ProtoMessage()    {}
func (*NewAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{2}
}

func (m *NewAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NewAccountRequest.Unmarshal(m, b)
}
func (m *NewAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NewAccountRequest.Marshal(b, m, deterministic)
}
func (m *NewAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewAccountRequest.Merge(m, src)
}
func (m *NewAccountRequest) XXX_Size() int {
	return xxx_messageInfo_NewAccountRequest.Size(m)
}
func (m *NewAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewAccountRequest proto.InternalMessageInfo

func (m *NewAccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type ImportRawKeyRequest struct {
	Privkey              string   `protobuf:"bytes,1,opt,name=privkey,proto3" json:"privkey,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImportRawKeyRequest) Reset()         { *m = ImportRawKeyRequest{} }
func (m *ImportRawKeyRequest) String() string { return proto.CompactTextString(m) }
func (*ImportRawKeyRequest) ProtoMessage()    {}
func (*ImportRawKeyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{3}
}

func (m *ImportRawKeyRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ImportRawKeyRequest.Unmarshal(m, b)
}
func (m *ImportRawKeyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ImportRawKeyRequest.Marshal(b, m, deterministic)
}
func (m *ImportRawKeyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImportRawKeyRequest.Merge(m, src)
}
func (m *ImportRawKeyRequest) XXX_Size() int {
	return xxx_messageInfo_ImportRawKeyRequest.Size(m)
}
func (m *ImportRawKeyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ImportRawKeyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ImportRawKeyRequest proto.InternalMessageInfo

func (m *ImportRawKeyRequest) GetPrivkey() string {
	if m != nil {
		return m.Privkey
	}
	return ""
}

func (m *ImportRawKeyRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

type UnlockAccountRequest struct {
	Address              string                `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Password             string                `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Duration             *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=duration,proto3" json:"duration,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *UnlockAccountRequest) Reset()         { *m = UnlockAccountRequest{} }
func (m *UnlockAccountRequest) String() string { return proto.CompactTextString(m) }
func (*UnlockAccountRequest) ProtoMessage()    {}
func (*UnlockAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{4}
}

func (m *UnlockAccountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnlockAccountRequest.Unmarshal(m, b)
}
func (m *UnlockAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnlockAccountRequest.Marshal(b, m, deterministic)
}
func (m *UnlockAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnlockAccountRequest.Merge(m, src)
}
func (m *UnlockAccountRequest) XXX_Size() int {
	return xxx_messageInfo_UnlockAccountRequest.Size(m)
}
func (m *UnlockAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnlockAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnlockAccountRequest proto.InternalMessageInfo

func (m *UnlockAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UnlockAccountRequest) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *UnlockAccountRequest) GetDuration() *wrappers.UInt64Value {
	if m != nil {
		return m.Duration
	}
	return nil
}

type SendTxArgs struct {
	From                 string                `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To                   *wrappers.StringValue `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Gas                  *wrappers.UInt64Value `protobuf:"bytes,3,opt,name=gas,proto3" json:"gas,omitempty"`
	GasPrice             *wrappers.UInt64Value `protobuf:"bytes,4,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
	Value                *wrappers.UInt64Value `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Nonce                *wrappers.UInt64Value `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Data                 []byte                `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Input                []byte                `protobuf:"bytes,8,opt,name=input,proto3" json:"input,omitempty"`
	IsPrivate            bool                  `protobuf:"varint,9,opt,name=isPrivate,proto3" json:"isPrivate,omitempty"`
	Participants         []string              `protobuf:"bytes,10,rep,name=participants,proto3" json:"participants,omitempty"`
	Passwd               string                `protobuf:"bytes,11,opt,name=passwd,proto3" json:"passwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *SendTxArgs) Reset()         { *m = SendTxArgs{} }
func (m *SendTxArgs) String() string { return proto.CompactTextString(m) }
func (*SendTxArgs) ProtoMessage()    {}
func (*SendTxArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{5}
}

func (m *SendTxArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendTxArgs.Unmarshal(m, b)
}
func (m *SendTxArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendTxArgs.Marshal(b, m, deterministic)
}
func (m *SendTxArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTxArgs.Merge(m, src)
}
func (m *SendTxArgs) XXX_Size() int {
	return xxx_messageInfo_SendTxArgs.Size(m)
}
func (m *SendTxArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTxArgs.DiscardUnknown(m)
}

var xxx_messageInfo_SendTxArgs proto.InternalMessageInfo

func (m *SendTxArgs) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *SendTxArgs) GetTo() *wrappers.StringValue {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SendTxArgs) GetGas() *wrappers.UInt64Value {
	if m != nil {
		return m.Gas
	}
	return nil
}

func (m *SendTxArgs) GetGasPrice() *wrappers.UInt64Value {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *SendTxArgs) GetValue() *wrappers.UInt64Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *SendTxArgs) GetNonce() *wrappers.UInt64Value {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *SendTxArgs) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SendTxArgs) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

func (m *SendTxArgs) GetIsPrivate() bool {
	if m != nil {
		return m.IsPrivate
	}
	return false
}

func (m *SendTxArgs) GetParticipants() []string {
	if m != nil {
		return m.Participants
	}
	return nil
}

func (m *SendTxArgs) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type SignTransactionResult struct {
	Raw                  []byte              `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
	Tx                   *common.Transaction `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SignTransactionResult) Reset()         { *m = SignTransactionResult{} }
func (m *SignTransactionResult) String() string { return proto.CompactTextString(m) }
func (*SignTransactionResult) ProtoMessage()    {}
func (*SignTransactionResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{6}
}

func (m *SignTransactionResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignTransactionResult.Unmarshal(m, b)
}
func (m *SignTransactionResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignTransactionResult.Marshal(b, m, deterministic)
}
func (m *SignTransactionResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignTransactionResult.Merge(m, src)
}
func (m *SignTransactionResult) XXX_Size() int {
	return xxx_messageInfo_SignTransactionResult.Size(m)
}
func (m *SignTransactionResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SignTransactionResult.DiscardUnknown(m)
}

var xxx_messageInfo_SignTransactionResult proto.InternalMessageInfo

func (m *SignTransactionResult) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *SignTransactionResult) GetTx() *common.Transaction {
	if m != nil {
		return m.Tx
	}
	return nil
}

type Signature struct {
	Signature            []byte   `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Signature) Reset()         { *m = Signature{} }
func (m *Signature) String() string { return proto.CompactTextString(m) }
func (*Signature) ProtoMessage()    {}
func (*Signature) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{7}
}

func (m *Signature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Signature.Unmarshal(m, b)
}
func (m *Signature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Signature.Marshal(b, m, deterministic)
}
func (m *Signature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Signature.Merge(m, src)
}
func (m *Signature) XXX_Size() int {
	return xxx_messageInfo_Signature.Size(m)
}
func (m *Signature) XXX_DiscardUnknown() {
	xxx_messageInfo_Signature.DiscardUnknown(m)
}

var xxx_messageInfo_Signature proto.InternalMessageInfo

func (m *Signature) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type SignRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	Passwd               string   `protobuf:"bytes,3,opt,name=passwd,proto3" json:"passwd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SignRequest) Reset()         { *m = SignRequest{} }
func (m *SignRequest) String() string { return proto.CompactTextString(m) }
func (*SignRequest) ProtoMessage()    {}
func (*SignRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{8}
}

func (m *SignRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SignRequest.Unmarshal(m, b)
}
func (m *SignRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SignRequest.Marshal(b, m, deterministic)
}
func (m *SignRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SignRequest.Merge(m, src)
}
func (m *SignRequest) XXX_Size() int {
	return xxx_messageInfo_SignRequest.Size(m)
}
func (m *SignRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SignRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SignRequest proto.InternalMessageInfo

func (m *SignRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SignRequest) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *SignRequest) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

type EcRecoverRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Sig                  []byte   `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EcRecoverRequest) Reset()         { *m = EcRecoverRequest{} }
func (m *EcRecoverRequest) String() string { return proto.CompactTextString(m) }
func (*EcRecoverRequest) ProtoMessage()    {}
func (*EcRecoverRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_251b7bcf7ee513dd, []int{9}
}

func (m *EcRecoverRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EcRecoverRequest.Unmarshal(m, b)
}
func (m *EcRecoverRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EcRecoverRequest.Marshal(b, m, deterministic)
}
func (m *EcRecoverRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EcRecoverRequest.Merge(m, src)
}
func (m *EcRecoverRequest) XXX_Size() int {
	return xxx_messageInfo_EcRecoverRequest.Size(m)
}
func (m *EcRecoverRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EcRecoverRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EcRecoverRequest proto.InternalMessageInfo

func (m *EcRecoverRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *EcRecoverRequest) GetSig() []byte {
	if m != nil {
		return m.Sig
	}
	return nil
}

func init() {
	proto.RegisterType((*OpenWalletRequest)(nil), "personal.OpenWalletRequest")
	proto.RegisterType((*DeriveAccountRequest)(nil), "personal.DeriveAccountRequest")
	proto.RegisterType((*NewAccountRequest)(nil), "personal.NewAccountRequest")
	proto.RegisterType((*ImportRawKeyRequest)(nil), "personal.ImportRawKeyRequest")
	proto.RegisterType((*UnlockAccountRequest)(nil), "personal.UnlockAccountRequest")
	proto.RegisterType((*SendTxArgs)(nil), "personal.SendTxArgs")
	proto.RegisterType((*SignTransactionResult)(nil), "personal.SignTransactionResult")
	proto.RegisterType((*Signature)(nil), "personal.Signature")
	proto.RegisterType((*SignRequest)(nil), "personal.SignRequest")
	proto.RegisterType((*EcRecoverRequest)(nil), "personal.EcRecoverRequest")
}

func init() { proto.RegisterFile("v1/personal/personal.proto", fileDescriptor_251b7bcf7ee513dd) }

var fileDescriptor_251b7bcf7ee513dd = []byte{
	// 951 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xdb, 0x6e, 0xdb, 0x36,
	0x18, 0xc7, 0x61, 0x3b, 0x07, 0xfb, 0xb3, 0xbb, 0xa4, 0xcc, 0x01, 0x82, 0x92, 0xa6, 0x1e, 0x8b,
	0xae, 0x6e, 0x17, 0xd8, 0x58, 0x36, 0x0c, 0x45, 0xb1, 0x9b, 0x14, 0x2b, 0xb0, 0xa0, 0xa7, 0x41,
	0x49, 0x36, 0x60, 0x37, 0x1b, 0x2d, 0x31, 0x8a, 0x16, 0x99, 0xd4, 0x48, 0xca, 0x4e, 0x6e, 0x77,
	0xb1, 0x17, 0xd8, 0x2b, 0xec, 0x51, 0xf6, 0x06, 0x7b, 0x85, 0x3d, 0xc8, 0x40, 0x4a, 0xb2, 0x4e,
	0x8e, 0xe1, 0x5d, 0x85, 0x87, 0xef, 0xfb, 0xff, 0xc8, 0xef, 0xa3, 0xfe, 0x31, 0xd8, 0xd3, 0x2f,
	0x46, 0x11, 0x15, 0x92, 0x33, 0x12, 0xce, 0x07, 0xc3, 0x48, 0x70, 0xc5, 0x51, 0x3b, 0x9b, 0xdb,
	0x3b, 0x2e, 0x9f, 0x4c, 0x38, 0x1b, 0x25, 0x7f, 0x92, 0x6d, 0xfb, 0xc0, 0xe7, 0xdc, 0x0f, 0xe9,
	0xc8, 0xcc, 0xc6, 0xf1, 0xd5, 0x88, 0x4e, 0x22, 0x75, 0x97, 0x6e, 0x1e, 0x55, 0x37, 0x67, 0x82,
	0x44, 0x5a, 0x2f, 0xdd, 0x3f, 0x4c, 0xf7, 0x49, 0x14, 0x8c, 0x08, 0x63, 0x5c, 0x11, 0x15, 0x70,
	0x96, 0xee, 0x62, 0x17, 0x1e, 0x7e, 0x8c, 0x28, 0xfb, 0x91, 0x84, 0x21, 0x55, 0x0e, 0xfd, 0x2d,
	0xa6, 0x52, 0xa1, 0x6d, 0x68, 0xc5, 0x22, 0xb4, 0x1a, 0xfd, 0xc6, 0xa0, 0xe3, 0xe8, 0x21, 0xfa,
	0x06, 0x20, 0x22, 0x52, 0x46, 0xd7, 0x82, 0x48, 0x6a, 0x35, 0xfb, 0x8d, 0x41, 0xf7, 0xe4, 0x70,
	0x98, 0x28, 0x0f, 0x33, 0xf2, 0xf0, 0x5c, 0x89, 0x80, 0xf9, 0x3f, 0x90, 0x30, 0xa6, 0x4e, 0x21,
	0x1e, 0xff, 0x0a, 0xbb, 0xdf, 0x52, 0x11, 0x4c, 0xe9, 0xa9, 0xeb, 0xf2, 0x98, 0x2d, 0xe1, 0x20,
	0x58, 0x8b, 0x88, 0xba, 0x36, 0x84, 0x8e, 0x63, 0xc6, 0xe8, 0x18, 0x5a, 0x51, 0xc0, 0xac, 0x96,
	0x81, 0xda, 0x35, 0xe8, 0x6b, 0xce, 0xc3, 0x04, 0xa9, 0xc3, 0xf0, 0x08, 0x1e, 0x7e, 0xa0, 0xb3,
	0x0a, 0xc8, 0x86, 0xb6, 0x3e, 0xce, 0x8c, 0x0b, 0x2f, 0xa5, 0xcd, 0xe7, 0xf8, 0x2d, 0xec, 0x9c,
	0x4d, 0x22, 0x2e, 0x94, 0x43, 0x66, 0x6f, 0xe9, 0x5d, 0x96, 0x62, 0xc1, 0x66, 0x24, 0x82, 0xe9,
	0x0d, 0xbd, 0x4b, 0x33, 0xb2, 0x69, 0x49, 0xac, 0x59, 0x11, 0xfb, 0xa3, 0x01, 0xbb, 0x97, 0x2c,
	0xe4, 0xee, 0x4d, 0xe5, 0x04, 0x16, 0x6c, 0x12, 0xcf, 0x13, 0x54, 0xca, 0x4c, 0x2e, 0x9d, 0x2e,
	0x93, 0x43, 0x2f, 0xa1, 0xed, 0xc5, 0xc2, 0x34, 0x2c, 0xbd, 0x7f, 0xbd, 0xe8, 0x97, 0x67, 0x4c,
	0x7d, 0xfd, 0x55, 0x52, 0x81, 0x79, 0x34, 0xfe, 0xab, 0x05, 0x70, 0x4e, 0x99, 0x77, 0x71, 0x7b,
	0x2a, 0x7c, 0xa9, 0xeb, 0x7a, 0x25, 0xf8, 0x24, 0x65, 0x9b, 0x31, 0x3a, 0x86, 0xa6, 0xe2, 0x2b,
	0xf5, 0xb2, 0xa9, 0x38, 0x1a, 0x42, 0xcb, 0x27, 0x72, 0xa5, 0x53, 0xe8, 0x40, 0x7d, 0x74, 0x9f,
	0xc8, 0xef, 0x45, 0xe0, 0x52, 0x6b, 0x6d, 0x95, 0xa3, 0x67, 0xd1, 0xe8, 0x04, 0xd6, 0xa7, 0x7a,
	0xc9, 0x5a, 0x5f, 0x21, 0x2d, 0x09, 0xd5, 0x39, 0x8c, 0x33, 0x97, 0x5a, 0x1b, 0xab, 0xe4, 0x98,
	0x50, 0x5d, 0x13, 0x8f, 0x28, 0x62, 0x6d, 0xf6, 0x1b, 0x83, 0x9e, 0x63, 0xc6, 0x68, 0x17, 0xd6,
	0x03, 0x16, 0xc5, 0xca, 0x6a, 0x9b, 0xc5, 0x64, 0x82, 0x0e, 0xa1, 0x13, 0xe8, 0xc3, 0x4d, 0x89,
	0xa2, 0x56, 0xa7, 0xdf, 0x18, 0xb4, 0x9d, 0x7c, 0x01, 0x61, 0xe8, 0x45, 0x44, 0xa8, 0xc0, 0x0d,
	0x22, 0xc2, 0x94, 0xb4, 0xa0, 0xdf, 0x1a, 0x74, 0x9c, 0xd2, 0x1a, 0xda, 0x87, 0x0d, 0xd3, 0x54,
	0xcf, 0xea, 0x9a, 0x0e, 0xa4, 0x33, 0xfc, 0x01, 0xf6, 0xce, 0x03, 0x9f, 0x5d, 0x08, 0xc2, 0x24,
	0x71, 0x75, 0xe7, 0x1c, 0x2a, 0xe3, 0xd0, 0x7c, 0x1a, 0x82, 0xcc, 0x4c, 0xbf, 0x7a, 0x8e, 0x1e,
	0xa2, 0x27, 0xd0, 0x54, 0xb7, 0x69, 0xbb, 0x76, 0x86, 0xa9, 0x3f, 0x14, 0x13, 0x9b, 0xea, 0x16,
	0x3f, 0x87, 0x8e, 0xd6, 0x23, 0x2a, 0x16, 0x54, 0x1f, 0x5b, 0x66, 0x93, 0x54, 0x29, 0x5f, 0xc0,
	0xef, 0xa1, 0xab, 0x43, 0xb3, 0x07, 0x9a, 0x55, 0xa3, 0x51, 0xa8, 0x06, 0x82, 0x35, 0xfd, 0x4a,
	0xb3, 0xaf, 0x51, 0x8f, 0x0b, 0x37, 0x69, 0x95, 0x6e, 0xf2, 0x12, 0xb6, 0xdf, 0xb8, 0x0e, 0x75,
	0xf9, 0x94, 0x8a, 0x65, 0x9a, 0xdb, 0xd0, 0x92, 0x81, 0x6f, 0x24, 0x7b, 0x8e, 0x1e, 0x9e, 0xfc,
	0x0d, 0xf0, 0x49, 0xfa, 0xb5, 0xbc, 0x27, 0x8c, 0xf8, 0x54, 0xa0, 0x31, 0xf4, 0xde, 0x05, 0x52,
	0xa5, 0xab, 0x12, 0xed, 0xd7, 0xfa, 0xf9, 0x46, 0x3b, 0xa0, 0xbd, 0x9d, 0xd5, 0x21, 0x8b, 0xc4,
	0x83, 0xdf, 0xff, 0xf9, 0xf7, 0xcf, 0x26, 0xc6, 0x8f, 0x8c, 0xdf, 0x15, 0x2d, 0x37, 0x2c, 0x08,
	0xbe, 0x6a, 0xbc, 0x40, 0xbf, 0x40, 0x57, 0x33, 0x12, 0xe7, 0xfb, 0x3f, 0x88, 0x67, 0x06, 0xf1,
	0x29, 0x3e, 0x5c, 0x88, 0x48, 0xf5, 0x34, 0x21, 0x00, 0xc8, 0xbd, 0x15, 0x1d, 0x0c, 0xe7, 0xa6,
	0x5f, 0x73, 0x5c, 0xfb, 0x1e, 0x3a, 0xfe, 0xcc, 0xb0, 0xfa, 0xf8, 0xa0, 0xc6, 0xe2, 0x73, 0x0d,
	0x8d, 0xba, 0x81, 0x07, 0x25, 0x87, 0x45, 0x47, 0x39, 0x6d, 0x91, 0xf5, 0xda, 0x5b, 0x95, 0x6b,
	0xe1, 0xe7, 0x86, 0xf4, 0x04, 0x1f, 0xd5, 0x48, 0x5e, 0x31, 0x5f, 0xc3, 0xc6, 0x00, 0xb9, 0xc5,
	0x16, 0xef, 0x55, 0x33, 0xde, 0x02, 0x26, 0x71, 0xbb, 0x25, 0x17, 0x62, 0xf3, 0x64, 0xcd, 0xb8,
	0x86, 0x5e, 0xd1, 0x95, 0xd1, 0xa3, 0x9c, 0xb2, 0xc0, 0xad, 0xeb, 0x9c, 0xfb, 0xdf, 0x41, 0x50,
	0x48, 0x4f, 0x48, 0x0f, 0x4a, 0x8e, 0x5d, 0x2c, 0xdd, 0x22, 0x2b, 0xb7, 0x7b, 0x19, 0xeb, 0x4c,
	0x7e, 0xbc, 0x59, 0x52, 0xb7, 0xb8, 0x98, 0xac, 0x49, 0x97, 0xd0, 0x7d, 0x57, 0xe0, 0x54, 0xcf,
	0x5c, 0x11, 0x5e, 0xf2, 0xcc, 0xca, 0xb2, 0x63, 0xd8, 0x32, 0x4e, 0x9f, 0x5b, 0x01, 0xda, 0xcd,
	0xaf, 0x90, 0xff, 0x13, 0xc8, 0xf5, 0xbf, 0x23, 0xf2, 0x1a, 0x7f, 0x6e, 0xf4, 0x9f, 0xe2, 0x7e,
	0x4d, 0x5f, 0x96, 0xd5, 0x34, 0x23, 0x86, 0xad, 0x8a, 0x4f, 0xdd, 0xc3, 0x78, 0x5c, 0x58, 0x5d,
	0x64, 0x6c, 0xcb, 0xb0, 0xe5, 0x78, 0x8d, 0xbd, 0x80, 0x35, 0xad, 0x82, 0xf6, 0xca, 0xaa, 0x59,
	0x27, 0x76, 0xca, 0xcb, 0x89, 0xaf, 0xf5, 0x0d, 0xc0, 0xc6, 0x7b, 0x0b, 0x01, 0x5a, 0xf5, 0x67,
	0xe8, 0xcc, 0xad, 0x0a, 0xd9, 0xb9, 0x46, 0xd5, 0xbf, 0xea, 0xaf, 0xea, 0xa9, 0xd1, 0x7e, 0x8c,
	0xed, 0x9a, 0x36, 0xcd, 0x72, 0x35, 0x40, 0xc2, 0xbe, 0x3e, 0xcf, 0x29, 0xf3, 0x56, 0x6b, 0x4c,
	0x8d, 0x73, 0x62, 0x38, 0xc7, 0xf8, 0xd9, 0xc2, 0x3b, 0xd4, 0x75, 0x5f, 0x35, 0x5e, 0xbc, 0x86,
	0x9f, 0xe6, 0xbf, 0x22, 0xc7, 0x1b, 0xc6, 0x46, 0xbe, 0xfc, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x72,
	0xff, 0x91, 0xe1, 0x74, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountManagerClient is the client API for AccountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountManagerClient interface {
	// ListAccounts will return a list of addresses for accounts this node manages.
	ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.Accounts, error)
	// ListWallets will return a list of wallets this node manages.
	ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.Accounts, error)
	// OpenWallet initiates a hardware wallet opening procedure, establishing a USB
	// connection and attempting to authenticate via the provided passphrase. Note,
	// the method may return an extra challenge requiring a second open (e.g. the
	// Trezor PIN matrix challenge).
	OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// DeriveAccount requests a HD wallet to derive a new account, optionally pinning
	// it for later reuse.
	DeriveAccount(ctx context.Context, in *DeriveAccountRequest, opts ...grpc.CallOption) (*common.Account, error)
	// NewAccount will create a new account and returns the address for the new account.
	NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*common.Address, error)
	// ImportRawKey stores the given hex encoded ECDSA key into the key directory,
	// encrypting it with the passphrase.
	ImportRawKey(ctx context.Context, in *ImportRawKeyRequest, opts ...grpc.CallOption) (*common.Address, error)
	// UnlockAccount will unlock the account associated with the given address with
	// the given password for duration seconds. If duration is nil it will use a
	// default of 300 seconds. It returns an indication if the account was unlocked.
	UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*common.IsOk, error)
	// LockAccount will lock the account associated with the given address when it's unlocked.
	LockAccount(ctx context.Context, in *common.Address, opts ...grpc.CallOption) (*common.IsOk, error)
	// SendTransaction creates a transaction for the given argument, sign it and submit it to the
	// transaction pool.
	SendTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*common.Hash, error)
	SignTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*SignTransactionResult, error)
	Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*Signature, error)
	EcRecover(ctx context.Context, in *EcRecoverRequest, opts ...grpc.CallOption) (*common.Address, error)
	SignAndSendTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*common.Address, error)
}

type accountManagerClient struct {
	cc *grpc.ClientConn
}

func NewAccountManagerClient(cc *grpc.ClientConn) AccountManagerClient {
	return &accountManagerClient{cc}
}

func (c *accountManagerClient) ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.Accounts, error) {
	out := new(common.Accounts)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ListWallets(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*common.Accounts, error) {
	out := new(common.Accounts)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/ListWallets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) OpenWallet(ctx context.Context, in *OpenWalletRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/OpenWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) DeriveAccount(ctx context.Context, in *DeriveAccountRequest, opts ...grpc.CallOption) (*common.Account, error) {
	out := new(common.Account)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/DeriveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) NewAccount(ctx context.Context, in *NewAccountRequest, opts ...grpc.CallOption) (*common.Address, error) {
	out := new(common.Address)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ImportRawKey(ctx context.Context, in *ImportRawKeyRequest, opts ...grpc.CallOption) (*common.Address, error) {
	out := new(common.Address)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/ImportRawKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) UnlockAccount(ctx context.Context, in *UnlockAccountRequest, opts ...grpc.CallOption) (*common.IsOk, error) {
	out := new(common.IsOk)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/UnlockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) LockAccount(ctx context.Context, in *common.Address, opts ...grpc.CallOption) (*common.IsOk, error) {
	out := new(common.IsOk)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) SendTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*common.Hash, error) {
	out := new(common.Hash)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) SignTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*SignTransactionResult, error) {
	out := new(SignTransactionResult)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/SignTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) Sign(ctx context.Context, in *SignRequest, opts ...grpc.CallOption) (*Signature, error) {
	out := new(Signature)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/Sign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) EcRecover(ctx context.Context, in *EcRecoverRequest, opts ...grpc.CallOption) (*common.Address, error) {
	out := new(common.Address)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/EcRecover", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) SignAndSendTransaction(ctx context.Context, in *SendTxArgs, opts ...grpc.CallOption) (*common.Address, error) {
	out := new(common.Address)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/SignAndSendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagerServer is the server API for AccountManager service.
type AccountManagerServer interface {
	// ListAccounts will return a list of addresses for accounts this node manages.
	ListAccounts(context.Context, *empty.Empty) (*common.Accounts, error)
	// ListWallets will return a list of wallets this node manages.
	ListWallets(context.Context, *empty.Empty) (*common.Accounts, error)
	// OpenWallet initiates a hardware wallet opening procedure, establishing a USB
	// connection and attempting to authenticate via the provided passphrase. Note,
	// the method may return an extra challenge requiring a second open (e.g. the
	// Trezor PIN matrix challenge).
	OpenWallet(context.Context, *OpenWalletRequest) (*empty.Empty, error)
	// DeriveAccount requests a HD wallet to derive a new account, optionally pinning
	// it for later reuse.
	DeriveAccount(context.Context, *DeriveAccountRequest) (*common.Account, error)
	// NewAccount will create a new account and returns the address for the new account.
	NewAccount(context.Context, *NewAccountRequest) (*common.Address, error)
	// ImportRawKey stores the given hex encoded ECDSA key into the key directory,
	// encrypting it with the passphrase.
	ImportRawKey(context.Context, *ImportRawKeyRequest) (*common.Address, error)
	// UnlockAccount will unlock the account associated with the given address with
	// the given password for duration seconds. If duration is nil it will use a
	// default of 300 seconds. It returns an indication if the account was unlocked.
	UnlockAccount(context.Context, *UnlockAccountRequest) (*common.IsOk, error)
	// LockAccount will lock the account associated with the given address when it's unlocked.
	LockAccount(context.Context, *common.Address) (*common.IsOk, error)
	// SendTransaction creates a transaction for the given argument, sign it and submit it to the
	// transaction pool.
	SendTransaction(context.Context, *SendTxArgs) (*common.Hash, error)
	SignTransaction(context.Context, *SendTxArgs) (*SignTransactionResult, error)
	Sign(context.Context, *SignRequest) (*Signature, error)
	EcRecover(context.Context, *EcRecoverRequest) (*common.Address, error)
	SignAndSendTransaction(context.Context, *SendTxArgs) (*common.Address, error)
}

func RegisterAccountManagerServer(s *grpc.Server, srv AccountManagerServer) {
	s.RegisterService(&_AccountManager_serviceDesc, srv)
}

func _AccountManager_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListAccounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ListWallets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListWallets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/ListWallets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListWallets(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_OpenWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).OpenWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/OpenWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).OpenWallet(ctx, req.(*OpenWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_DeriveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeriveAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).DeriveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/DeriveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).DeriveAccount(ctx, req.(*DeriveAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).NewAccount(ctx, req.(*NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ImportRawKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRawKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ImportRawKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/ImportRawKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ImportRawKey(ctx, req.(*ImportRawKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_UnlockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).UnlockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/UnlockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).UnlockAccount(ctx, req.(*UnlockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).LockAccount(ctx, req.(*common.Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).SendTransaction(ctx, req.(*SendTxArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_SignTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).SignTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/SignTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).SignTransaction(ctx, req.(*SendTxArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/Sign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).Sign(ctx, req.(*SignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_EcRecover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EcRecoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).EcRecover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/EcRecover",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).EcRecover(ctx, req.(*EcRecoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_SignAndSendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).SignAndSendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/SignAndSendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).SignAndSendTransaction(ctx, req.(*SendTxArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personal.AccountManager",
	HandlerType: (*AccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _AccountManager_ListAccounts_Handler,
		},
		{
			MethodName: "ListWallets",
			Handler:    _AccountManager_ListWallets_Handler,
		},
		{
			MethodName: "OpenWallet",
			Handler:    _AccountManager_OpenWallet_Handler,
		},
		{
			MethodName: "DeriveAccount",
			Handler:    _AccountManager_DeriveAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _AccountManager_NewAccount_Handler,
		},
		{
			MethodName: "ImportRawKey",
			Handler:    _AccountManager_ImportRawKey_Handler,
		},
		{
			MethodName: "UnlockAccount",
			Handler:    _AccountManager_UnlockAccount_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AccountManager_LockAccount_Handler,
		},
		{
			MethodName: "SendTransaction",
			Handler:    _AccountManager_SendTransaction_Handler,
		},
		{
			MethodName: "SignTransaction",
			Handler:    _AccountManager_SignTransaction_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _AccountManager_Sign_Handler,
		},
		{
			MethodName: "EcRecover",
			Handler:    _AccountManager_EcRecover_Handler,
		},
		{
			MethodName: "SignAndSendTransaction",
			Handler:    _AccountManager_SignAndSendTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/personal/personal.proto",
}
