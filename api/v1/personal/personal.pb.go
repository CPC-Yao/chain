// Code generated by protoc-gen-go. DO NOT EDIT.
// source: v1/personal/personal.proto

package personalpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

func init() { proto.RegisterFile("v1/personal/personal.proto", fileDescriptor_251b7bcf7ee513dd) }

var fileDescriptor_251b7bcf7ee513dd = []byte{
	// 170 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2a, 0x33, 0xd4, 0x2f,
	0x48, 0x2d, 0x2a, 0xce, 0xcf, 0x4b, 0xcc, 0x81, 0x33, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85,
	0x38, 0x60, 0x7c, 0x29, 0xe9, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0x7d, 0xb0, 0x78, 0x52, 0x69,
	0x9a, 0x7e, 0x6a, 0x6e, 0x41, 0x49, 0x25, 0x44, 0x99, 0x94, 0x0c, 0x54, 0x32, 0xb1, 0x20, 0x53,
	0x3f, 0x31, 0x2f, 0x2f, 0xbf, 0x24, 0xb1, 0x24, 0x33, 0x3f, 0xaf, 0x18, 0x22, 0x6b, 0x54, 0xc5,
	0xc5, 0xe7, 0x98, 0x9c, 0x9c, 0x5f, 0x9a, 0x57, 0xe2, 0x9b, 0x98, 0x97, 0x98, 0x9e, 0x5a, 0x24,
	0x94, 0xc1, 0xc5, 0xe3, 0x93, 0x59, 0x5c, 0x02, 0x15, 0x2d, 0x16, 0x12, 0xd3, 0x83, 0x18, 0xa0,
	0x07, 0x33, 0x5d, 0xcf, 0x15, 0x64, 0xba, 0x14, 0x0e, 0x71, 0x25, 0x8d, 0xa6, 0xcb, 0x4f, 0x26,
	0x33, 0x29, 0x29, 0xc9, 0x82, 0x6d, 0x44, 0x76, 0x7f, 0x0e, 0x92, 0xb1, 0x56, 0x8c, 0x5a, 0x4e,
	0x3c, 0x51, 0x5c, 0x30, 0xb9, 0x82, 0xa4, 0x24, 0x36, 0xb0, 0x39, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x20, 0x6a, 0xdf, 0xb9, 0xf3, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountManagerClient is the client API for AccountManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountManagerClient interface {
	ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type accountManagerClient struct {
	cc *grpc.ClientConn
}

func NewAccountManagerClient(cc *grpc.ClientConn) AccountManagerClient {
	return &accountManagerClient{cc}
}

func (c *accountManagerClient) ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/personal.AccountManager/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountManagerServer is the server API for AccountManager service.
type AccountManagerServer interface {
	ListAccounts(context.Context, *empty.Empty) (*empty.Empty, error)
}

func RegisterAccountManagerServer(s *grpc.Server, srv AccountManagerServer) {
	s.RegisterService(&_AccountManager_serviceDesc, srv)
}

func _AccountManager_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/personal.AccountManager/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListAccounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "personal.AccountManager",
	HandlerType: (*AccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAccounts",
			Handler:    _AccountManager_ListAccounts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/personal/personal.proto",
}
