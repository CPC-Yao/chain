// Code generated by protoc-gen-go. DO NOT EDIT.
// source: admin.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type File struct {
	File                 string   `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a7fc70dcc2027c, []int{0}
}

func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (m *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(m, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetFile() string {
	if m != nil {
		return m.File
	}
	return ""
}

func init() {
	proto.RegisterType((*File)(nil), "protos.File")
}

func init() { proto.RegisterFile("admin.proto", fileDescriptor_73a7fc70dcc2027c) }

var fileDescriptor_73a7fc70dcc2027c = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4c, 0xc9, 0xcd,
	0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x03, 0x53, 0xc5, 0x52, 0x3c, 0xc9, 0xf9,
	0xb9, 0xb9, 0xf9, 0x50, 0x51, 0x29, 0x99, 0xf4, 0xfc, 0xfc, 0xf4, 0x9c, 0x54, 0xfd, 0xc4, 0x82,
	0x4c, 0xfd, 0xc4, 0xbc, 0xbc, 0xfc, 0x92, 0xc4, 0x92, 0xcc, 0xfc, 0xbc, 0x62, 0x88, 0xac, 0x92,
	0x14, 0x17, 0x8b, 0x5b, 0x66, 0x4e, 0xaa, 0x90, 0x10, 0x17, 0x4b, 0x5a, 0x66, 0x4e, 0xaa, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x98, 0x6d, 0xb4, 0x81, 0x91, 0x8b, 0xc7, 0x39, 0x23, 0x31,
	0x33, 0xcf, 0x37, 0x31, 0x2f, 0x31, 0x3d, 0xb5, 0x48, 0xc8, 0x9f, 0x8b, 0xdb, 0xb5, 0xa2, 0x20,
	0xbf, 0xa8, 0x04, 0x2c, 0x2a, 0xc4, 0x03, 0x31, 0xa3, 0x58, 0x0f, 0x64, 0x82, 0x14, 0x9c, 0xe7,
	0x59, 0xec, 0x9f, 0xad, 0xa4, 0xd2, 0x74, 0xf9, 0xc9, 0x64, 0x26, 0x39, 0x25, 0x49, 0xb0, 0xbd,
	0x65, 0x86, 0xfa, 0x60, 0x87, 0xea, 0xa7, 0x22, 0xb4, 0x5b, 0x31, 0x6a, 0x81, 0x0c, 0xf4, 0xcc,
	0xa5, 0xc8, 0xc0, 0xcc, 0x5c, 0x64, 0x03, 0x9d, 0x74, 0xb8, 0x94, 0xf2, 0x8b, 0xd2, 0xf5, 0x92,
	0x32, 0x4b, 0x92, 0x4a, 0x93, 0xb3, 0x53, 0x4b, 0xf4, 0x92, 0x0b, 0x92, 0x41, 0x72, 0x7a, 0x10,
	0x12, 0x62, 0x60, 0x14, 0x34, 0xa0, 0x92, 0x20, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xde,
	0x34, 0x89, 0x18, 0x46, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainManagerClient is the client API for ChainManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainManagerClient interface {
	// ChainManager is the collection of Ethereum full node-related APIs
	// exposed over the private admin endpoint.
	ExportChain(ctx context.Context, in *File, opts ...grpc.CallOption) (*IsOk, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(ctx context.Context, in *File, opts ...grpc.CallOption) (*IsOk, error)
}

type chainManagerClient struct {
	cc *grpc.ClientConn
}

func NewChainManagerClient(cc *grpc.ClientConn) ChainManagerClient {
	return &chainManagerClient{cc}
}

func (c *chainManagerClient) ExportChain(ctx context.Context, in *File, opts ...grpc.CallOption) (*IsOk, error) {
	out := new(IsOk)
	err := c.cc.Invoke(ctx, "/protos.ChainManager/ExportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainManagerClient) ImportChain(ctx context.Context, in *File, opts ...grpc.CallOption) (*IsOk, error) {
	out := new(IsOk)
	err := c.cc.Invoke(ctx, "/protos.ChainManager/ImportChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainManagerServer is the server API for ChainManager service.
type ChainManagerServer interface {
	// ChainManager is the collection of Ethereum full node-related APIs
	// exposed over the private admin endpoint.
	ExportChain(context.Context, *File) (*IsOk, error)
	// ImportChain imports a blockchain from a local file.
	ImportChain(context.Context, *File) (*IsOk, error)
}

func RegisterChainManagerServer(s *grpc.Server, srv ChainManagerServer) {
	s.RegisterService(&_ChainManager_serviceDesc, srv)
}

func _ChainManager_ExportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManagerServer).ExportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainManager/ExportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManagerServer).ExportChain(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainManager_ImportChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainManagerServer).ImportChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainManager/ImportChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainManagerServer).ImportChain(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ChainManager",
	HandlerType: (*ChainManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExportChain",
			Handler:    _ChainManager_ExportChain_Handler,
		},
		{
			MethodName: "ImportChain",
			Handler:    _ChainManager_ImportChain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin.proto",
}
