syntax = "proto3";

option java_package = "org.bitbucket.cpchain.chain.protos";
option go_package = "minerpb";

package minerpb;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/protobuf/wrappers.proto";

message PublicMinerAPIRequest {
    google.protobuf.BytesValue block_nonce = 1;
    google.protobuf.BytesValue solution = 2;
    google.protobuf.BytesValue digest = 3;
    uint64 hashrate = 4;
    bytes id = 5;
}

message PublicMinerAPIReply {
    google.protobuf.BoolValue mining = 1;
    bool is_accepting= 2;
    repeated string works = 3;
}
// PublicMinerAPI provides an API to control the miner.
// It offers only methods that operate on data that pose no security risk when it is publicly accessible.
service PublicMinerAPI{
    // Mining returns an indication if this node is currently mining.
    rpc Mining(google.protobuf.Empty) returns (PublicMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/eth/mining"
            body: "*"
          };
    }
    // SubmitWork can be used by external miner to submit their POW solution. It returns an indication if the work was
    // accepted. Note, this is not an indication if the provided work was valid!
    rpc SubmitWork(PublicMinerAPIRequest) returns (PublicMinerAPIReply){
        option (google.api.http) = {
            post: "/apis/v1/eth/submitWork"
            body: "*"
          };
    }
    // GetWork returns a work package for external miner. The work package consists of 3 strings
    // result[0], 32 bytes hex encoded current block header pow-hash
    // result[1], 32 bytes hex encoded seed hash used for DAG
    // result[2], 32 bytes hex encoded boundary condition ("target"), 2^256/difficulty
    rpc GetWork(google.protobuf.Empty) returns (PublicMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/eth/getWork"
            body: "*"
          };
    }
    // SubmitHashrate can be used for remote miners to submit their hash rate. This enables the node to report the combined
    // hash rate of all miners which submit work through this node. It accepts the miner hash rate and an identifier which
    // must be unique between nodes.
    rpc SubmitHashrate(PublicMinerAPIRequest) returns (PublicMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/eth/submitHashrate"
            body: "*"
          };
    }
}

message PrivateMinerAPIRequest {
    google.protobuf.Int32Value threads = 1;
    string extra = 2;
    bytes gas_price = 3;
    bytes etherbase = 4;
}

message PrivateMinerAPIReply{
    bool is_ok = 1;
    uint64 hashrate = 2;
}
// PrivateMinerAPI provides private RPC methods to control the miner.
// These methods can be abused by external users and must be considered insecure for use by untrusted users.
service PrivateMinerAPI {
    // Start the miner with the given number of threads. If threads is nil the number
    // of workers started is equal to the number of logical CPUs that are usable by
    // this process. If mining is already running, this method adjust the number of
    // threads allowed to use.
    rpc Start(PrivateMinerAPIRequest) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/start"
            body: "*"
          };
    }
    // Stop the miner
    rpc Stop(google.protobuf.Empty) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/stop"
            body: "*"
          };
    }
    // SetExtra sets the extra data string that is included when this miner mines a block.
    rpc SetExtra(PrivateMinerAPIRequest) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/setExtra"
            body: "*"
          };
    }
    // SetGasPrice sets the minimum accepted gas price for the miner.
    rpc SetGasPrice(PrivateMinerAPIRequest) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/setGasPrice"
            body: "*"
          };
    }
    // SetEtherbase sets the etherbase of the miner
    rpc SetEtherbase(PrivateMinerAPIRequest) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/setEtherbase"
            body: "*"
          };
    }
    // GetHashrate returns the current hashrate of the miner.
    rpc GetHashrate(google.protobuf.Empty) returns (PrivateMinerAPIReply) {
        option (google.api.http) = {
            post: "/apis/v1/miner/setHashrate"
            body: "*"
          };
    }
}


