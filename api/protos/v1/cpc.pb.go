// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cpc.proto

package protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ChainReaderRequest struct {
	Address              string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	BlockHash            string   `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	BlockNumber          int64    `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	IsFull               bool     `protobuf:"varint,4,opt,name=is_full,json=isFull,proto3" json:"is_full,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainReaderRequest) Reset()         { *m = ChainReaderRequest{} }
func (m *ChainReaderRequest) String() string { return proto.CompactTextString(m) }
func (*ChainReaderRequest) ProtoMessage()    {}
func (*ChainReaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{0}
}

func (m *ChainReaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChainReaderRequest.Unmarshal(m, b)
}
func (m *ChainReaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChainReaderRequest.Marshal(b, m, deterministic)
}
func (m *ChainReaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainReaderRequest.Merge(m, src)
}
func (m *ChainReaderRequest) XXX_Size() int {
	return xxx_messageInfo_ChainReaderRequest.Size(m)
}
func (m *ChainReaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainReaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChainReaderRequest proto.InternalMessageInfo

func (m *ChainReaderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ChainReaderRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *ChainReaderRequest) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *ChainReaderRequest) GetIsFull() bool {
	if m != nil {
		return m.IsFull
	}
	return false
}

type TransactionCount struct {
	TransactionCount     uint64   `protobuf:"varint,1,opt,name=transaction_count,json=transactionCount,proto3" json:"transaction_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionCount) Reset()         { *m = TransactionCount{} }
func (m *TransactionCount) String() string { return proto.CompactTextString(m) }
func (*TransactionCount) ProtoMessage()    {}
func (*TransactionCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{1}
}

func (m *TransactionCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionCount.Unmarshal(m, b)
}
func (m *TransactionCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionCount.Marshal(b, m, deterministic)
}
func (m *TransactionCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionCount.Merge(m, src)
}
func (m *TransactionCount) XXX_Size() int {
	return xxx_messageInfo_TransactionCount.Size(m)
}
func (m *TransactionCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionCount.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionCount proto.InternalMessageInfo

func (m *TransactionCount) GetTransactionCount() uint64 {
	if m != nil {
		return m.TransactionCount
	}
	return 0
}

type TransactionPoolReaderRequest struct {
	BlockNumber          uint64   `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	BlockHash            string   `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Address              string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionPoolReaderRequest) Reset()         { *m = TransactionPoolReaderRequest{} }
func (m *TransactionPoolReaderRequest) String() string { return proto.CompactTextString(m) }
func (*TransactionPoolReaderRequest) ProtoMessage()    {}
func (*TransactionPoolReaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{2}
}

func (m *TransactionPoolReaderRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionPoolReaderRequest.Unmarshal(m, b)
}
func (m *TransactionPoolReaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionPoolReaderRequest.Marshal(b, m, deterministic)
}
func (m *TransactionPoolReaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionPoolReaderRequest.Merge(m, src)
}
func (m *TransactionPoolReaderRequest) XXX_Size() int {
	return xxx_messageInfo_TransactionPoolReaderRequest.Size(m)
}
func (m *TransactionPoolReaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionPoolReaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionPoolReaderRequest proto.InternalMessageInfo

func (m *TransactionPoolReaderRequest) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *TransactionPoolReaderRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TransactionPoolReaderRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *TransactionPoolReaderRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type RawTransaction struct {
	RawTransaction       []byte   `protobuf:"bytes,1,opt,name=raw_transaction,json=rawTransaction,proto3" json:"raw_transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RawTransaction) Reset()         { *m = RawTransaction{} }
func (m *RawTransaction) String() string { return proto.CompactTextString(m) }
func (*RawTransaction) ProtoMessage()    {}
func (*RawTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{3}
}

func (m *RawTransaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RawTransaction.Unmarshal(m, b)
}
func (m *RawTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RawTransaction.Marshal(b, m, deterministic)
}
func (m *RawTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RawTransaction.Merge(m, src)
}
func (m *RawTransaction) XXX_Size() int {
	return xxx_messageInfo_RawTransaction.Size(m)
}
func (m *RawTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_RawTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_RawTransaction proto.InternalMessageInfo

func (m *RawTransaction) GetRawTransaction() []byte {
	if m != nil {
		return m.RawTransaction
	}
	return nil
}

type TransactionHash struct {
	TransactionHash      string   `protobuf:"bytes,1,opt,name=transaction_hash,json=transactionHash,proto3" json:"transaction_hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TransactionHash) Reset()         { *m = TransactionHash{} }
func (m *TransactionHash) String() string { return proto.CompactTextString(m) }
func (*TransactionHash) ProtoMessage()    {}
func (*TransactionHash) Descriptor() ([]byte, []int) {
	return fileDescriptor_423c627df4983bea, []int{4}
}

func (m *TransactionHash) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionHash.Unmarshal(m, b)
}
func (m *TransactionHash) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionHash.Marshal(b, m, deterministic)
}
func (m *TransactionHash) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionHash.Merge(m, src)
}
func (m *TransactionHash) XXX_Size() int {
	return xxx_messageInfo_TransactionHash.Size(m)
}
func (m *TransactionHash) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionHash.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionHash proto.InternalMessageInfo

func (m *TransactionHash) GetTransactionHash() string {
	if m != nil {
		return m.TransactionHash
	}
	return ""
}

func init() {
	proto.RegisterType((*ChainReaderRequest)(nil), "protos.ChainReaderRequest")
	proto.RegisterType((*TransactionCount)(nil), "protos.TransactionCount")
	proto.RegisterType((*TransactionPoolReaderRequest)(nil), "protos.TransactionPoolReaderRequest")
	proto.RegisterType((*RawTransaction)(nil), "protos.RawTransaction")
	proto.RegisterType((*TransactionHash)(nil), "protos.TransactionHash")
}

func init() { proto.RegisterFile("cpc.proto", fileDescriptor_423c627df4983bea) }

var fileDescriptor_423c627df4983bea = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xb5, 0x4d, 0x9e, 0xbe, 0xcc, 0xd3, 0x26, 0xc5, 0x7d, 0x0b, 0x69, 0x69, 0x93, 0xa5,
	0x6f, 0xa4, 0xc5, 0x51, 0x03, 0xa8, 0x10, 0x81, 0x50, 0x53, 0x41, 0xe9, 0x05, 0x55, 0x16, 0x27,
	0x84, 0x14, 0xad, 0x9d, 0x6d, 0x62, 0xd5, 0xb1, 0x5d, 0x7b, 0x4d, 0xe9, 0x11, 0x0e, 0x48, 0x70,
	0x42, 0xe2, 0x00, 0x07, 0x4e, 0x7c, 0x25, 0xbe, 0x02, 0x1f, 0x82, 0x23, 0xda, 0xdd, 0x98, 0xd8,
	0xae, 0xd3, 0x17, 0xa9, 0x97, 0x5a, 0x3b, 0xb3, 0x9d, 0xff, 0x6f, 0xfe, 0x9e, 0xb1, 0x02, 0x63,
	0x86, 0x6b, 0xa8, 0xae, 0xe7, 0x30, 0x47, 0x19, 0x16, 0x0f, 0xbf, 0x38, 0x6e, 0x38, 0xdd, 0xae,
	0x63, 0xcb, 0x68, 0x71, 0xbe, 0xed, 0x38, 0x6d, 0x8b, 0x56, 0xc5, 0x49, 0x0f, 0x0e, 0xab, 0xb4,
	0xeb, 0xb2, 0xd3, 0x5e, 0x72, 0xa1, 0x97, 0x24, 0xae, 0x59, 0x25, 0xb6, 0xed, 0x30, 0xc2, 0x4c,
	0xc7, 0xf6, 0x65, 0x16, 0x7f, 0x42, 0xa0, 0xec, 0x76, 0x88, 0x69, 0x6b, 0x94, 0xb4, 0xa8, 0xa7,
	0xd1, 0xe3, 0x80, 0xfa, 0x4c, 0x29, 0xc0, 0x08, 0x69, 0xb5, 0x3c, 0xea, 0xfb, 0x05, 0x54, 0x42,
	0xeb, 0x63, 0x5a, 0x78, 0x54, 0x6e, 0x01, 0xe8, 0x96, 0x63, 0x1c, 0x35, 0x3b, 0xc4, 0xef, 0x14,
	0x86, 0x44, 0x72, 0x4c, 0x44, 0x5e, 0x10, 0xbf, 0xa3, 0x94, 0x61, 0x5c, 0xa6, 0xed, 0xa0, 0xab,
	0x53, 0xaf, 0x90, 0x29, 0xa1, 0xf5, 0x8c, 0xf6, 0xbf, 0x88, 0xbd, 0x14, 0x21, 0x65, 0x0e, 0x46,
	0x4c, 0xbf, 0x79, 0x18, 0x58, 0x56, 0x21, 0x5b, 0x42, 0xeb, 0xa3, 0xda, 0xb0, 0xe9, 0x3f, 0x0f,
	0x2c, 0x0b, 0x3f, 0x85, 0xc9, 0x57, 0x1e, 0xb1, 0x7d, 0x62, 0x70, 0xc2, 0x5d, 0x27, 0xb0, 0x99,
	0xb2, 0x01, 0x37, 0x58, 0x3f, 0xd6, 0x34, 0x78, 0x50, 0x20, 0x65, 0xb5, 0x49, 0x96, 0xb8, 0x8c,
	0xbf, 0x20, 0x58, 0x88, 0x54, 0x38, 0x70, 0x1c, 0x2b, 0xde, 0x56, 0x92, 0x4e, 0x16, 0x8a, 0xd1,
	0x4d, 0xc3, 0x7f, 0xa6, 0xdd, 0xa2, 0xef, 0x44, 0x6b, 0x59, 0x4d, 0x1e, 0x12, 0x5d, 0x67, 0x92,
	0x5d, 0x47, 0xec, 0xca, 0xc6, 0xec, 0xc2, 0x8f, 0x20, 0xa7, 0x91, 0x93, 0x08, 0x94, 0xb2, 0x06,
	0x79, 0x8f, 0x9c, 0x34, 0x23, 0xf0, 0x02, 0x63, 0x5c, 0xcb, 0x79, 0xb1, 0x8b, 0xf8, 0x31, 0xe4,
	0x23, 0x47, 0xa1, 0x73, 0x07, 0xa2, 0x4d, 0x4b, 0x18, 0xf9, 0x7e, 0xf2, 0x2c, 0x7e, 0xb5, 0xf6,
	0x2d, 0x03, 0xb9, 0xc8, 0x8b, 0xdd, 0x39, 0xd8, 0x57, 0x74, 0x98, 0xd8, 0xa3, 0xac, 0xc1, 0xa9,
	0xa5, 0xb9, 0xb3, 0xaa, 0x9c, 0x0d, 0x35, 0x1c, 0x1c, 0xf5, 0x19, 0x1f, 0x9c, 0xe2, 0x94, 0x0c,
	0xf8, 0x6a, 0xa3, 0x6f, 0x0c, 0x5e, 0xfe, 0xf0, 0xeb, 0xf7, 0xd7, 0xa1, 0x45, 0x7c, 0x53, 0x4c,
	0xd2, 0xdb, 0xad, 0xaa, 0xe1, 0x1a, 0xd5, 0x76, 0xb4, 0x5e, 0x1d, 0x55, 0x94, 0x37, 0x00, 0x5c,
	0x83, 0x58, 0xc4, 0x36, 0xa8, 0x52, 0x0c, 0x0b, 0x9d, 0x1d, 0xb1, 0x62, 0xfe, 0x9f, 0x88, 0xbc,
	0x8c, 0xcb, 0x42, 0x60, 0x1e, 0xcf, 0x26, 0x05, 0x64, 0x9e, 0x57, 0x6f, 0xc2, 0x64, 0xd8, 0x41,
	0xe3, 0xb4, 0xf7, 0xc2, 0xd2, 0x60, 0x8b, 0x13, 0xb1, 0x20, 0x5e, 0x13, 0xa5, 0xcb, 0x78, 0x21,
	0x8d, 0x3d, 0xac, 0xc4, 0x05, 0x74, 0xc8, 0xf5, 0x05, 0x84, 0xe5, 0xe7, 0xb5, 0x90, 0x50, 0x59,
	0x11, 0x2a, 0x4b, 0xb8, 0x98, 0xae, 0xc2, 0xcb, 0xd5, 0x51, 0xa5, 0xf6, 0x67, 0x14, 0x66, 0x52,
	0xa7, 0x54, 0xf9, 0x8c, 0xa0, 0xb4, 0x47, 0x59, 0x72, 0x09, 0x1a, 0xa7, 0x91, 0xd6, 0xd2, 0xfb,
	0x2d, 0x84, 0xc1, 0xe4, 0xff, 0xe2, 0x6d, 0x01, 0xb5, 0x85, 0x37, 0x13, 0x50, 0xe7, 0x8a, 0x70,
	0x2b, 0x3e, 0x22, 0x58, 0x1c, 0x0c, 0x23, 0xbc, 0xb9, 0x22, 0xca, 0x03, 0x81, 0x52, 0xc5, 0x95,
	0xcb, 0xa1, 0xf4, 0xfc, 0x52, 0x7e, 0x20, 0xb8, 0x1d, 0x07, 0x89, 0xb1, 0xee, 0xd8, 0xad, 0x7d,
	0xb1, 0xa3, 0xcb, 0x29, 0xc2, 0x67, 0x3e, 0x01, 0xfd, 0xd9, 0x8e, 0xae, 0x5a, 0x5d, 0x90, 0xdd,
	0xc7, 0xd5, 0xc1, 0x64, 0xa9, 0x9a, 0x1c, 0xef, 0x3b, 0x82, 0x72, 0x2a, 0x1e, 0xe7, 0xbf, 0x0e,
	0xb8, 0x87, 0x02, 0xae, 0x86, 0xef, 0x5e, 0x08, 0x17, 0x55, 0xe4, 0x68, 0x3f, 0x11, 0xac, 0xee,
	0x51, 0x16, 0xff, 0x00, 0x5d, 0xbb, 0x79, 0x4f, 0x04, 0xdf, 0x36, 0xae, 0x25, 0xf8, 0x2e, 0x21,
	0xcb, 0x21, 0x8f, 0x61, 0x3a, 0x69, 0x9f, 0x18, 0xae, 0xb9, 0x14, 0x2d, 0x9e, 0x48, 0x87, 0xd8,
	0x10, 0x10, 0x2b, 0xb8, 0x74, 0x9e, 0x49, 0xe1, 0x44, 0xf9, 0x30, 0x13, 0x97, 0xd4, 0xa8, 0x41,
	0x4d, 0x97, 0x5d, 0x51, 0x73, 0x53, 0x68, 0xae, 0xe2, 0xf2, 0x60, 0xcd, 0x5e, 0x61, 0x2e, 0xfa,
	0x1e, 0xc1, 0x54, 0xca, 0x3e, 0x5d, 0xd2, 0xf9, 0xc1, 0x5b, 0x55, 0x11, 0x14, 0xcb, 0x78, 0xe9,
	0x82, 0xad, 0xaa, 0xa3, 0x4a, 0x63, 0x13, 0xb0, 0xe3, 0xb5, 0x55, 0xdd, 0x64, 0x7a, 0x60, 0x1c,
	0x51, 0xa6, 0x1a, 0xae, 0xc1, 0x3f, 0x6b, 0xaa, 0xfc, 0x2b, 0x25, 0x5e, 0xf7, 0x7e, 0x64, 0xe8,
	0xf2, 0x79, 0xef, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x30, 0xc6, 0x9c, 0x7a, 0x80, 0x08, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChainReaderAPIClient is the client API for ChainReaderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChainReaderAPIClient interface {
	// GetBlockCount returns the block number of the chain head.
	GetBlockCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlockNumber, error)
	// GetBalance returns the amount of wei for the given address in the state of the
	// given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
	// block numbers are also allowed.
	GetBalance(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*Balance, error)
	// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
	// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
	GetBlockByNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error)
	// GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
	// detail, otherwise only the transaction hash is returned.
	GetBlockByHash(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*Block, error)
}

type chainReaderAPIClient struct {
	cc *grpc.ClientConn
}

func NewChainReaderAPIClient(cc *grpc.ClientConn) ChainReaderAPIClient {
	return &chainReaderAPIClient{cc}
}

func (c *chainReaderAPIClient) GetBlockCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*BlockNumber, error) {
	out := new(BlockNumber)
	err := c.cc.Invoke(ctx, "/protos.ChainReaderAPI/GetBlockCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderAPIClient) GetBalance(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*Balance, error) {
	out := new(Balance)
	err := c.cc.Invoke(ctx, "/protos.ChainReaderAPI/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderAPIClient) GetBlockByNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/protos.ChainReaderAPI/GetBlockByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainReaderAPIClient) GetBlockByHash(ctx context.Context, in *ChainReaderRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/protos.ChainReaderAPI/GetBlockByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainReaderAPIServer is the server API for ChainReaderAPI service.
type ChainReaderAPIServer interface {
	// GetBlockCount returns the block number of the chain head.
	GetBlockCount(context.Context, *empty.Empty) (*BlockNumber, error)
	// GetBalance returns the amount of wei for the given address in the state of the
	// given block number. The rpc.LatestBlockNumber and rpc.PendingBlockNumber meta
	// block numbers are also allowed.
	GetBalance(context.Context, *ChainReaderRequest) (*Balance, error)
	// GetBlockByNumber returns the requested block. When blockNr is -1 the chain head is returned. When fullTx is true all
	// transactions in the block are returned in full detail, otherwise only the transaction hash is returned.
	GetBlockByNumber(context.Context, *BlockNumber) (*Block, error)
	// GetBlockByHash returns the requested block. When fullTx is true all transactions in the block are returned in full
	// detail, otherwise only the transaction hash is returned.
	GetBlockByHash(context.Context, *ChainReaderRequest) (*Block, error)
}

func RegisterChainReaderAPIServer(s *grpc.Server, srv ChainReaderAPIServer) {
	s.RegisterService(&_ChainReaderAPI_serviceDesc, srv)
}

func _ChainReaderAPI_GetBlockCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderAPIServer).GetBlockCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainReaderAPI/GetBlockCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderAPIServer).GetBlockCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReaderAPI_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderAPIServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainReaderAPI/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderAPIServer).GetBalance(ctx, req.(*ChainReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReaderAPI_GetBlockByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderAPIServer).GetBlockByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainReaderAPI/GetBlockByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderAPIServer).GetBlockByNumber(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainReaderAPI_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChainReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainReaderAPIServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.ChainReaderAPI/GetBlockByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainReaderAPIServer).GetBlockByHash(ctx, req.(*ChainReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChainReaderAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ChainReaderAPI",
	HandlerType: (*ChainReaderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBlockCount",
			Handler:    _ChainReaderAPI_GetBlockCount_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _ChainReaderAPI_GetBalance_Handler,
		},
		{
			MethodName: "GetBlockByNumber",
			Handler:    _ChainReaderAPI_GetBlockByNumber_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _ChainReaderAPI_GetBlockByHash_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}

// TransactionPoolReaderClient is the client API for TransactionPoolReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionPoolReaderClient interface {
	GetTransactionCountByBlockNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error)
	GetTransactionCountByBlockHash(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error)
	GetTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionReceipt(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactionCount(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*TransactionCount, error)
}

type transactionPoolReaderClient struct {
	cc *grpc.ClientConn
}

func NewTransactionPoolReaderClient(cc *grpc.ClientConn) TransactionPoolReaderClient {
	return &transactionPoolReaderClient{cc}
}

func (c *transactionPoolReaderClient) GetTransactionCountByBlockNumber(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionCountByBlockNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionCountByBlockHash(ctx context.Context, in *BlockNumber, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionCountByBlockHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByBlockHashAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionByBlockHashAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetRawTransactionByBlockNumberAndIndex(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetRawTransactionByBlockNumberAndIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionByHash(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionReceipt(ctx context.Context, in *TransactionHash, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionReceipt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionPoolReaderClient) GetTransactionCount(ctx context.Context, in *TransactionPoolReaderRequest, opts ...grpc.CallOption) (*TransactionCount, error) {
	out := new(TransactionCount)
	err := c.cc.Invoke(ctx, "/protos.TransactionPoolReader/GetTransactionCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionPoolReaderServer is the server API for TransactionPoolReader service.
type TransactionPoolReaderServer interface {
	GetTransactionCountByBlockNumber(context.Context, *BlockNumber) (*TransactionCount, error)
	GetTransactionCountByBlockHash(context.Context, *BlockNumber) (*TransactionCount, error)
	GetTransactionByBlockNumberAndIndex(context.Context, *TransactionPoolReaderRequest) (*Transaction, error)
	GetTransactionByBlockHashAndIndex(context.Context, *TransactionPoolReaderRequest) (*Transaction, error)
	GetRawTransactionByBlockNumberAndIndex(context.Context, *TransactionPoolReaderRequest) (*Transaction, error)
	GetTransactionByHash(context.Context, *TransactionHash) (*Transaction, error)
	GetTransactionReceipt(context.Context, *TransactionHash) (*Transaction, error)
	GetTransactionCount(context.Context, *TransactionPoolReaderRequest) (*TransactionCount, error)
}

func RegisterTransactionPoolReaderServer(s *grpc.Server, srv TransactionPoolReaderServer) {
	s.RegisterService(&_TransactionPoolReader_serviceDesc, srv)
}

func _TransactionPoolReader_GetTransactionCountByBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionCountByBlockNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockNumber(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionCountByBlockHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionCountByBlockHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCountByBlockHash(ctx, req.(*BlockNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockNumberAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByBlockHashAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockHashAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionByBlockHashAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByBlockHashAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetRawTransactionByBlockNumberAndIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetRawTransactionByBlockNumberAndIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetRawTransactionByBlockNumberAndIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetRawTransactionByBlockNumberAndIndex(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionByHash(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionReceipt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionReceipt(ctx, req.(*TransactionHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionPoolReader_GetTransactionCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionPoolReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionPoolReaderServer).GetTransactionCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.TransactionPoolReader/GetTransactionCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionPoolReaderServer).GetTransactionCount(ctx, req.(*TransactionPoolReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionPoolReader_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.TransactionPoolReader",
	HandlerType: (*TransactionPoolReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionCountByBlockNumber",
			Handler:    _TransactionPoolReader_GetTransactionCountByBlockNumber_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockHash",
			Handler:    _TransactionPoolReader_GetTransactionCountByBlockHash_Handler,
		},
		{
			MethodName: "GetTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPoolReader_GetTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByBlockHashAndIndex",
			Handler:    _TransactionPoolReader_GetTransactionByBlockHashAndIndex_Handler,
		},
		{
			MethodName: "GetRawTransactionByBlockNumberAndIndex",
			Handler:    _TransactionPoolReader_GetRawTransactionByBlockNumberAndIndex_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _TransactionPoolReader_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _TransactionPoolReader_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "GetTransactionCount",
			Handler:    _TransactionPoolReader_GetTransactionCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpc.proto",
}
