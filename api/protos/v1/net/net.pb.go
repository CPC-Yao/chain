// Code generated by protoc-gen-go. DO NOT EDIT.
// source: net.proto

package netpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PublicNetAPIReply struct {
	Listening            bool     `protobuf:"varint,1,opt,name=listening,proto3" json:"listening,omitempty"`
	PeerCount            uint32   `protobuf:"varint,2,opt,name=peer_count,json=peerCount,proto3" json:"peer_count,omitempty"`
	Version              string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PublicNetAPIReply) Reset()         { *m = PublicNetAPIReply{} }
func (m *PublicNetAPIReply) String() string { return proto.CompactTextString(m) }
func (*PublicNetAPIReply) ProtoMessage()    {}
func (*PublicNetAPIReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a5b10ce944527a32, []int{0}
}

func (m *PublicNetAPIReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PublicNetAPIReply.Unmarshal(m, b)
}
func (m *PublicNetAPIReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PublicNetAPIReply.Marshal(b, m, deterministic)
}
func (m *PublicNetAPIReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicNetAPIReply.Merge(m, src)
}
func (m *PublicNetAPIReply) XXX_Size() int {
	return xxx_messageInfo_PublicNetAPIReply.Size(m)
}
func (m *PublicNetAPIReply) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicNetAPIReply.DiscardUnknown(m)
}

var xxx_messageInfo_PublicNetAPIReply proto.InternalMessageInfo

func (m *PublicNetAPIReply) GetListening() bool {
	if m != nil {
		return m.Listening
	}
	return false
}

func (m *PublicNetAPIReply) GetPeerCount() uint32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *PublicNetAPIReply) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func init() {
	proto.RegisterType((*PublicNetAPIReply)(nil), "netpb.PublicNetAPIReply")
}

func init() { proto.RegisterFile("net.proto", fileDescriptor_a5b10ce944527a32) }

var fileDescriptor_a5b10ce944527a32 = []byte{
	// 307 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0xb1, 0x4a, 0xc4, 0x30,
	0x18, 0xc7, 0x49, 0x45, 0xcf, 0x06, 0x1d, 0xec, 0xa0, 0xb5, 0x56, 0x29, 0xc1, 0xa1, 0x9c, 0x90,
	0xa0, 0x6e, 0xb7, 0xa9, 0x38, 0x08, 0x22, 0xa5, 0x83, 0x83, 0xcb, 0xd1, 0x84, 0x58, 0xa3, 0x35,
	0x09, 0x6d, 0x7a, 0x70, 0xab, 0xaf, 0xe0, 0xd3, 0xf8, 0x1c, 0xbe, 0x82, 0x0f, 0x22, 0x49, 0xee,
	0xaa, 0xe8, 0x26, 0x2e, 0x85, 0xef, 0xff, 0x7d, 0xf4, 0xf7, 0xff, 0x95, 0xc2, 0x50, 0x72, 0x83,
	0x75, 0xab, 0x8c, 0x8a, 0x56, 0x25, 0x37, 0x9a, 0x26, 0x7b, 0xb5, 0x52, 0x75, 0xc3, 0x89, 0x0b,
	0x69, 0x7f, 0x4f, 0xf8, 0xb3, 0x36, 0x73, 0x7f, 0x93, 0xa4, 0x8b, 0x65, 0xa5, 0x05, 0xa9, 0xa4,
	0x54, 0xa6, 0x32, 0x42, 0xc9, 0xce, 0x6f, 0xd1, 0x23, 0xdc, 0x2a, 0x7a, 0xda, 0x08, 0x76, 0xc3,
	0xcd, 0x59, 0x71, 0x55, 0x72, 0xdd, 0xcc, 0xa3, 0x14, 0x86, 0x8d, 0xe8, 0x0c, 0x97, 0x42, 0xd6,
	0x31, 0xc8, 0x40, 0xbe, 0x5e, 0x7e, 0x05, 0xd1, 0x3e, 0x84, 0x9a, 0xf3, 0x76, 0xca, 0x54, 0x2f,
	0x4d, 0x1c, 0x64, 0x20, 0xdf, 0x2c, 0x43, 0x9b, 0x5c, 0xd8, 0x20, 0x8a, 0xe1, 0x68, 0xc6, 0xdb,
	0x4e, 0x28, 0x19, 0xaf, 0x64, 0x20, 0x0f, 0xcb, 0xe5, 0x78, 0xf2, 0x16, 0xc0, 0x8d, 0xef, 0xb0,
	0x88, 0xc1, 0xf0, 0x7a, 0x78, 0xed, 0x36, 0xf6, 0x45, 0xf1, 0xd2, 0x02, 0x5f, 0x5a, 0x8b, 0x24,
	0xc6, 0x4e, 0x12, 0xff, 0xaa, 0x89, 0x0e, 0x5f, 0xde, 0x3f, 0x5e, 0x83, 0x03, 0xb4, 0x6b, 0xdd,
	0x3a, 0x32, 0x3b, 0x26, 0xda, 0xdd, 0x90, 0xa1, 0xeb, 0x04, 0x8c, 0x2d, 0xa4, 0x18, 0xca, 0xfd,
	0x23, 0x64, 0x30, 0xb6, 0x90, 0x29, 0x1c, 0xdd, 0x7a, 0xcb, 0x3f, 0x20, 0x90, 0x43, 0xa4, 0x68,
	0xe7, 0x27, 0x62, 0xf1, 0xe1, 0x26, 0x60, 0x7c, 0x7e, 0x04, 0x91, 0x6a, 0x6b, 0x4c, 0x85, 0xa1,
	0x3d, 0x7b, 0xe2, 0x06, 0x33, 0xcd, 0x1e, 0x2a, 0x21, 0xb1, 0x7f, 0x3a, 0x56, 0x77, 0xe7, 0xff,
	0x07, 0xba, 0xe6, 0xc6, 0xd3, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0x55, 0x85, 0x7e, 0x2a,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PublicNetAPIClient is the client API for PublicNetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PublicNetAPIClient interface {
	Listening(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
	PeerCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error)
}

type publicNetAPIClient struct {
	cc *grpc.ClientConn
}

func NewPublicNetAPIClient(cc *grpc.ClientConn) PublicNetAPIClient {
	return &publicNetAPIClient{cc}
}

func (c *publicNetAPIClient) Listening(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/netpb.PublicNetAPI/Listening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicNetAPIClient) PeerCount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/netpb.PublicNetAPI/PeerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicNetAPIClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*PublicNetAPIReply, error) {
	out := new(PublicNetAPIReply)
	err := c.cc.Invoke(ctx, "/netpb.PublicNetAPI/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PublicNetAPIServer is the server API for PublicNetAPI service.
type PublicNetAPIServer interface {
	Listening(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
	PeerCount(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
	Version(context.Context, *empty.Empty) (*PublicNetAPIReply, error)
}

func RegisterPublicNetAPIServer(s *grpc.Server, srv PublicNetAPIServer) {
	s.RegisterService(&_PublicNetAPI_serviceDesc, srv)
}

func _PublicNetAPI_Listening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).Listening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netpb.PublicNetAPI/Listening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).Listening(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicNetAPI_PeerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).PeerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netpb.PublicNetAPI/PeerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).PeerCount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicNetAPI_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicNetAPIServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netpb.PublicNetAPI/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicNetAPIServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _PublicNetAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netpb.PublicNetAPI",
	HandlerType: (*PublicNetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Listening",
			Handler:    _PublicNetAPI_Listening_Handler,
		},
		{
			MethodName: "PeerCount",
			Handler:    _PublicNetAPI_PeerCount_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _PublicNetAPI_Version_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "net.proto",
}
